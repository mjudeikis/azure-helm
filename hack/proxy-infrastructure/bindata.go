// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package proxyinfrastructure generated by go-bindata.// sources:
// data/start.sh
package proxyinfrastructure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _startSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x93\x4f\x4f\x1b\x31\x10\xc5\xef\xfe\x14\x53\x5a\x95\x93\xd7\x4a\x8b\x50\x85\x08\x12\x84\x20\x2a\xd4\x82\x94\xfe\x39\x20\x0e\x13\x7b\xe2\x58\x78\xed\x95\x3d\xa6\xd9\x90\x7c\xf7\x6a\xb3\x14\x68\x50\x2b\x2e\x6b\x6b\x9f\xe7\xed\x9b\xdf\x8e\xdf\xbe\x51\x53\x17\xd4\x14\xf3\x1c\x24\x2d\x84\xa0\x05\x69\xf8\x70\xf4\x7e\xd0\x6d\x9b\x98\x18\xce\x2f\xbf\x8c\x87\x2a\xc5\xc8\x42\x1b\x21\xda\x52\x83\x0b\x99\xd1\x7b\xb0\x8e\x41\xb6\x42\xe8\x92\x3c\xc8\x0c\x73\xe6\x26\x1f\x28\x95\x39\x26\xb4\x54\xd9\x18\xad\x27\x6c\x5c\xae\x74\xac\x95\x8d\x1e\x83\x55\x36\x0e\xaa\xc1\xa0\xda\xaf\xbc\x0b\x65\x21\xb1\x36\xfb\x7b\x15\x63\xaa\xec\x12\x56\xc0\x98\x40\x8e\x40\x95\x9c\x94\x8f\x1a\x3d\xc8\xc5\x52\x5c\x1d\x7f\x3b\x1f\xbe\xeb\x9e\x07\x4f\x8a\xb2\xb1\x4b\x2f\x84\x8d\x60\x89\x41\x96\x2e\xd1\xbc\x4c\x37\x5f\x8b\x0d\x85\x3c\x77\x33\x7e\xda\x49\x5c\x96\x44\x4a\xd7\x46\x35\x29\x2e\x5a\x21\xea\x5b\xe3\x12\x18\x64\x14\x1a\x19\x8e\x36\xaf\xa5\xa6\xc4\x55\x43\x35\x1c\x1e\xee\x8e\x2f\xcf\x76\xc5\xfd\x3d\x54\xa3\x18\x66\xce\x56\x13\x4a\x77\x94\x46\x94\x18\x56\xd0\x2d\xc7\xf9\xa4\x65\xca\xb0\x82\x09\x27\x17\x2c\xac\xd7\x62\x7c\x79\x26\x9e\x1b\xde\x52\xfb\x7f\xbf\x0b\x6a\x61\x05\x57\xc9\xdd\x21\xd3\x05\xb5\xaf\x31\xd5\xf8\x2f\xcf\x11\xbe\x2a\x9b\x22\xd6\x2a\xb7\x99\xa9\x36\x0f\xab\xc2\x14\xe5\xc6\xbe\xca\x94\xee\x9c\xa6\x47\xff\xeb\xef\xc1\xf1\x8d\x38\xa5\xac\x93\x6b\xd8\xc5\x30\x7c\x3c\x2c\xc4\xf5\xa4\x3f\x7e\x23\xc6\x0b\xd2\x13\xc6\xc4\xfd\xd0\x3c\xfc\xa4\x1e\x38\x6c\xd0\x42\x2f\x6c\xb1\xee\x20\xfd\xa5\xfc\x81\x26\x35\xbe\xac\xea\x7b\x97\xb9\x4c\x03\x31\xec\x3c\x6b\xfe\x2b\xf1\x29\xcd\x5c\x70\x5d\xc4\xea\x47\x27\xaf\xd7\x3b\x42\x5c\x7f\xee\xa7\xf6\x46\xfc\xc4\xc0\x64\x4e\xda\x61\x5d\x3c\x3b\x59\x32\xa5\x6e\xfe\x2c\x71\x0f\x27\x17\x13\xa1\xe7\xa1\xd9\x83\x41\xaa\x63\x90\x89\x7c\x44\xf3\x42\xa5\x80\x53\x4f\xf0\x84\x62\x4b\xcf\x1d\x8a\x67\xb2\x98\xb9\x44\xbf\xd0\x7b\xa9\x6b\x03\x52\x2e\x63\xa0\x61\x53\xa6\xde\x69\x90\x12\x8d\x91\xdd\xad\x1b\x7e\xda\xdb\xfb\xa8\x58\x37\x20\x65\x43\xa9\xc6\x40\x81\xb7\x4b\x1f\x12\xfd\x0e\x00\x00\xff\xff\x2f\xc9\x8a\x4a\xc4\x03\x00\x00")

func startShBytes() ([]byte, error) {
	return bindataRead(
		_startSh,
		"start.sh",
	)
}

func startSh() (*asset, error) {
	bytes, err := startShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "start.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"start.sh": startSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"start.sh": {startSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

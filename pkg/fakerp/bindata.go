// Code generated by go-bindata.
// sources:
// data/azuremonitor-containerSolution.json
// DO NOT EDIT!

package fakerp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuremonitorContainersolutionJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x54\x5d\x6b\xdb\x30\x14\x7d\xcf\xaf\x30\xd9\x20\x2d\x34\xb6\x33\x28\x83\xbe\x76\x50\x02\xcb\x0a\xed\x58\x1f\x4a\x1e\x14\xe5\xae\x51\x27\x4b\xe2\x5e\xb9\x25\xf3\xf2\xdf\x27\xf9\xab\x89\xe5\x7c\x3c\x6c\x75\x02\x71\xee\xbd\xe7\x1c\xf9\xe8\xc8\xc5\x20\x72\xd7\xf0\x23\xf1\x15\x64\x6c\x78\x15\x0d\x57\xd6\x1a\xba\x4a\x92\xaa\x12\x67\x4c\xb1\x27\xc8\x40\xd9\x98\xfd\xce\x11\x62\xae\xb3\xba\x47\xc9\xa7\x74\x72\x39\x4e\x27\xee\x9b\x2c\xc1\x48\xbd\xf6\x73\xdf\x21\x33\x92\x59\x88\x9f\x49\xab\x0f\xc3\x8b\x4a\x81\x6b\x65\x5d\xf3\x07\x20\x09\xad\xbc\xd0\x24\x4e\xfd\xa7\x19\x30\x0c\x59\x06\xd6\xf5\x5d\xb3\xd8\xd4\x55\x04\xd2\x39\x72\xf0\xc5\xc7\xb2\xe4\xaf\xa2\xbd\x2b\x87\xec\xda\x80\x67\x9c\x09\x8e\x9a\xf4\x4f\x1b\xdf\x35\xb0\xad\x75\x51\xad\xd4\xc2\x94\xd3\xf3\xb0\xc7\x6b\xad\x38\xb3\x67\x23\xf7\x6b\x99\x50\x80\x53\x45\xe2\x69\x65\x69\x74\x11\x8d\xce\x8a\x22\x8a\x1f\x34\xfe\x22\xc3\x38\x7c\x73\x98\x68\xb3\x39\x1f\x9d\xcf\xbb\x74\xcc\x88\xad\xa7\x73\xd6\x7c\x1e\xa7\x97\xe3\x49\xda\x9d\xa3\x7c\x41\x1c\x85\xb1\x6e\x72\xba\xf4\xb3\x5e\xe1\x7e\xbb\xfa\xc5\x49\x74\x61\x8d\x13\x37\xa8\x73\xd3\xa0\xee\xb6\x8b\x3d\x20\x83\xda\x00\x5a\x51\xfa\xb7\xeb\x5a\xd9\xcf\xf4\xb2\xb4\x60\xaa\x38\x96\x9b\xcc\x64\x87\xa2\x32\xb8\xde\xd2\x5e\x92\xf7\x09\x50\xa0\x78\x2c\x50\x01\xa0\x37\x60\xc1\xd4\x0b\x43\xc1\x16\x12\x0e\x0e\xf5\xa7\xb2\x7b\xf5\x5b\xd5\x92\x04\x79\x71\x61\xf1\x4e\x8c\x0d\xc2\x8b\x80\xd7\x3d\xcf\xd1\xe2\xc3\xd4\xdf\xba\xbd\x66\x3e\x40\x34\x6b\x4d\x4f\x48\xcb\xbc\xac\x1d\xe3\x93\x9a\x97\xe0\x26\x5b\x5f\xeb\xff\xd1\x9f\xe8\x99\xc2\x6c\x05\xf8\x7f\x7b\x9c\x02\xfa\x23\x51\x0e\xe6\x5f\x1b\x8d\xe6\x8c\xbc\x9d\xb5\x87\xa0\x55\x1e\xb8\x83\x9c\x7b\xa2\xf0\xb6\x3c\xc9\xd4\x69\x0b\xfb\xbf\x3e\x55\x8b\x41\xbd\xcc\xb9\xdd\x51\xb9\x9d\xdd\xdf\x30\x29\x01\xd7\x89\xe7\x0f\x45\x4f\xa6\xce\xb4\x8f\xc5\x75\xfd\xea\x38\x09\x94\x2f\xa4\xa0\x15\xe0\x4e\x5e\x8f\x18\xbe\xb7\xdb\xdf\x99\x07\xd5\x9e\x2d\xeb\xbe\x04\x06\xfd\xbc\xd5\xdd\x7c\xb0\x19\xfc\x0d\x00\x00\xff\xff\xda\xa5\x71\x0c\x20\x07\x00\x00")

func azuremonitorContainersolutionJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuremonitorContainersolutionJson,
		"azuremonitor-containerSolution.json",
	)
}

func azuremonitorContainersolutionJson() (*asset, error) {
	bytes, err := azuremonitorContainersolutionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuremonitor-containerSolution.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuremonitor-containerSolution.json": azuremonitorContainersolutionJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuremonitor-containerSolution.json": {azuremonitorContainersolutionJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

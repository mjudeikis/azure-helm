// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package fakerp generated by go-bindata.// sources:
// data/azuremonitor-containerSolution.json
package fakerp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _azuremonitorContainersolutionJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x5d\x6f\xda\x30\x14\x7d\xe7\x57\x58\x6c\x12\xad\xd4\x7c\x55\x42\x93\x78\x65\x52\x85\x34\x56\xa9\x9d\xd6\x87\x8a\x07\x63\xee\x8a\x3b\x7f\xe9\xda\x69\xc5\x58\xfe\xfb\x64\x93\xa4\x10\x87\xc2\xc3\xb6\xf0\x12\xee\xbd\xe7\x1c\xe7\xf8\xd8\xdb\x01\x21\x84\x0c\x3f\x5a\xb6\x06\x49\x87\x13\x32\x5c\x3b\x67\xec\x24\xcb\x76\x95\x54\x52\x45\x9f\x40\x82\x72\x29\xfd\x55\x22\xa4\x4c\xcb\xba\x67\xb3\xeb\xbc\x18\x27\x79\x91\xe4\x45\xb6\x02\x23\xf4\xc6\xcf\x7d\x03\x69\x04\x75\x90\x3e\x5b\xad\x3e\x0c\xaf\x76\x0a\x4c\x2b\x07\xca\x7d\x07\xb4\x5c\x2b\x2f\x54\xa4\xb9\xff\x35\x03\x86\x22\x95\xe0\x00\xed\x70\x42\xb6\x55\x5d\x45\xb0\xba\x44\x06\xbe\xf8\x18\x4a\xfe\xd9\xb6\x6f\x61\xc8\x6d\x0c\x78\xc6\x39\x67\xa8\xad\xfe\xe1\xd2\xbb\x06\xb6\xb7\x2e\x5b\x2b\xb5\x30\x45\x65\x80\x3d\x4e\xb5\x62\xd4\x5d\x8c\xa6\x5a\x39\xca\x15\xe0\x4c\x59\xfe\xb4\x76\x76\x74\x45\x46\x17\xdb\x2d\x49\x1f\x34\xfe\xb4\x86\x32\xf8\x4a\x25\x90\xaa\xba\x1c\x5d\x2e\xba\x74\xd4\xf0\xbd\xaf\xbb\xce\x8b\x4f\x49\x3e\x4e\x8a\xbc\x3b\x67\xcb\xa5\x65\xc8\x8d\xe3\x5a\xcd\x56\x7e\xd6\x2b\xdc\xef\x57\x3f\x93\xaa\xea\xc2\x1a\x27\x6e\x50\x97\xa6\x41\xdd\xed\x17\x7b\x40\x06\xb5\x01\x74\x3c\xf8\x77\xe8\x5a\xe8\x4b\xbd\x0a\x16\xcc\x14\xc3\xb0\xc9\x54\x74\x28\x76\x06\xd7\x5b\xda\x4b\xf2\x7f\x02\x14\x29\x9e\x0a\x54\x04\xe8\x0d\x58\x34\xf5\x42\x91\xd3\xa5\x80\x77\x87\xfa\x53\xd9\x7d\xfa\xad\x6a\x49\xa2\xbc\x8c\x93\xc2\x3b\x91\x18\x84\x17\x0e\xaf\x47\xbe\xa3\xc5\xc7\xa9\xbf\x35\x80\xd4\x07\xc8\xce\x5b\xd3\x33\xab\x45\x19\x6a\xa7\xf8\x84\x66\x01\xdc\x64\xeb\x4b\xfd\x9f\xfc\x26\xcf\x36\xce\x56\x84\xff\xbb\xc7\x29\xa2\x3f\x11\xe5\x68\xfe\xb5\xd1\x68\xce\xc8\xdb\x59\x7b\x88\x5a\xe1\xc0\xbd\xcb\x79\x24\x0a\x6f\xcb\x13\x54\x9d\xb7\xb0\x7f\xeb\x13\xa9\xbd\x5a\x95\xcc\x1d\xa8\xdc\xce\xef\x6f\xa8\x10\x80\x9b\xcc\xf3\xc7\xa2\x67\x53\x4b\xed\x63\x31\xad\xaf\x8e\xb3\x40\xe5\x52\x70\xbb\x06\x3c\xc8\xeb\x09\xc3\x8f\x76\xfb\x3b\x8b\xa8\xda\xb3\x65\xdd\x4b\x60\xd0\xcf\xbb\x7b\x5b\x0c\xaa\xc1\x9f\x00\x00\x00\xff\xff\xda\xa5\x71\x0c\x20\x07\x00\x00")

func azuremonitorContainersolutionJsonBytes() ([]byte, error) {
	return bindataRead(
		_azuremonitorContainersolutionJson,
		"azuremonitor-containerSolution.json",
	)
}

func azuremonitorContainersolutionJson() (*asset, error) {
	bytes, err := azuremonitorContainersolutionJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "azuremonitor-containerSolution.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"azuremonitor-containerSolution.json": azuremonitorContainersolutionJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"azuremonitor-containerSolution.json": {azuremonitorContainersolutionJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master/etc/etcd/ca.crt
// data/master/etc/etcd/etcd.conf
// data/master/etc/etcd/peer.crt
// data/master/etc/etcd/peer.key
// data/master/etc/etcd/server.crt
// data/master/etc/etcd/server.key
// data/master/etc/origin/cloudprovider/azure.conf
// data/master/etc/origin/master/admin.kubeconfig
// data/master/etc/origin/master/aggregator-front-proxy.crt
// data/master/etc/origin/master/aggregator-front-proxy.key
// data/master/etc/origin/master/ca-bundle.crt
// data/master/etc/origin/master/ca.crt
// data/master/etc/origin/master/ca.key
// data/master/etc/origin/master/front-proxy-ca.crt
// data/master/etc/origin/master/master-config.yaml
// data/master/etc/origin/master/master.etcd-ca.crt
// data/master/etc/origin/master/master.etcd-client.crt
// data/master/etc/origin/master/master.etcd-client.key
// data/master/etc/origin/master/master.kubelet-client.crt
// data/master/etc/origin/master/master.kubelet-client.key
// data/master/etc/origin/master/master.proxy-client.crt
// data/master/etc/origin/master/master.proxy-client.key
// data/master/etc/origin/master/master.server.crt
// data/master/etc/origin/master/master.server.key
// data/master/etc/origin/master/named/console.crt
// data/master/etc/origin/master/named/console.key
// data/master/etc/origin/master/openshift-master.kubeconfig
// data/master/etc/origin/master/scheduler.json
// data/master/etc/origin/master/service-signer.crt
// data/master/etc/origin/master/service-signer.key
// data/master/etc/origin/master/serviceaccounts.private.key
// data/master/etc/origin/master/serviceaccounts.public.key
// data/master/etc/origin/master/session-secrets.yaml
// data/master/etc/origin/node/ca.crt
// data/master/etc/origin/node/client-ca.crt
// data/master/etc/origin/node/node-config.yaml
// data/master/etc/origin/node/node.kubeconfig
// data/master/etc/origin/node/pods/apiserver.yaml
// data/master/etc/origin/node/pods/controllers.yaml
// data/master/etc/origin/node/pods/etcd.yaml
// data/master/etc/origin/node/pods/ovs.yaml
// data/master/etc/origin/node/pods/sdn.yaml
// data/master/etc/origin/node/resolv.conf
// data/master/etc/origin/node/sdn.kubeconfig
// data/master/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master/etc/sysconfig/atomic-openshift-node
// data/master/root/.kube/config
// data/master/var/lib/origin/.docker/config.json
// data/worker/etc/origin/cloudprovider/azure.conf
// data/worker/etc/origin/node/bootstrap.kubeconfig
// data/worker/etc/origin/node/ca.crt
// data/worker/etc/origin/node/node-bootstrapper.crt
// data/worker/etc/origin/node/node-bootstrapper.key
// data/worker/etc/origin/node/node-config.yaml
// data/worker/etc/origin/node/pods/ovs.yaml
// data/worker/etc/origin/node/pods/sdn.yaml
// data/worker/etc/origin/node/resolv.conf
// data/worker/etc/origin/node/sdn.kubeconfig
// data/worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/worker/etc/sysconfig/atomic-openshift-node
// data/worker/var/lib/origin/.docker/config.json
package startup

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterEtcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdCaCrt,
		"master/etc/etcd/ca.crt",
	)
}

func masterEtcEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x51\x4f\xc2\x30\x14\x85\xdf\xfd\x15\xfc\x00\x65\x63\x22\x38\x92\x3e\x94\xee\x1a\x1a\x4a\xd1\xee\x8e\x84\xa7\x66\x62\x13\x8d\xa2\x64\xab\x24\x86\xf0\xdf\x0d\x2d\xc2\x1c\x23\x6c\xd9\x4b\xcf\x77\x6e\x77\xee\x01\x64\x89\xa6\xc9\x0c\x14\xf2\x14\x34\x13\x1c\x24\xea\x4c\x89\x94\xbc\x5a\xbb\x2a\x07\x41\xb0\xd9\xb4\xda\xa3\xaf\xd2\x7e\xe6\x4b\xd3\xda\x6e\x07\xd1\x6d\x3f\xbe\x72\x3e\x06\x0a\xf5\x03\x17\x40\x02\x63\x17\xbb\xef\x25\x28\x4d\xb1\x36\x45\x7b\x51\xd8\x3d\xe3\x27\x3a\x94\x66\x38\x22\xb6\xf8\x36\x5e\x4a\x28\x52\x9d\x70\x45\x82\x75\x5e\x04\x1f\x6f\xcf\x6e\x82\xd7\x40\x00\x43\x3e\x95\x1a\xf9\x04\xa6\x19\x92\xe8\x2e\x0c\xbd\x34\x02\xaa\x70\x08\x14\x35\x97\x08\x6a\x46\x05\x39\x68\x5c\x72\xe4\x54\x54\x12\x3d\x02\xa8\x4b\x79\xee\x6b\x6e\x26\xb2\x14\x41\x91\x65\x5e\x5a\x53\xdc\x84\xee\x39\xf8\xff\x9d\x3a\xf7\x75\xf5\xa8\xd3\x08\x76\x4e\xc1\xa8\x11\x8c\x2a\xff\x33\x86\xf9\x99\xf5\xbe\x9b\x1f\x8f\x08\x9e\x22\xc8\xc6\xde\xc2\xb6\x7b\x2b\x7d\xed\xe1\xd3\x95\x1c\xd1\xbf\xab\x25\x9d\x00\xa9\x6d\xca\x2b\xce\xdd\xd4\xfc\xca\x54\x7b\xf7\xd8\xf9\xf2\x9d\xde\x10\xd0\x4d\x39\xc4\x73\x14\xaa\x5d\x1d\x89\x66\xb4\x0e\x2f\xf2\xe3\x85\x4f\xd9\x14\xa9\x1e\x52\x36\x06\x99\xe8\xe1\x1c\x21\x25\xdd\x28\xee\xc6\xbd\x7e\x14\xf7\x3c\x73\x71\xd2\x6f\x00\x00\x00\xff\xff\x27\xa7\x9b\x77\x0f\x03\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func masterEtcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerCrt,
		"master/etc/etcd/peer.crt",
	)
}

func masterEtcEtcdPeerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func masterEtcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerKey,
		"master/etc/etcd/peer.key",
	)
}

func masterEtcEtcdPeerKey() (*asset, error) {
	bytes, err := masterEtcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func masterEtcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerCrt,
		"master/etc/etcd/server.crt",
	)
}

func masterEtcEtcdServerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func masterEtcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerKey,
		"master/etc/etcd/server.key",
	)
}

func masterEtcEtcdServerKey() (*asset, error) {
	bytes, err := masterEtcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\x64\x82\x2e\x51\xaf\x82\xd0\x09\x8a\xfd\x4a\x40\x12\xf8\xd6\x5c\x6a\x77\xf7\x8d\x21\x69\x05\x35\xd0\xd2\x56\x9f\x0e\xe6\xdb\xdf\xb6\xd3\x43\x1b\x98\xdd\x4e\x49\xd9\xad\x57\x35\xb0\x80\xa1\x07\xe4\x93\xd2\xa9\x76\xc9\x9c\xcb\x1f\x00\x00\xff\xff\x93\xa5\x60\x70\x42\x00\x00\x00")

func masterEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginCloudproviderAzureConf,
		"master/etc/origin/cloudprovider/azure.conf",
	)
}

func masterEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := masterEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKubeconfig,
		"master/etc/origin/master/admin.kubeconfig",
	)
}

func masterEtcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyCrt,
		"master/etc/origin/master/aggregator-front-proxy.crt",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyKey,
		"master/etc/origin/master/aggregator-front-proxy.key",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaBundleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\xe4\xa8\x97\xee\x60\xe3\x06\x9d\xa0\xd8\x8f\x06\x24\x42\x1a\x0b\x52\xbb\xbb\xaf\x77\x62\x98\xf3\x99\x45\xd7\x1a\x5f\x47\xa5\x39\x6c\x30\x69\x28\x81\x73\x7c\xb4\x5c\xa0\xc0\xb7\x7a\x16\x85\x25\x58\x93\x1d\x0b\x7d\x94\xdc\x44\x0f\x1a\x63\xfa\x03\x00\x00\xff\xff\x01\x5e\x1d\x24\x46\x00\x00\x00")

func masterEtcOriginMasterCaBundleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaBundleCrt,
		"master/etc/origin/master/ca-bundle.crt",
	)
}

func masterEtcOriginMasterCaBundleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaBundleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca-bundle.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaCrt,
		"master/etc/origin/master/ca.crt",
	)
}

func masterEtcOriginMasterCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func masterEtcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaKey,
		"master/etc/origin/master/ca.key",
	)
}

func masterEtcOriginMasterCaKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func masterEtcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterFrontProxyCaCrt,
		"master/etc/origin/master/front-proxy-ca.crt",
	)
}

func masterEtcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xeb\x73\xdb\xb8\x11\xff\xae\xbf\x02\xe3\x2f\x69\x3b\x25\x29\xbf\xf2\xe0\x4c\x3f\xa8\xf6\xb9\xa7\x39\xc7\x51\xa5\xa4\xd3\x99\x4e\xa7\x03\x01\x2b\x0a\x11\x08\x30\x78\xe8\xac\x73\xfd\xbf\x77\xf0\x20\x09\xd2\x72\x2e\x93\x26\xed\x39\x1f\x22\x62\x7f\xbb\xd8\x17\x76\x17\xc0\xb4\x66\x5a\x33\x29\xae\xa4\xd8\xb0\xaa\x9c\x20\xd4\x70\x5b\xb1\xe4\x1b\xa1\x3f\x5b\xc6\xe9\x35\x6c\xb0\xe5\x46\x87\x25\x84\x88\x07\x58\x85\x0d\x93\xa2\x5d\x44\x08\x37\xec\x6f\xa0\x9c\xc4\x12\xed\x4f\xbb\x65\x10\xfb\x12\xfd\xe3\x9f\xdd\xf7\x8e\x09\x5a\x0e\x05\x87\x1d\x3b\x84\x02\x2d\xad\x22\xa0\x7b\xd9\x08\x71\x56\x33\xa3\x4b\xf4\xf0\x98\x2c\x2a\xf8\x64\x41\x27\xcb\x5e\xec\xbb\x3d\x28\xc5\x28\x7c\xa5\xc2\x89\x82\x9d\xa4\x44\x43\xd9\x80\xd0\x5b\xb6\x31\x39\x93\xc5\xbc\xc6\x15\x2c\x24\x67\xe4\xf0\x95\xde\xb9\x07\x62\x1d\x72\x69\x79\x6a\x70\x86\x6a\x6c\xc8\xd6\xcb\x9f\x09\x21\x8d\x17\x37\xf0\x48\x86\x76\x70\x28\x11\x73\x10\x9d\x0f\xd4\xa2\x20\x0e\x59\x27\x3a\xe1\x41\x68\x8f\xb9\x85\x12\xbd\x30\xca\xc2\x8b\x84\x22\x70\x0d\x65\xaf\x4e\x46\x41\x30\xa0\x09\x40\x8a\xe5\xb1\xb8\x64\x5d\xb8\x4a\xd4\x48\xaa\x9f\x21\xad\x9d\x3b\xf5\x20\x74\x1f\x81\x98\x12\x39\x3d\x92\x65\xbd\x63\xcd\x3b\xbf\x13\xf7\x7a\xdc\x60\xc6\xad\x82\x11\x2e\x84\x28\x71\x7e\x8c\x0f\xb6\x94\x99\x3e\x7f\x41\xe0\x35\x07\x1a\x99\x71\x55\x29\xa8\xb0\x91\x2a\xc9\x78\x25\xef\x0f\x57\x9c\x81\x30\x73\xb1\x91\xc1\x30\x02\xca\xdc\x30\x0e\x25\xea\x59\xb2\x8d\x92\xc2\x64\x1e\x9f\x13\x65\x3c\x70\x07\x87\xcf\xe2\x76\x70\x98\xe0\x86\xdd\xc2\x1e\xb8\x2e\x27\x99\x0b\xfc\x28\x0f\xb0\x35\xdb\x5e\x9d\x98\xcf\x3f\x02\xa6\xa0\xa2\x32\x5e\xb9\xab\x59\x89\x12\xc9\x19\xc1\x9d\x12\x11\x20\xeb\x5a\x8a\x3b\x5c\xb7\xd1\xc9\x9e\x51\x6a\x12\xb2\xce\x28\x1c\x76\x59\x28\xd8\xb0\xfb\x9e\xeb\xef\xd9\x12\x6a\x69\x20\xfb\xc1\x61\x32\xbf\x5a\x29\x69\x9b\x00\x7f\x8a\xfb\x8b\x23\xfa\x45\xab\x41\xb9\x34\x7a\x0e\xf9\x41\x83\x9a\x10\x29\x8c\x92\x9c\x43\x12\x05\xe0\x40\xfa\xd3\xc2\x25\xd9\xdd\xf9\x6c\xec\x72\x3a\xab\xb1\x36\xa0\xb2\x9e\xd9\xa5\x92\x06\xb5\x67\x04\x56\xee\x3f\x51\x5d\x81\x32\x41\x80\x66\x95\x68\xdd\x97\x46\x33\xe2\xb3\x40\xef\x1c\x98\xc4\x71\x84\x70\xf1\x4b\xb6\x2c\xd1\xc9\x1f\x4e\x26\x44\x2a\x3d\xe3\x5c\xfe\x0c\xf4\x9d\x62\x15\x73\x87\x92\x0a\xdd\x5b\xb3\x66\x82\xce\x28\x55\xa0\x75\x89\xa6\xb9\xff\x57\xbe\x9e\x5e\x9e\x47\xda\x1d\x98\x9f\xa5\xda\x95\xc8\x90\xe6\x62\x02\x86\xd0\x61\x02\x12\x5c\xa2\x60\x6f\xee\x88\x7d\xac\x7b\x4b\x06\x64\xcf\x1c\x21\x9d\x25\x47\x10\xce\x1a\x84\xac\xe2\x3e\x32\x19\xda\x1a\xd3\xe8\xb2\x28\x1e\x1e\x50\xfe\xa3\xd4\xc6\x85\x0e\x3d\x3e\x96\x67\xe7\xaf\xde\x78\xb5\x56\x46\x2a\x5c\x41\x6f\xd9\xce\xae\x41\x09\x30\xa0\x23\x29\x24\x4f\x99\x10\x72\x26\x8f\x01\x87\xa5\xcf\xc5\x75\xe5\xe2\x3a\x12\x93\xd6\xb0\x23\xb0\x54\x88\xaf\x7a\xbd\x66\x1b\xa9\x6a\x6c\x4a\xe4\x6c\x09\xab\xf9\x3c\xd4\xc5\x1b\x4f\x41\x8f\x8f\x81\x25\x2d\x17\x8e\x91\x09\xe3\x92\x96\x2f\xa1\x62\xda\xa8\x43\xeb\x88\x12\x51\x49\x76\xa0\x32\x15\x09\x39\x0d\xcd\x2a\xd7\x7b\x52\x5e\x4e\xa7\xd3\x49\x28\x42\x6f\xbd\xa3\x63\xfd\x71\x76\x73\x30\x4f\xe3\xf9\x7c\x0c\x23\xcb\xe7\xc3\x38\x02\x85\x48\x36\x52\x99\x12\x9d\x4e\xcf\x2e\xa7\x93\xde\xe1\xa9\x3e\x6e\x77\xdc\x30\x77\x40\x40\xcd\x54\x65\x6b\x10\x6d\x1b\x27\x5c\x5a\x9a\x91\xa4\xd7\x67\xa8\x00\x43\x0a\xe9\x93\xba\xf0\xf4\x46\xc9\x3d\xa3\xa0\x0a\xfc\x8b\x55\x90\x3b\x74\xc2\xdc\x52\xbb\x82\xe3\x40\xe1\x04\x86\x80\x65\x6b\x4c\x76\x20\x68\x0b\x70\x49\x75\x3e\x00\xd4\x40\x19\xce\xcc\xa1\x81\x4e\x48\xd3\x70\x46\x7c\xb7\x2b\xf6\x82\xe6\x49\x6a\x35\x4a\x1a\xb9\xb6\x4e\x85\xfe\x54\xfe\x2f\xcd\x22\xdc\xfa\x32\xe4\xca\x03\x13\x55\xe6\x82\x99\x6d\x5c\xa0\x8e\xec\x14\x42\x57\x0c\x2a\xf5\x90\x7d\x07\x87\x2f\xe0\x0e\xc1\x0e\xdf\xf3\x45\x89\x4e\xcf\x5e\xf9\x9a\x72\xfa\xeb\xed\x2b\x66\x4f\x6c\x19\x69\x82\x3d\x4d\xb1\x01\x28\xec\xa9\xc9\x16\xa8\xed\x2a\x75\x80\x1f\x51\xb2\xc3\xe5\x1f\xb5\x9f\x36\x62\x19\xd5\x77\x92\xc2\x42\x2a\xb3\xc4\xa2\x72\x33\xc7\x8b\x84\xb6\xb2\x6b\x01\x2e\x7f\x5f\x9d\xe5\xe7\xbe\x46\x16\xa7\x2f\x27\x41\x62\xb0\xc8\x47\x14\xee\xc3\xf9\xfc\xa9\x4b\x83\xab\xd8\xef\x84\x08\x4d\x63\x34\xed\x61\x42\xa0\x71\x64\x03\xc2\xbc\x3f\x34\xa0\xcb\x2f\xc9\xa9\x3f\xa6\x98\x68\x06\x42\x6b\xab\xb4\x29\xd1\xc5\x74\x3a\x89\xa3\x5d\x2b\xf5\x8b\x84\x7a\xa6\x4f\x8d\x2e\xd1\x99\x97\xf0\xd4\x18\xf7\x2b\x9e\xd5\xe0\x9e\xae\x04\xde\x4a\xd9\xb8\xe3\xf3\x7f\x30\xf7\xe5\x7f\x6d\xee\xb9\x97\xf0\xc4\x96\xd4\xda\x71\x6f\xf7\x02\xc3\xb9\x8d\x59\xb0\xb0\x6b\xce\xc8\x87\xe5\xad\x2f\xeb\x8d\x62\xc2\xa0\x93\xb6\x69\x9d\xf8\x3a\x6f\x30\x13\xa0\x56\x21\xa5\xf2\x85\x92\x0d\x28\xc3\x40\xe7\x81\xb7\xeb\x6a\xff\x46\x9f\xac\x34\xae\xbb\x4d\x44\xe8\xbe\x7d\x81\x8c\xa7\x32\x76\xe5\xd8\x1b\x09\xa3\xca\xd5\xd6\xfc\xf4\xec\x75\xc8\xcd\x0b\x6f\xdd\x56\x6a\x13\x32\xf7\x16\x44\x65\xb6\x25\x7a\x93\xc4\x75\xbe\x88\x52\xae\xe6\xd7\xcb\x28\x29\x0e\x00\x85\x73\x48\xdc\x7b\xe1\xaf\x59\x61\xc4\x51\x40\xb7\xd8\x14\xbd\x37\xe4\x5e\x67\x11\xd7\xf8\x5e\xd5\x9f\x99\x44\xf8\xf8\xdc\xc8\xe1\x1c\x89\xb5\x06\xf3\x0d\xfd\x77\x52\x10\x29\xb4\xe4\x50\x9c\xa4\xbe\x74\x93\x21\x16\x26\xbd\x30\xd6\x60\xb6\x92\x96\x08\x5b\xe3\x5a\x38\xa3\x20\x0c\x33\x87\x45\xac\xa9\xd1\x29\x5c\x56\x4c\x24\x33\x7d\x8d\x9b\x86\x89\xea\x6d\x64\x26\x1c\xb3\x7a\xd2\xdf\x4a\x1e\x1e\xd0\xef\x98\xa0\x70\xff\x79\xa5\x67\xd6\x6c\x17\x4a\xba\x92\x9a\xcf\xc7\x1b\xa3\xe9\xef\xf3\xbb\x51\x2e\xb8\x1d\x86\xd5\xfe\x99\x7b\x9a\x57\x28\xb9\xf6\x40\x8d\x19\x4f\x2f\x6b\x7e\xa1\xfb\x66\x34\xa5\x69\xbb\x9e\x0c\x6e\x59\x09\xcd\x7d\x77\x9f\x8d\x82\x0d\x28\x05\xf4\x43\x1c\xa4\x53\xa4\x15\xec\x93\x85\x7f\x25\x0c\xa1\x56\xcf\xaf\xbf\x9d\x7f\xda\x8f\x3c\xb6\x94\xeb\xb1\xb3\xda\x4d\x57\x40\x14\x98\xef\xb0\x71\x10\xfc\x74\xdb\x30\x6b\xbd\x6b\x40\xcc\xaf\xc7\x12\x22\xa4\x1d\x6c\x63\x18\xad\xd9\x4a\xc5\x7e\x81\x63\xc9\xef\xd3\x2f\xaf\x19\x51\x52\xcb\x8d\x91\x82\x33\xe1\xc6\x80\xba\x38\xf9\xc6\xf6\xbc\x07\x81\xbd\x23\x4f\x0a\x7f\x44\xcf\x8a\x4e\xb1\x93\xa7\x56\x22\x64\xe4\x0e\xc4\x6f\x4d\x65\xaf\xd4\x48\xdd\xd8\xa8\x67\xc9\x68\xfb\x3d\xab\x76\x2b\xfd\xeb\xe4\xde\xfc\xf5\xfa\x6e\x28\x4d\xc3\xe8\xe9\xab\x5b\x7a\x8b\xef\x67\x15\xac\x5c\x2b\xa2\xae\x93\xb5\xcd\x30\x92\x43\xd5\xd6\x5a\xa4\x8b\x21\x6b\xf5\xf3\x03\x52\x80\x65\x3a\xe0\xf2\x03\xae\x5d\xb1\xf0\x7e\x4d\x55\x70\xcd\x5c\xeb\xf7\x6e\x79\xa4\xc6\xeb\x97\xed\x0c\xd2\xe5\xcf\x31\xd8\xe5\x74\x3a\x69\x94\xfc\x08\x24\x29\xca\xf1\xe2\xe2\x86\xb1\x95\xbf\x69\x4b\x55\x22\x21\x29\x64\x4a\x72\xc8\x07\x77\xb7\x82\xc8\xba\xb1\x06\xfe\x14\x4b\xb3\x06\x62\x15\x33\x07\x77\xe1\x25\xd8\x71\x86\x7a\x4d\x74\xb7\x12\x87\x3b\x3d\x2d\x8b\xb3\x96\x78\x8b\xd7\xc0\xf5\x02\xd4\x22\x28\x53\xa2\xcb\xf0\x42\xc0\xe8\x98\xef\x74\xda\xfe\x65\xa7\x6f\xda\xbf\xc2\xaf\x4e\x94\xb4\xc6\xdd\xec\x3b\x53\xb4\x5d\x53\x59\x63\x26\xbe\xb8\xf4\x2c\xa5\x35\x5e\x0d\x97\xf9\x21\xd1\x7d\x92\xad\x5a\x49\x69\x5e\xc4\x3e\x3b\x23\x44\xda\xb4\xad\xd5\x58\xe0\x0a\x68\xf7\xba\x92\xb5\x3e\xf5\xbf\xfd\xd3\x96\x2f\x43\x6e\xbd\xe1\xf2\xe0\x3f\xd2\x13\x92\xad\xad\xa0\x1c\xe2\x41\x69\x14\xdb\x63\x03\x3f\x8d\x5e\x1d\x70\xd8\xd6\xcd\x53\x9e\xde\x5e\xf3\xbc\xbe\x11\x1c\xb7\x7f\xc2\xe1\x31\x9e\x41\x87\xd7\x90\xf6\x3a\x70\xf4\x31\xe2\xe5\xc5\xc5\xf1\xc7\x88\x23\x97\x07\xed\x2f\x8f\xed\xed\xb5\x7b\x8c\xea\x4e\xfd\xf8\x1e\x11\xf1\xed\xad\xe5\x7e\x19\x9f\x68\xe7\xe2\x86\xb3\x6a\x6b\x42\x92\x76\x4f\x5d\xef\x59\x0d\xd2\x9a\xf1\x79\x73\xe7\x9f\x5e\xb9\x18\x6e\xdc\xd0\x19\xa7\xdd\x2c\x51\xef\xc8\x31\xf3\x4c\xed\xa4\xd2\x3f\xef\x74\x1a\xfe\x2a\x4b\x50\x3a\xb6\xe9\xae\x99\x64\xed\xab\xc2\x57\xd4\xad\xbd\xe4\xb6\x4e\xde\x29\xe8\x41\xe0\x9a\x11\x5f\x6c\x5d\x49\x60\xa2\xfa\x61\xf0\x48\xf9\x9f\x00\x00\x00\xff\xff\x41\x61\xd3\x42\x96\x17\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdCaCrt,
		"master/etc/origin/master/master.etcd-ca.crt",
	)
}

func masterEtcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientCrt,
		"master/etc/origin/master/master.etcd-client.crt",
	)
}

func masterEtcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientKey,
		"master/etc/origin/master/master.etcd-client.key",
	)
}

func masterEtcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientCrt,
		"master/etc/origin/master/master.kubelet-client.crt",
	)
}

func masterEtcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientKey,
		"master/etc/origin/master/master.kubelet-client.key",
	)
}

func masterEtcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientCrt,
		"master/etc/origin/master/master.proxy-client.crt",
	)
}

func masterEtcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientKey,
		"master/etc/origin/master/master.proxy-client.key",
	)
}

func masterEtcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func masterEtcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerCrt,
		"master/etc/origin/master/master.server.crt",
	)
}

func masterEtcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func masterEtcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerKey,
		"master/etc/origin/master/master.server.key",
	)
}

func masterEtcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x49\x64\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x8b\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xfc\x0f\x86\x36\x4c\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleCrt,
		"master/etc/origin/master/named/console.crt",
	)
}

func masterEtcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleKey,
		"master/etc/origin/master/named/console.key",
	)
}

func masterEtcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func masterEtcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterOpenshiftMasterKubeconfig,
		"master/etc/origin/master/openshift-master.kubeconfig",
	)
}

func masterEtcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func masterEtcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerCrt,
		"master/etc/origin/master/service-signer.crt",
	)
}

func masterEtcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func masterEtcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerKey,
		"master/etc/origin/master/service-signer.key",
	)
}

func masterEtcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPrivateKey,
		"master/etc/origin/master/serviceaccounts.private.key",
	)
}

func masterEtcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPublicKey,
		"master/etc/origin/master/serviceaccounts.public.key",
	)
}

func masterEtcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeCaCrt,
		"master/etc/origin/node/ca.crt",
	)
}

func masterEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeClientCaCrt,
		"master/etc/origin/node/client-ca.crt",
	)
}

func masterEtcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x51\x73\xdb\x36\x0c\x7e\xd7\xaf\xe0\xf5\xb9\x92\xec\x34\xbd\xed\x78\xd7\x87\x2c\xb9\x6e\xb9\xed\xb2\xcc\xce\xf6\x4e\x93\xb0\x8d\x85\x22\x14\x10\xd4\xea\x74\xfd\xef\x3b\x48\x4a\xec\x74\xcd\x6e\x4f\x36\xf5\x7d\x20\xc0\x0f\xc0\xe7\x7a\xfc\x03\x38\x23\x25\x6b\x86\x65\xe5\x8a\xec\x2f\x29\x6d\x71\x67\x2b\x63\xf4\x04\x49\xd0\x3b\x41\x4a\x97\xce\xef\x61\x8d\x8f\x60\xcd\x72\xb1\x58\x7c\x1b\xbf\xbb\xfb\xc5\x9a\xf7\xdd\x0c\x12\xe3\xe3\x7f\xc4\xbe\x84\x9f\x42\x43\xca\x3f\x60\x0a\x17\x21\x30\xe4\x6c\xcd\xf2\xec\xbb\x66\xd1\x2c\x9a\xa5\x7d\xff\x4e\xc1\x2b\xea\x1c\x26\x6b\x7c\x2c\x59\x80\x9b\x48\xde\x45\x05\xae\x6f\xad\x59\x8c\xd4\x85\x1e\x57\xe0\x0b\x67\x1c\x60\x05\x99\xe2\xa0\xcf\xb2\xa6\x05\xf1\x2d\x31\xee\x30\xb5\x89\x02\xb4\x3c\x82\x8d\xa7\xb4\xad\x02\xf9\x7b\xe0\xe3\xfb\xa7\xf3\x7a\x8f\xdd\x8a\x48\xae\x90\xc1\x0b\xf1\xc1\x9a\x76\x70\xdc\x46\xdc\xb4\x13\x23\xef\xb1\x7b\x41\x5f\xeb\x3f\x99\x79\x5c\xd2\x09\xaf\xc9\xe4\xef\x2b\x63\xe0\x13\xf8\x9f\x5c\x0a\x11\xf8\xc6\x75\x60\x4d\x72\x82\x03\x54\x90\xdc\x26\xc2\xef\x09\x43\xc4\xb4\xb3\x46\xb8\x40\x85\x9d\xdb\xc1\xb1\xae\x2d\x71\xe7\xc4\x9a\xcf\x9f\x4d\x33\x7d\x6d\xae\x95\x91\x9b\x8f\x23\x62\xfe\x36\x0f\x85\x04\xcc\x97\x2f\x95\x31\xd1\x09\x64\xb1\x66\xeb\x62\x86\x0a\x7b\xd1\x04\x79\x7d\x48\xfe\x16\x18\x29\x58\xf3\x6e\x91\xab\x7b\x4c\xc1\x9a\x1b\x0a\x73\x9e\xea\xbe\x6c\x20\x82\x5c\xf0\xae\x74\x90\x24\x6b\xe2\x0d\x91\x64\x61\xd7\xd7\x8a\xfa\xe7\x82\xea\x7f\xeb\xfa\x4c\x6d\x8e\xd4\xca\x18\x0f\x2c\x75\x40\x7e\x25\x4a\x61\xdc\xea\x40\x41\x56\x76\xa4\x12\xea\xd7\xf2\x8c\x68\xcf\x34\x60\x00\x6e\xdd\x63\x61\x98\xfa\xf8\x14\xf8\x84\x4d\xa1\x23\x41\x95\x1f\x15\xd6\x5b\x85\x29\x46\xe0\xda\x89\x38\xbf\xaf\x03\xe8\xcf\x44\x7e\xa3\xba\xbf\x51\xad\xc1\x49\x61\xa8\x77\x5a\xd2\x84\xad\x48\x9c\xc0\xcf\x93\x3e\x97\x11\x21\xc9\xe5\xb1\xee\x0f\x1a\xf9\xf6\x05\x67\x0d\x3c\x00\x7f\xcd\xa9\x8c\xd1\x37\xd7\xd1\x6d\x20\xce\x57\x8f\x1f\x98\x22\x8c\xaa\x71\x02\x81\xdc\x20\xb5\xda\xe9\x15\x45\xed\xe8\x53\x6c\x6d\xa8\x87\x94\xf7\xb8\x95\x1a\xd3\x96\xdd\x07\xd7\x63\x1e\x33\x55\xc6\xf4\x14\xea\xce\x25\xdc\x42\x96\xba\x77\xb2\x7f\x45\xf0\x9e\x82\x0a\xcd\x63\xb9\xf5\xa9\xfc\x5f\xe9\xc0\x25\x09\x76\x50\x33\x3c\x14\xbd\x53\x0f\x54\x64\x62\x2d\x17\x3a\xff\xf9\x90\x05\xba\x9a\x61\xac\x22\x4c\x90\x56\x7e\x05\x8c\x03\x84\x66\x3d\x12\x56\x33\x3e\xce\xae\x38\x4c\xc0\x2a\x10\x7a\x98\xdf\x78\x32\xbd\x9d\xd3\x15\x9f\x35\xa6\x94\xc0\xab\x5d\xfc\x3a\x00\x33\x86\xa9\x46\xe7\x3d\xf4\x0a\x0a\x24\xb9\x3b\xf4\x90\xad\x71\x7d\x1f\x67\x57\x6a\x87\x14\x4e\xc5\xec\x99\x84\x36\x65\xfb\xf6\x94\xf3\x67\xa6\xa4\xe3\x5d\x58\x17\xe5\x5c\xfd\xc9\x1f\x2f\xfc\x5f\xf7\x55\xc6\x3c\xf4\xd9\x9a\xb3\xc5\x5c\xb4\xf6\x7e\x5e\xd9\xb1\xad\xa7\x7b\x90\x40\xfe\x22\xbe\x3f\x6e\x74\x27\xc5\x9a\xe5\xf9\x7b\xcd\x3c\x83\xb7\xb1\xec\x30\x4d\xde\xc0\x10\xf6\x4e\xda\x63\xc3\x69\xc8\xf5\xcc\xeb\x29\xa2\x3f\x54\x3d\xd3\xa7\xc3\x8b\x65\x9d\xfd\xb1\xf6\x18\xf8\xa9\x4d\xcd\xf2\xec\x7b\xf5\xc7\x76\x79\x5e\x69\x17\x30\xed\xae\xd3\x96\xc6\xdd\x3e\xf5\xdc\xd9\x46\xed\x72\x71\x36\xd6\xa4\xe0\xcd\x94\xcf\x1a\xf1\xfd\xf9\x78\xff\xd8\x95\x0b\x6b\xbc\x6b\x3c\x4b\x35\x50\x2c\xdd\x89\x4d\x8d\xc6\xfc\x5b\x21\x71\x7a\x32\xa6\x07\xfe\xb8\xfe\x91\xa9\xf4\xd6\xa4\x12\xe3\x1c\xf0\x2d\x5f\x9d\x47\xf4\xf9\xc1\x93\xc9\x37\x53\x40\xae\xfe\x09\x00\x00\xff\xff\x52\xd0\x85\xc5\xb6\x06\x00\x00")

func masterEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeConfigYaml,
		"master/etc/origin/node/node-config.yaml",
	)
}

func masterEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeKubeconfig,
		"master/etc/origin/node/node.kubeconfig",
	)
}

func masterEtcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x48\x0c\xbd\xfb\x57\x10\xb9\x64\xf7\x20\x7b\x83\xcd\xee\x41\x40\x0e\x41\x02\xb4\x01\xd2\x54\x40\x82\xde\x69\x89\x91\x08\x8f\x86\xd3\x19\x4a\xa9\x9a\xe6\xbf\x17\x23\x8d\xdc\x24\xb6\xd3\x16\xe8\xc9\xe6\xd7\x7b\xcf\x6f\x68\xa2\xe3\x4f\xe4\x03\x8b\xcd\xa1\x3f\x59\x6c\xd8\x56\x39\x14\x52\x2d\x5a\x52\xac\x50\x31\x5f\x00\xa0\xb5\xa2\xa8\x2c\x36\xc4\x10\x20\x94\x0d\x55\x9d\x21\xbf\x44\xe3\x1a\x5c\x6e\xba\x35\x79\x4b\x4a\x61\xc9\xb2\x2a\x3d\x2b\x97\x68\x32\x27\x55\x0e\xc7\xc7\x0b\x00\x83\x6b\x32\x69\x58\x1c\xd9\xd0\xf0\xbd\x8e\xbd\xd2\x3a\xb1\x64\x35\x07\x74\xbc\xaf\x6e\xd5\x8b\xc9\x9c\x41\x4b\x39\x1c\xab\xef\x28\x02\x5a\x6c\x29\x87\x16\x83\x92\xcf\xa6\xc9\x98\x0a\x0e\x4b\xca\x21\xea\xc9\xc2\x10\x94\xda\x45\x70\x54\x46\xe2\x88\x84\x6c\xc9\x8f\x32\x32\x40\x5f\x27\x41\x19\x04\x45\xaf\xe9\xfb\x84\x99\x82\x59\x53\x06\x59\x56\x8a\xbd\xe7\xfa\x6c\x45\x5a\xae\xc4\x73\xcd\x76\x35\xf5\xa6\x8f\xd4\xb0\x1c\xb0\x35\x69\xe8\xf1\x11\x9c\x67\xab\x70\x94\x65\x46\x6a\x43\x3d\x99\xb3\x23\xf8\xeb\x92\x3c\xdd\xc3\xf2\x62\x1a\xb8\x98\x3d\xb8\x96\xfa\x3a\xb6\x2c\xcf\x8b\xab\x5b\xf2\x3d\xf9\xbf\xe1\x1b\x7c\xee\x44\x09\x9e\x9e\x46\xcc\x52\xda\x16\x6d\x35\x0b\xdf\x7a\x35\xc6\xdc\x62\x4d\x79\x64\x9d\xa1\xaf\x62\x26\xc4\x28\xba\x58\x44\x13\x5f\x23\x8e\x43\x45\x67\x4c\x21\x86\xcb\x21\x87\x73\xf3\x80\x43\x18\x6b\x86\x7b\xb2\x14\x42\xe1\x65\x4d\x13\x27\x40\xa3\xea\xde\x91\xce\x21\x80\x43\x6d\x72\x68\x08\x8d\x36\x5f\x7f\x64\xc5\x6b\x0e\xff\x9f\x9e\xfe\xbb\x4d\xc5\xb5\x89\xcf\xf6\xfe\xee\xae\xb8\x4d\x59\xb6\xac\x8c\xe6\x92\x0c\x0e\xb7\x54\x8a\xad\x42\x0e\xa7\xff\xa5\xaa\x72\x4b\xd2\xe9\xb6\x70\xf2\xcf\x58\x98\x5e\x7f\x7e\x1c\x4f\x58\xf1\x6f\xca\x5c\xc5\xa1\xe1\x8f\x88\x4d\x9a\x0e\x8a\x0d\x54\x76\x9e\x75\x88\x8f\x40\x5f\xb6\x82\x9c\xe7\x9e\x0d\xd5\x54\xe5\x10\xb7\x7a\x4c\xf7\x62\xba\x96\x3e\x48\x67\x75\xbb\x9c\x6d\x8c\x8a\x51\xfc\xee\xee\x25\xb0\x17\x7f\x87\x69\x0f\x53\x25\xfe\xce\x8f\xd6\x0c\xcf\x48\x0e\x42\x96\x46\xba\xca\x79\xe9\xb9\x3a\x80\x1c\x1b\xb2\x57\x1d\x3f\x65\xe8\xd1\xaf\x0c\xaf\x67\x96\x7d\xc0\xf1\xd2\x1c\xd0\xe6\x36\xbc\x6f\x62\x4a\x37\x12\xf4\x86\xf4\x41\xfc\x66\x4b\xef\x3c\xcb\xe8\xb7\xc1\x10\x6e\xc6\x99\xe9\x14\x64\x56\x2a\xca\xe6\xeb\xb4\x98\xdd\x4e\xf7\x20\x42\x8d\xb4\x8b\xe7\xeb\x72\xc0\xf1\xfd\x7e\xff\x0a\xc8\xae\xc7\x6f\x3b\x7c\x10\xf3\xa5\xab\xbb\x48\xc9\xd2\x37\x35\xcd\xde\xee\x38\xfb\x3d\x00\x00\xff\xff\xd3\x3e\x74\x0e\x17\x06\x00\x00")

func masterEtcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsApiserverYaml,
		"master/etc/origin/node/pods/apiserver.yaml",
	)
}

func masterEtcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6f\xdb\x3a\x0c\xbe\xe7\x57\x10\x39\xbd\x77\x70\xfc\x1e\xd0\xc3\x60\xa0\x87\xae\x19\xd6\x61\x4d\x67\xa0\x5d\xb1\x5b\xa1\xc8\xac\x43\x44\x96\x3c\x92\x76\x9b\x75\xfd\xef\x83\x6c\x27\x5d\x52\xa7\xd8\x92\x83\x25\x91\xfc\xf8\x91\x1f\x25\x53\xd3\x2d\xb2\x50\xf0\x19\xb4\xff\x4f\xd6\xe4\x8b\x0c\xf2\x50\x4c\x2a\x54\x53\x18\x35\xd9\x04\xc0\x9b\x0a\x33\xb0\xc1\x2b\x07\xe7\x90\x65\x38\x93\xda\x58\xcc\x60\xdd\x2c\x31\x91\x8d\x28\x56\x13\x00\x67\x96\xe8\x24\x86\x01\x84\x1a\xbd\xac\xe8\x5e\x67\x14\x52\x1b\xaa\x3a\x78\xf4\x7a\x08\xf5\xca\xaf\x33\x26\xb5\x33\x1e\x33\x98\x2a\x37\x38\x9d\x48\x8d\x36\x82\x46\xab\x21\x8f\xdc\xa5\x48\xc0\x70\x39\x24\x4b\x40\xd4\xb0\x0e\xeb\xca\x88\x22\x0f\x9b\xc3\x7c\x09\x24\x89\x0d\xfe\x9e\xca\xd3\x14\xd5\xa6\x81\xa9\x24\x9f\xf6\x31\xc3\x67\x70\x98\x6d\x4c\xe5\x76\x41\x8e\x44\xd1\x9f\xae\x54\x6b\xc9\xd2\xf4\xbf\x59\xf7\xcf\xde\x9d\x9c\x9c\x0c\x3e\x4f\x4f\x50\x33\x79\x85\x69\x92\xb8\x50\x3a\x6c\xd1\x9d\x4e\xe1\x9f\x39\x32\xde\xc3\xec\xbc\x07\x3d\xdf\xf6\xe2\x32\x94\x97\xd1\x25\x1a\x06\x8a\x0b\xe3\x4d\x89\xfc\x2f\xfc\x84\xef\x4d\x50\x84\xe7\xe7\x0e\xdb\x86\xaa\x32\xbe\xd8\x16\xbb\xeb\x59\xb7\x47\xdf\x6e\x0d\xbd\x5a\x9f\xbf\xbe\xff\x70\xb7\x38\xfb\x76\x97\xcf\xef\x6e\xbf\x5c\x5e\x77\x46\x80\xd6\xb8\x06\xb3\xc8\x72\x36\x47\xa6\x16\x8b\xd9\xc2\x3c\xce\x8d\x9a\x39\xc9\x5a\x72\xe4\xdb\x45\xc7\xb2\x6f\xf2\x35\x72\x4b\x16\x0f\xa9\x50\x65\xca\x01\x65\x28\xe8\x53\x3c\x91\x6d\x15\x79\x94\x6e\x34\x28\x6f\x9c\xcb\x83\x23\xbb\xc9\xe0\xcc\x3d\x98\x4d\x2f\x88\xa3\x16\x3d\x8a\xe4\x1c\x96\x98\x0d\x5c\x63\x97\x3f\xa2\x6e\xb7\x00\xb5\xd1\x55\x06\x2b\x34\x4e\x57\x3f\x5e\x4e\x03\x6b\x06\x3b\x09\xe2\x4f\xec\x0a\x63\x13\x2e\x6e\x6e\xf2\xbe\xf2\xb1\x11\x06\x10\xb4\x0d\x93\x6e\x22\x6d\x7c\xdc\x65\xaa\x99\x5a\x72\x58\x62\x91\x41\x9c\xbe\xee\xb8\x0d\xae\xa9\x70\x11\x1a\xaf\xbb\x81\xab\xe2\x2e\xef\x58\x8d\xcc\xd1\x80\xd6\xa7\xde\x1b\xaa\xb7\xc3\xad\x0b\x4d\x51\x73\x68\xa9\x38\x86\x12\x3d\x92\xad\xcb\x11\xb4\x97\x9b\x92\x32\x96\x24\xca\x84\x32\x2b\xf6\x01\x85\x4a\x6f\xb4\x61\x4c\xa8\x8a\x8d\x1c\xc1\x6a\x84\x53\x47\x4b\x7c\x44\x9b\xc6\xab\xce\x1e\x15\xa5\x5b\x3a\xd4\xa4\x76\x4d\x49\x5e\x06\xd4\x3e\x90\x43\x6d\x4a\xa3\xdd\xab\x72\x11\x44\x6f\xc2\x6e\xa2\xf6\xb2\xbf\xc6\x58\x05\xd1\x2b\xd4\x87\xc0\xeb\x5d\xef\x6b\xa6\xd0\xa9\xe4\x8c\xc8\x55\x4f\xbb\x7b\x6d\x12\x1f\x0a\x4c\x2c\x93\x92\x35\xf1\x92\xf6\x1a\x0d\x2f\x43\x84\xea\x4a\x98\xfc\x3e\x3d\xc7\x74\x1a\x57\xe9\x4f\x50\xf6\xe4\x1a\xc1\x3a\xd4\xea\x4d\xcc\x23\xa2\x4d\xde\x54\xec\x28\xe2\x5f\x48\x37\x2e\xc8\xaf\x00\x00\x00\xff\xff\xe0\x81\x84\xe8\x1f\x06\x00\x00")

func masterEtcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsControllersYaml,
		"master/etc/origin/node/pods/controllers.yaml",
	)
}

func masterEtcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6f\xe2\x3a\x10\x7d\xe7\x57\x58\xbc\xf4\xc9\x41\xb4\xf7\xf6\xde\xfa\xad\x82\x4a\x5b\x69\xcb\x22\x6d\xb5\xaf\xab\xc1\x9e\x12\x0b\x67\x9c\xb5\x27\x69\x51\xcb\x7f\x5f\xd9\x49\x20\xfd\xe0\x01\xb0\xcf\x7c\xf8\xcc\x99\x19\xa0\xb6\xbf\x30\x44\xeb\x49\x89\x76\x3e\xd9\x59\x32\x4a\xac\xbd\x99\x54\xc8\x60\x80\x41\x4d\x84\x00\x22\xcf\xc0\xd6\x53\x4c\x57\x21\xa2\x2e\xd1\x34\x0e\x43\x01\xae\x2e\xa1\xd8\x35\x1b\x0c\x84\x8c\xb1\xb0\x7e\xa6\x83\x65\xab\xc1\xc9\xda\x1b\x25\x2e\x2e\x26\x42\x38\xd8\xa0\xeb\x83\x7d\x8d\x14\x4b\xfb\xc4\xd9\xd7\x57\xb5\x27\x24\x56\x02\x59\x9b\xaf\x1c\x88\x83\x77\xb2\x76\x40\xa8\xc4\x05\x87\x06\x53\x46\x82\x0a\x95\xa8\x20\x32\x06\xd9\x87\x26\x2c\xd6\xa0\x51\x89\xc4\x48\xc6\x7d\x64\xac\x26\xb1\x46\x9d\x9e\x4e\xa9\xc0\x12\x86\x4c\x44\x0a\x08\xdb\x9e\x92\x14\x6f\xf9\x57\x88\x88\x2c\x24\xf4\x97\x42\xcc\x90\x75\xfa\x98\xfc\x55\x68\x4f\x4f\xbd\x0d\x5f\x50\x9f\x28\x6b\x5f\x55\x40\x66\xc8\x36\xdb\x58\x9a\xc5\xb2\xbf\x49\x9d\x0f\x48\xed\x60\xef\xc8\xdf\x3d\x2e\x96\x8b\xc7\xef\xbf\x6f\xd7\xf7\x7d\xd2\x16\x5c\x83\x4a\x4c\xaf\xa6\x19\xb0\x15\x6c\x51\x89\xd7\x57\x51\x2c\x3c\x3d\xd9\x6d\x71\x9f\x90\x58\x3c\xe4\xb2\xef\x58\x1b\xf1\x26\xfe\x34\x9e\x51\x1c\x0e\xa7\x90\x75\xe3\xdc\xda\x3b\xab\xf7\x4a\xdc\xba\x67\xd8\xc7\x6c\x73\xb6\x45\xc2\x18\xd7\xc1\x6f\x50\x8d\xea\x18\xce\x1f\xea\xe8\xb8\xa6\x1a\x35\xbb\x11\x22\xa5\x06\x8d\x81\x47\xd0\x49\x27\x0d\x85\x7e\x67\x92\xf2\xac\x6f\x8d\x18\x3e\x79\xef\x70\x7f\xde\xf9\xbd\x51\x4a\x24\x53\x7b\x4b\x1c\x47\x68\xc9\x5c\x47\x35\x9b\x25\xd9\xbe\xf9\xc8\x49\x6c\x71\x38\xa8\xcb\xab\xff\x6e\xc6\x75\xf5\xa1\xe3\x48\x04\xc7\x65\x0f\x58\xb2\x6c\xc1\x2d\xd1\xc1\xfe\x27\x6a\x4f\x26\x2a\xf1\xcf\xbf\xd9\xda\xf5\xef\xd8\xfd\x88\xba\x09\x96\xf7\x0b\x4f\x8c\x2f\x3c\xa8\x57\x07\xdb\x5a\x87\x5b\x34\x4a\xa4\xb1\xcd\x70\xeb\x5d\x53\xe1\x83\x6f\x88\x8f\xc3\x57\xa5\xdb\x1a\xb8\x54\xa7\x7a\xfb\x1c\xa7\x97\xa4\xce\x23\xd0\xe3\x01\xc1\xfc\x20\xb7\x1f\x65\x7e\x9f\xa7\x85\x30\x73\x76\x73\x26\x57\xda\xec\x8c\x3e\xfb\xb0\xb3\xb4\x5d\xda\xf0\x39\xa6\xf4\x91\x57\xc8\xc9\xe5\xf8\x8c\xa1\x38\x4c\xd6\x74\xe5\x09\xa7\x1d\xd6\x8d\xa7\x3a\x8a\x13\x31\xb4\xfd\x9e\x75\xd4\xe6\xd7\xff\x17\xd7\x57\xc5\xfc\xf2\xa6\x98\x5f\xf7\xa2\x41\xd0\x25\x8e\x7c\x52\xc3\x96\xbe\x02\x4b\xab\xae\x65\x93\xac\xa1\xcf\xd2\x3a\x88\x71\x95\x0b\xe8\xb6\x5a\x92\x37\x28\x87\xbf\x9a\xc9\x20\x6c\xbf\xda\x89\x7a\x16\x62\x68\xc5\x17\xe2\x7e\x25\xed\xd9\xc8\x4f\x72\x7e\x14\xf3\x6f\x00\x00\x00\xff\xff\x8d\x7b\x37\x76\x49\x05\x00\x00")

func masterEtcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsEtcdYaml,
		"master/etc/origin/node/pods/etcd.yaml",
	)
}

func masterEtcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x73\x13\x37\x10\x7e\xf7\x5f\xb1\x4d\x19\x02\xd3\xde\x9d\x9d\x92\xc9\x70\x99\xd0\x61\x68\xa7\xc3\x03\x3f\x86\xb4\xbc\x30\x0c\xc8\xba\xb5\x6f\x1b\x9d\x24\xb4\x2b\x1b\x37\xe4\x7f\xef\x48\xbe\x73\x6c\xe2\x50\x0a\x4f\xb6\x56\xbb\x9f\x76\xbf\xfd\x56\x3a\xe5\xe9\x35\x06\x26\x67\x6b\x58\x4c\x46\x17\x64\x9b\x1a\x5e\xba\x66\xd4\xa1\xa8\x46\x89\xaa\x47\x00\xca\x5a\x27\x4a\xc8\x59\x4e\x4b\x00\xd6\x2d\x36\xd1\x60\x28\x95\xf1\xad\x2a\x2f\xe2\x14\x83\x45\x41\x2e\xc9\x55\x3a\x90\x90\x56\xa6\xf0\xae\xa9\xe1\xf0\x70\x04\x60\xd4\x14\x4d\x1f\xac\xbc\xaf\xc1\x2d\x38\x2f\xb4\xeb\xbc\xb3\x68\xa5\x06\x8b\xb2\x74\xe1\x22\x9b\x9d\x47\xcb\x2d\xcd\x24\xe3\xed\xf7\x91\x95\xc7\x1a\xc8\xce\x82\x1a\x01\x58\xd5\xe1\x00\x9b\xfe\xb3\x57\x3a\x19\x06\xa0\x82\x1b\x3b\x62\x8f\x3a\x25\xa1\x9d\x15\x45\x16\x43\x4e\xa9\x48\x59\x74\xca\x36\xeb\xfc\x0a\xa8\xa6\x64\xab\xa9\xe2\xb6\x5f\x17\xba\xff\xf3\x29\xff\x02\xfc\xf8\xc3\xae\x0b\x00\xa3\x40\x81\xd1\x81\x27\x8f\x33\x45\x66\x34\xb8\x02\xcd\x40\x59\x27\x2d\x06\xf0\xc1\x69\x64\x06\x62\x30\xc4\x82\x96\xec\x1c\x9c\x05\x69\x11\xb4\xa5\x82\x31\x2c\x30\x00\x3b\x7d\x81\xf2\x33\x2c\x15\x09\x44\x2b\x64\x80\x04\xf0\x23\x09\xf7\xa8\x12\x94\x87\xc3\x0b\x32\x06\xee\xdc\xfb\xdb\x4d\x19\x0a\x7f\xff\x34\xbb\xc0\xf8\x10\xfe\xfc\xfd\xd5\xb3\xde\x33\xa0\x04\x42\x3e\x1b\xf7\xeb\x65\x4b\x06\x41\x42\xc4\x53\x68\x5c\x6f\x84\x94\x64\x15\x39\x54\xdc\xaa\x80\x55\x62\x6d\xc1\x4b\x12\xdd\x56\xac\x03\x79\xe1\xca\x2d\xb8\xd0\x62\x80\x45\x49\x64\xb8\xfb\xa8\x6a\x70\x51\xd9\x68\xcc\x69\xca\xdf\x6e\xa0\x00\x50\xb7\x0e\x0e\x96\x2a\xa4\xfa\x6a\x78\x7c\xb3\x7a\x1d\x43\x40\x2b\x66\x05\x9d\xb2\x6a\x9e\x68\x78\xf1\xfa\x7c\x5d\x71\x5a\x4c\x8e\x19\xca\xb2\x3c\x80\xa3\x47\x77\x27\x5b\xc8\x6c\x10\x3d\x4c\x8e\xe1\x6e\x76\xdd\xda\xb9\x77\x6f\x28\x15\x7e\x3a\x83\x09\xdc\xbf\xbf\xd9\x44\xc3\xb8\xe5\x39\x0d\xa8\x2e\x36\xeb\x19\x6d\x73\xf0\xe6\x0d\x1c\xdc\xb9\xec\x81\xae\x0e\xa0\x98\x0b\x3c\x18\xc3\xdb\xb7\xb7\xd4\x88\x21\xb8\xf0\xbf\x2a\x4c\x2d\x22\x3b\xbf\x51\x59\x6e\xdd\xe4\x66\x5a\x8d\xb3\x78\xad\x25\xa3\xa2\xd5\x6d\x42\xea\x4d\xb3\x68\x75\x1a\x4c\xf8\x10\x49\xe0\x72\x0b\xf0\xab\xdb\xe9\xfc\xe7\x69\x0c\x5a\xb9\xda\x56\x5b\x3e\xe0\xfc\xe9\x1f\x5b\xda\xfa\x7a\xc5\x04\x81\xa2\xb0\xae\x48\xa6\xde\xad\x81\xa2\xe0\x15\x0b\x76\x05\x35\x67\x41\xd9\xc6\x75\xd7\x85\xbe\x42\x96\x40\x5a\xf2\x68\xd8\xd8\x4d\x31\x80\x9b\x81\x97\x36\xa0\x6a\x18\x76\x80\x74\x40\x25\xc8\x20\x0e\x02\x36\x51\x63\x8a\xda\x40\xa9\xce\x45\x2b\x29\xfa\xd5\xf9\x79\x1a\xa4\xc8\xc8\x69\xea\x5a\xc7\xc2\xb0\x24\x69\x53\x8f\x56\xa0\x5d\x40\xde\x84\xb5\x22\x9e\xeb\xaa\x9a\xc6\xf9\x3f\x64\x8c\x2a\x03\x36\xad\x92\x52\xbb\xae\xe2\xd6\x2d\xdf\x4d\xe3\xbc\xd4\x73\xfa\x95\x9a\xb3\xc9\xf1\xc9\xe4\x97\x93\x87\xdf\x1a\x7b\x74\xf2\xf0\x64\xb4\xad\xc1\xf7\x36\x29\xe9\x7d\x96\xdf\xe4\x68\x9f\xfc\xd6\xf5\x27\x76\x33\xaf\xf9\xa6\x48\x77\xd0\x0b\x8f\xf6\xdd\xe2\x3c\x13\x03\x25\x64\x59\xbe\xd3\xce\xce\x68\x5e\xdb\x22\xe0\x42\x19\x6a\x94\xb8\x50\xf4\x4c\x9e\x3d\xf8\x6e\xd4\x56\xd9\xc6\xe0\x35\xe2\x64\xd0\xcf\x46\xc4\xdf\x24\x94\x66\x3a\xdc\x87\x7b\x84\xb2\xc6\xdd\xbd\xcc\xfa\xdb\xe1\xf8\x74\x3d\x34\x99\xce\x4e\xcd\xb1\x86\xcb\x4b\x28\x9f\xe4\x74\xcb\xa7\xc9\xc2\xe5\x73\xd7\x20\x7c\x82\x0f\xd1\x09\xc2\xd5\x5a\xe8\xfd\x13\x72\x9d\x60\xb6\x06\x64\x17\x83\xc6\xfe\xf5\x02\x30\xd4\x91\x6c\x56\x00\xda\xc7\x1a\x8e\xc6\xe3\x6e\x63\xe9\xb0\x73\x61\x55\xc3\x83\xf1\xf8\x19\x6d\xee\xe1\x0f\x11\xf9\x46\xdc\x64\x4f\xd8\x64\x13\xc6\xa8\x63\x20\x59\x3d\x71\x56\xf0\xa3\x0c\xb1\x3e\xd0\x82\x0c\xce\xb1\xa9\x73\xf1\xc3\x11\xd1\x3e\xe6\xbf\x18\x43\xdd\x4f\xf0\xc2\x99\xd8\xe1\xb3\x24\x7f\x1e\xde\xb6\x3c\x0c\x2f\x95\xb4\x35\x54\x86\xa6\x55\xe7\xd2\x43\x3e\xc8\x7e\x4d\x41\x1a\x8c\x62\x77\x23\x75\xf6\x85\x35\xab\xad\x03\x77\xb1\x42\xb4\xd5\xe7\xd4\xed\xe0\x85\x68\x8b\xe1\xd5\xdf\x0d\x5d\xa8\xf0\x3d\xe1\xbc\xda\x93\xfd\xb5\xf1\x3f\x33\x47\xd1\x5f\x3e\x7a\x2d\xf4\x62\xd7\x27\xed\x3c\x5f\x7f\x8d\x6c\x90\x93\xed\xe5\xd3\xdf\x36\x6b\x1f\xc8\xe5\xf6\x19\xc5\xfc\x3c\x03\xf6\x42\xb6\xae\xc1\x62\xf8\x4e\x1a\x0d\x9d\xea\xbf\x46\x32\x4c\xca\x6d\x68\xf7\xfe\x6e\xed\xed\xd5\xad\xd1\xfb\x08\xde\x4b\xef\xad\x08\x03\xa5\x37\x58\xbe\x35\x22\x33\x1b\x68\x4e\x5f\x3c\x7a\x0f\xbd\xff\x06\x00\x00\xff\xff\x44\x82\x43\x11\x96\x0a\x00\x00")

func masterEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsOvsYaml,
		"master/etc/origin/node/pods/ovs.yaml",
	)
}

func masterEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcd\x8a\xa6\xdd\x46\x29\x2e\xd6\x61\x50\x91\x02\x5d\x92\x75\x01\x1a\x27\x68\xd3\x62\x40\x50\x14\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x7a\x69\xfe\xfb\x40\xea\xc5\x76\x14\x39\x49\xf7\x69\x5f\x5a\x93\x77\xf7\xdc\xeb\x73\x54\x78\x21\x3f\xa2\x75\xd2\xe8\x04\xaa\xf1\x68\x21\x75\x9a\xc0\x99\x49\x47\x39\x12\x4f\x39\xf1\x64\x04\xc0\xb5\x36\xc4\x49\x1a\xed\xfc\x11\xc0\x89\x0c\xd3\x52\xa1\x8d\xb8\x2a\x32\x1e\x2d\xca\x29\x5a\x8d\x84\x2e\x92\x26\x16\x56\x92\x14\x5c\xb1\xc2\xa4\x09\xec\xec\x8c\x00\x14\x9f\xa2\x6a\x8c\x79\x51\x24\xe0\x52\x1d\x0e\xc2\xe4\x85\xd1\xa8\x29\x01\x8d\x74\x69\xec\x22\x5c\x9b\x02\xb5\xcb\xe4\x8c\x02\xde\xed\x3a\xb4\x2c\x30\x01\xa9\x67\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xbf\x5d\xc1\x05\x26\x2b\x20\xe6\x45\xae\x40\xe1\x83\x10\x46\x13\x97\x1a\x6d\x08\x89\xf9\x28\x72\xae\xd3\x3a\x3e\x06\xf1\x54\xea\x78\xca\x5d\xd6\x9c\x99\x68\x7e\x7c\x0b\xff\x03\xfc\xf0\x68\x53\x05\xc0\x21\x01\xc3\xd2\x40\x21\x0b\x9c\x71\xa9\x46\xad\x2a\xc8\x19\x70\x6d\x28\x43\x0b\x85\x35\x02\x9d\x03\xe9\x40\x49\x47\xa8\xa5\x9e\x83\xd1\x40\x19\x82\xd0\x92\x39\xb4\x15\x5a\x70\x46\x2c\x90\x7e\x86\x4b\x2e\x09\x4a\x4d\x52\x81\x24\xc0\xaf\x92\x5c\x83\x4a\x96\x17\xb0\xbb\x90\x4a\xc1\xe3\xa7\x7f\x9b\xa9\x03\x56\x3c\x7b\x19\x54\x60\x6f\x17\xce\x8f\xde\x9d\x34\x9a\x16\xc9\x4a\x74\xfb\x7b\xcd\xf9\x32\x93\x0a\x81\x6c\x89\x2f\x21\x35\xcd\x25\xf8\x20\x51\x64\x06\x76\x09\x1d\xed\xc2\x37\x1f\x03\x27\x60\xf0\x61\x72\xfc\x17\x3b\x38\x9d\x4c\x8e\x0e\xce\x93\xb8\xe2\x36\xb6\xa5\x8e\x37\xca\x1a\xaf\x42\x8f\x7c\xe8\xf0\x2a\x4e\xb1\x8a\x75\xa9\xd4\x4b\x9f\x9a\xee\xbc\x40\xed\x64\xe7\x92\x5b\x9f\x7a\x02\xaf\xfb\x85\x11\xa5\xb5\xa8\x49\x2d\xfb\x25\x3a\x98\x1c\x6f\xd4\xc6\x8b\xc6\x2f\x1c\x44\x51\xb4\x03\xcf\x5f\x3d\x19\xaf\x39\x72\x0a\xb1\x80\xf1\x0b\x78\x12\x54\xd7\x24\x4f\x9f\xb6\x45\x81\x9f\xf6\x61\x0c\xcf\x9e\x75\x42\x54\x0e\xd7\x34\xa7\x16\xf9\xa2\x3b\xcf\xe4\x7a\xb5\x2e\x2e\x60\xe7\xf1\x55\x03\x74\xbd\x03\x6c\x4e\xf0\xcb\x1e\x7c\xfa\x34\x90\x32\x5a\x6b\xec\x7f\x49\xd8\xf7\x56\xea\x79\x2f\xd1\xd0\xf3\x71\x3f\xca\xd4\x68\x5c\x9f\x41\x8f\xa7\x4d\x8a\x7e\xf8\x67\x72\x0e\xa9\x41\xa7\x77\xc3\x58\x39\x82\x65\x7f\xde\xbc\xc2\x83\x87\xe8\xe2\x02\x1e\x01\x9b\x41\x8c\x24\x62\x63\xe5\x5c\xea\xd8\x7b\x0d\xff\xb0\xda\x75\xb4\xe4\xb9\x1a\xae\x54\x37\x1c\x07\x61\xef\xc0\x4c\xea\xb4\x8e\xd2\x57\xe6\x26\xce\xff\x76\x12\x26\x66\x5b\x52\xdf\xd5\xed\xae\xdd\xe7\x7c\x81\x60\xfc\x2a\x69\x16\x26\xcc\x4a\x2d\xc2\x02\x6f\x47\xcb\xbb\x6c\xbb\x9b\x03\x7b\xd7\xb4\x4c\x68\x19\x6b\xa4\x28\x8d\x7f\xdb\x63\x2b\x96\x37\x30\x91\x8f\xb1\xb1\x12\x45\x6d\x65\x0a\x0a\x56\x7e\x21\xfe\x08\x71\x66\x1c\x6d\xdc\xb5\x51\xd5\x95\x6a\x47\xc3\x2d\x5d\x9d\x6f\x33\x24\x2c\x8c\x66\xaf\x66\x61\xad\x1a\xe0\x4a\xe1\xd7\xc2\xd8\x55\xf3\x9c\x29\xad\xc0\x2d\x58\xa3\xae\x40\xa3\xb6\x72\x28\x56\xcf\x01\x38\xe2\x96\xba\xf2\xb0\xa6\xfa\xfb\x77\xcf\x2d\x63\xfe\xb5\x1b\x52\x77\xa9\x8e\x56\x72\x60\x4c\x99\xb9\xc2\x0a\xd5\xfe\xe3\xab\xc3\xa3\xdf\x3f\xbc\xf9\xfc\xf6\xf4\xcd\xdb\xa3\x8f\x47\x6f\x13\xf6\xfc\x3a\x84\x86\xba\x6a\x1f\x9e\xfa\x11\x3b\x3d\x3b\x9a\xbc\xff\xf3\xf8\x8f\xf3\xcf\x87\x93\xf7\x9f\x0f\x4f\x4f\x5e\x1f\x4f\x9a\x24\x2a\xae\x4a\x4c\x40\xa8\xd2\x11\xda\x48\x19\xc1\x55\x10\xc9\x9c\xcf\x31\x81\xab\x2b\x88\x0e\xea\x60\x8f\xfd\x8d\x8b\x26\xbe\xae\xdf\xe0\x4b\x69\x08\xe1\xba\xf6\xb8\xfe\x56\x02\xf8\xba\xba\x36\x82\xee\x65\x3c\x33\x96\x12\x18\xef\x3d\x7f\xf1\x6b\xe3\xdb\x77\xb6\x7f\x5b\x63\x65\xc8\x15\x65\xff\x8c\xea\x65\x51\x37\xa7\xc1\xf4\x17\x5f\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x2e\x72\xcc\x8d\x5d\xfa\xbb\xbd\x93\x7a\xa4\x1d\x8a\xd2\x4a\x5a\x1e\x18\x4d\xf8\x95\x5a\xdb\xc2\xca\x4a\x2a\x9c\x63\x9a\x84\xfd\xd3\xba\x28\xf5\x6b\xf7\xc1\xa1\x4d\xa0\xde\x51\x95\x51\x65\x8e\x27\xa6\xd4\xab\xdc\x72\x7f\x3a\xe3\x94\x25\xfd\xf5\xb4\x99\x8d\x71\xd4\xf4\xbc\x4b\x81\xa7\xa7\x5a\x2d\xd7\x9c\xf6\xf1\xb6\xcd\xe1\x1a\x70\xa7\xb6\x2e\xbf\xd3\x41\xf3\xf2\xf6\xe1\x2a\x6e\x59\x2b\xb8\xd5\x24\x4e\xa7\xa5\xbb\x25\xc1\xc6\x90\x79\xf1\x03\xa3\x08\xef\x7f\xe5\x2e\x25\x89\x6c\x0b\xb2\xa9\x1e\x0c\xbc\xfa\x92\xdc\x82\xbb\x52\xfa\x9e\xb8\x57\x9f\x83\xc3\x81\xf7\xd4\x36\xe1\x6e\x2e\xb9\x3e\x92\x29\x88\xf9\xcf\xa2\x56\xd8\x9f\x96\x6e\xd3\xf6\x8d\x91\x44\x30\xd6\x48\xe9\x40\x32\x4a\x4e\x5b\x04\xbf\xc0\xdc\x7d\x32\x53\x72\xda\xc2\x06\x9b\x5e\x9a\x5e\x73\x52\x0b\xbb\x4a\x06\xd6\x1f\x1f\x76\xe7\xc2\x4a\x13\x78\xa9\xb8\x73\x93\x7a\x91\x2c\x1d\x61\xce\xea\x4d\xd9\x7c\xfb\x8f\x5a\x0a\x36\x5f\xd8\x01\xc6\x87\xdf\xf2\xf8\x56\x1a\x8e\x86\x38\xb8\x15\x60\x98\x77\xdb\x58\x37\x08\xe9\x4b\x9b\x1b\xff\xe7\x8d\xbb\x09\xb2\xba\x1e\xb4\x5e\xe7\xe9\xad\x2c\xbd\xcb\x32\xee\xf8\x38\xcc\xd5\x3b\x31\xd6\xf8\x39\x04\x55\x93\xf3\x4e\xa4\x1b\x5c\xbb\x8b\x8d\xf7\x8a\x6c\x73\x4e\xef\xc1\xbf\x41\xd4\x9b\x1c\x1c\x64\xe0\xd6\x01\xda\xa4\xe2\x30\x11\xb7\x26\x77\x0f\x46\x3e\x8c\x8f\xff\x06\x00\x00\xff\xff\x1a\xb6\xf4\xf5\x9b\x0f\x00\x00")

func masterEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsSdnYaml,
		"master/etc/origin/node/pods/sdn.yaml",
	)
}

func masterEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func masterEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeResolvConf,
		"master/etc/origin/node/resolv.conf",
	)
}

func masterEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := masterEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func masterEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeSdnKubeconfig,
		"master/etc/origin/node/sdn.kubeconfig",
	)
}

func masterEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\xa9\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x5f\xc7\x2a\x7e\x47\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\xae\x77\xed\x6c\x2d\x59\x05\x45\xa3\x3a\xe3\x94\x81\x16\x8c\xdc\xb6\xac\xc2\x88\x53\xc6\x4b\x0a\x93\x9f\x79\x49\xef\x85\x02\x86\x64\x68\x36\xb8\xe2\x8b\x5b\x1a\x31\xdb\x77\xa6\x2f\x47\x05\x5d\x0b\xb7\x5a\x3b\x2b\xd7\x03\xcf\x73\x76\x6e\x0a\x28\x9d\x3d\x69\x25\x05\xa6\x41\x50\xf4\xb3\x0f\x22\xd0\x88\xa2\x27\x4a\x9f\x14\x1f\x0b\x7f\x7e\x7b\x1c\xfe\x3c\xfb\x05\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func masterEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcSysconfigAtomicOpenshiftNode,
		"master/etc/sysconfig/atomic-openshift-node",
	)
}

func masterEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := masterEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRootKubeConfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterRootKubeConfigBytes() ([]byte, error) {
	return bindataRead(
		_masterRootKubeConfig,
		"master/root/.kube/config",
	)
}

func masterRootKubeConfig() (*asset, error) {
	bytes, err := masterRootKubeConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/root/.kube/config", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func masterVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterVarLibOriginDockerConfigJson,
		"master/var/lib/origin/.docker/config.json",
	)
}

func masterVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := masterVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\x0b\xcf\x2f\xca\x4e\x2d\x72\xce\xc9\x2f\x4d\x09\x28\xca\x2f\xcb\x4c\x49\x2d\x72\xce\xcf\x4b\x53\xd0\x73\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x0a\x4e\x2d\x2a\xcb\x4c\x4e\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x73\xa7\x88\x79\x42\x00\x00\x00")

func workerEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginCloudproviderAzureConf,
		"worker/etc/origin/cloudprovider/azure.conf",
	)
}

func workerEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := workerEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeBootstrapKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xf0\x2e\x4d\x4a\x4d\x06\x8b\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xc9\x1b\x98\x7a\x3b\x00\x00\x00")

func workerEtcOriginNodeBootstrapKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeBootstrapKubeconfig,
		"worker/etc/origin/node/bootstrap.kubeconfig",
	)
}

func workerEtcOriginNodeBootstrapKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeBootstrapKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/bootstrap.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeCaCrt,
		"worker/etc/origin/node/ca.crt",
	)
}

func workerEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\xe5\xa7\xa4\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\x80\xa5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xb5\x29\x12\x85\x43\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperCrt,
		"worker/etc/origin/node/node-bootstrapper.crt",
	)
}

func workerEtcOriginNodeNodeBootstrapperCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xd0\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xe3\x74\x32\xfb\x48\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperKeyBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperKey,
		"worker/etc/origin/node/node-bootstrapper.key",
	)
}

func workerEtcOriginNodeNodeBootstrapperKey() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\x1b\x37\x10\xbd\xef\xaf\x18\xe8\x9c\xdd\x95\x1c\x1b\x2d\x08\xf4\xe0\xda\x48\x6b\xb4\x70\x5d\xc9\xed\x9d\x22\x47\x12\x6b\x2e\x87\x1e\x0e\xb7\x91\xdd\xfc\xf7\x82\xbb\x6b\x4b\x4a\xe3\xa0\x39\x49\xd4\x7b\xf3\xf5\x86\x7c\xd2\xd1\xfd\x89\x9c\x1c\x05\x05\xfd\xa2\xd2\x59\x76\x57\x14\x36\x6e\xab\x2a\x80\x72\xc2\x20\xce\x68\x71\x14\xae\xb4\xd9\xe1\xca\x3d\xa1\x82\xc5\x7c\x3e\xff\x32\x7e\x7f\xff\xab\x82\x8b\x6e\x02\x89\xdd\xd3\x57\x62\x4f\xe1\x97\x50\x1b\xd2\x8f\x2e\xd8\x4b\x6b\x19\x53\x52\xb0\x38\xfb\xae\x99\x37\xf3\x66\xa1\x2e\xde\x17\xf0\x9a\x3a\xed\x82\x02\xe3\x73\x12\xe4\xc6\x93\xd1\xbe\x00\x37\x77\x0a\xe6\x03\x75\x5e\x8e\x4b\x34\x99\x93\xeb\x71\x89\x89\x7c\x5f\xc6\x52\xd0\xa2\x98\x96\xd8\x6d\x5d\x68\x03\x59\x6c\x79\x00\x1b\x43\x61\x53\x59\x32\x0f\xc8\x87\xf9\xc7\xf3\x6a\xe7\xba\x25\x91\x5c\x3b\x46\x23\xc4\x7b\x05\x6d\xaf\xb9\xf5\x6e\xdd\x8e\x8c\xb4\x73\xdd\x09\x7d\x55\xbe\xc9\xc4\xe3\x1c\x8e\x78\x4d\x22\xf3\x50\x01\xe0\x47\x34\x3f\xeb\x60\x3d\xf2\xad\xee\x50\x41\xd0\xe2\x7a\xac\x30\xe8\xb5\xc7\x3f\x82\xb3\xde\x85\xad\x02\xe1\x8c\x95\xeb\xf4\x16\x0f\x7d\x6d\x88\x3b\x2d\x0a\x9e\x9f\xa1\x19\x7f\x6d\x6e\x0a\x23\x35\x1f\x06\x04\xfe\x81\xc7\x4c\x82\xf0\xe9\x53\x05\xe0\xb5\x60\x12\x05\x1b\xed\x13\x56\x2e\x4a\x29\x90\x56\xfb\x60\xee\x90\x1d\x59\x05\xef\xe7\xa9\x7a\x70\xc1\x2a\xb8\x25\x3b\xd5\xa9\x1e\xf2\x1a\x3d\xca\x25\x6f\x73\x87\x41\x52\x29\xbc\x26\x92\x24\xac\x63\x5d\x50\xf3\xda\x50\xfd\x5f\x5d\x5f\xa9\xcd\x81\x5a\x01\x18\x64\xa9\xad\xe3\x37\xa2\x0a\xec\x36\xe5\x42\x61\x2a\x6c\x4f\xd9\xd6\x6f\xd5\x19\xd0\xc8\xd4\x3b\x8b\xdc\xea\xa7\xcc\x38\xee\xf1\x25\xf0\x05\x1b\x43\x07\x42\x51\x7e\x50\xb8\x64\x15\x26\xef\x91\x6b\x2d\xa2\xcd\xae\xb6\x58\x3e\x46\xf2\xac\xe8\x3e\x2b\x5a\xa3\x96\xcc\x58\x6f\x4b\x4b\x23\xb6\x24\xd1\x82\xbf\x8c\xfa\x5c\x79\x87\x41\xae\x0e\x7d\xff\x50\x22\xdf\x9d\x70\x56\xc8\x3d\xf2\xe7\x9c\x0a\xa0\xcc\x5c\x7b\xbd\x46\x3f\xa5\x7e\x7e\x86\xc8\x2e\x08\xcc\x06\x88\xc9\xe3\xa0\x1f\x07\x14\x4c\x8d\xa3\x76\x06\xcd\x92\x3c\xc2\x6c\xc8\x31\x3b\x5d\x75\x24\x5b\x77\x3a\xb8\x0d\x26\xa9\xa3\x96\xdd\x1b\x32\x47\xb2\x45\x5e\x1e\x9a\xac\x8f\x45\xff\x6c\x7a\xce\x41\x5c\x87\x35\xe3\x63\x2e\x39\xcb\x81\xb2\x8c\xac\xc5\xbc\xdc\xfa\xd2\x5e\xcd\x98\xca\x8c\xf6\x75\x8a\xe6\x1a\xd9\xf5\x68\x9b\x22\xc1\x72\x42\x87\xdb\x2a\xda\x05\xe4\x22\x89\x33\x38\x0d\x73\x32\x44\xda\x27\xc1\xee\x2b\x29\x57\x03\xe1\x5b\x92\x76\xba\x38\xc5\xb4\x2a\x0a\x01\x4d\x71\x9d\xdf\x7a\x64\x76\x76\x1c\x5a\x1b\x83\xb1\x80\x82\x41\xee\xf7\x11\x93\x02\x1d\xa3\x9f\xcc\xad\xed\x83\x3d\xde\x44\x64\x12\x5a\xe7\xcd\xbb\x63\xce\x5f\x89\x42\x79\x25\x99\xcb\x7b\x3b\x2f\x36\x67\x0e\x09\xff\x57\xbe\x0a\xe0\x31\x26\x05\x67\xf3\xa9\xe9\xa2\xdf\xf4\xf2\x87\xeb\x72\xfc\x9c\x02\xca\xdf\xc4\x0f\x07\x63\xe8\x24\x2b\x58\x9c\x5f\x94\xca\x13\x78\xe7\xf3\xd6\x85\xd1\x62\x18\xed\x4e\x4b\x4b\x11\x43\xda\xb9\x8d\xd4\xd4\xa7\x7a\xe2\x45\xf2\xce\xec\xab\xc8\xf4\x71\x7f\xf2\xe6\x27\x9b\xad\x8d\xb3\xfc\xb2\xf7\x66\x71\xf6\x7d\xb1\xd9\x76\x71\x5e\x95\x2d\xb8\xb0\xbd\x09\x1b\x1a\x2c\xe2\xd8\xba\x27\x37\x56\x8b\xf9\xd9\xd0\x53\x01\x6f\xc7\x7a\x0a\xc4\xc4\xf3\x21\xff\xb0\x95\x4b\x05\x46\x37\x86\xa5\xea\xc9\xe7\xee\xc8\xed\x06\x7f\xff\x3d\x93\xe8\x72\x02\x88\xc8\x1f\x56\x3f\x31\xe5\xa8\x20\x64\xef\xa7\x80\x2f\xd9\xf3\x74\xe7\x5f\x07\x1e\xff\x2b\x9a\x31\x20\x55\xff\x06\x00\x00\xff\xff\x48\x6b\x68\x29\xfd\x06\x00\x00")

func workerEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeConfigYaml,
		"worker/etc/origin/node/node-config.yaml",
	)
}

func workerEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x73\x13\x37\x10\x7e\xf7\x5f\xb1\x4d\x19\x02\xd3\xde\x9d\x9d\x92\xc9\x70\x99\xd0\x61\x68\xa7\xc3\x03\x3f\x86\xb4\xbc\x30\x0c\xc8\xba\xb5\x6f\x1b\x9d\x24\xb4\x2b\x1b\x37\xe4\x7f\xef\x48\xbe\x73\x6c\xe2\x50\x0a\x4f\xb6\x56\xbb\x9f\x76\xbf\xfd\x56\x3a\xe5\xe9\x35\x06\x26\x67\x6b\x58\x4c\x46\x17\x64\x9b\x1a\x5e\xba\x66\xd4\xa1\xa8\x46\x89\xaa\x47\x00\xca\x5a\x27\x4a\xc8\x59\x4e\x4b\x00\xd6\x2d\x36\xd1\x60\x28\x95\xf1\xad\x2a\x2f\xe2\x14\x83\x45\x41\x2e\xc9\x55\x3a\x90\x90\x56\xa6\xf0\xae\xa9\xe1\xf0\x70\x04\x60\xd4\x14\x4d\x1f\xac\xbc\xaf\xc1\x2d\x38\x2f\xb4\xeb\xbc\xb3\x68\xa5\x06\x8b\xb2\x74\xe1\x22\x9b\x9d\x47\xcb\x2d\xcd\x24\xe3\xed\xf7\x91\x95\xc7\x1a\xc8\xce\x82\x1a\x01\x58\xd5\xe1\x00\x9b\xfe\xb3\x57\x3a\x19\x06\xa0\x82\x1b\x3b\x62\x8f\x3a\x25\xa1\x9d\x15\x45\x16\x43\x4e\xa9\x48\x59\x74\xca\x36\xeb\xfc\x0a\xa8\xa6\x64\xab\xa9\xe2\xb6\x5f\x17\xba\xff\xf3\x29\xff\x02\xfc\xf8\xc3\xae\x0b\x00\xa3\x40\x81\xd1\x81\x27\x8f\x33\x45\x66\x34\xb8\x02\xcd\x40\x59\x27\x2d\x06\xf0\xc1\x69\x64\x06\x62\x30\xc4\x82\x96\xec\x1c\x9c\x05\x69\x11\xb4\xa5\x82\x31\x2c\x30\x00\x3b\x7d\x81\xf2\x33\x2c\x15\x09\x44\x2b\x64\x80\x04\xf0\x23\x09\xf7\xa8\x12\x94\x87\xc3\x0b\x32\x06\xee\xdc\xfb\xdb\x4d\x19\x0a\x7f\xff\x34\xbb\xc0\xf8\x10\xfe\xfc\xfd\xd5\xb3\xde\x33\xa0\x04\x42\x3e\x1b\xf7\xeb\x65\x4b\x06\x41\x42\xc4\x53\x68\x5c\x6f\x84\x94\x64\x15\x39\x54\xdc\xaa\x80\x55\x62\x6d\xc1\x4b\x12\xdd\x56\xac\x03\x79\xe1\xca\x2d\xb8\xd0\x62\x80\x45\x49\x64\xb8\xfb\xa8\x6a\x70\x51\xd9\x68\xcc\x69\xca\xdf\x6e\xa0\x00\x50\xb7\x0e\x0e\x96\x2a\xa4\xfa\x6a\x78\x7c\xb3\x7a\x1d\x43\x40\x2b\x66\x05\x9d\xb2\x6a\x9e\x68\x78\xf1\xfa\x7c\x5d\x71\x5a\x4c\x8e\x19\xca\xb2\x3c\x80\xa3\x47\x77\x27\x5b\xc8\x6c\x10\x3d\x4c\x8e\xe1\x6e\x76\xdd\xda\xb9\x77\x6f\x28\x15\x7e\x3a\x83\x09\xdc\xbf\xbf\xd9\x44\xc3\xb8\xe5\x39\x0d\xa8\x2e\x36\xeb\x19\x6d\x73\xf0\xe6\x0d\x1c\xdc\xb9\xec\x81\xae\x0e\xa0\x98\x0b\x3c\x18\xc3\xdb\xb7\xb7\xd4\x88\x21\xb8\xf0\xbf\x2a\x4c\x2d\x22\x3b\xbf\x51\x59\x6e\xdd\xe4\x66\x5a\x8d\xb3\x78\xad\x25\xa3\xa2\xd5\x6d\x42\xea\x4d\xb3\x68\x75\x1a\x4c\xf8\x10\x49\xe0\x72\x0b\xf0\xab\xdb\xe9\xfc\xe7\x69\x0c\x5a\xb9\xda\x56\x5b\x3e\xe0\xfc\xe9\x1f\x5b\xda\xfa\x7a\xc5\x04\x81\xa2\xb0\xae\x48\xa6\xde\xad\x81\xa2\xe0\x15\x0b\x76\x05\x35\x67\x41\xd9\xc6\x75\xd7\x85\xbe\x42\x96\x40\x5a\xf2\x68\xd8\xd8\x4d\x31\x80\x9b\x81\x97\x36\xa0\x6a\x18\x76\x80\x74\x40\x25\xc8\x20\x0e\x02\x36\x51\x63\x8a\xda\x40\xa9\xce\x45\x2b\x29\xfa\xd5\xf9\x79\x1a\xa4\xc8\xc8\x69\xea\x5a\xc7\xc2\xb0\x24\x69\x53\x8f\x56\xa0\x5d\x40\xde\x84\xb5\x22\x9e\xeb\xaa\x9a\xc6\xf9\x3f\x64\x8c\x2a\x03\x36\xad\x92\x52\xbb\xae\xe2\xd6\x2d\xdf\x4d\xe3\xbc\xd4\x73\xfa\x95\x9a\xb3\xc9\xf1\xc9\xe4\x97\x93\x87\xdf\x1a\x7b\x74\xf2\xf0\x64\xb4\xad\xc1\xf7\x36\x29\xe9\x7d\x96\xdf\xe4\x68\x9f\xfc\xd6\xf5\x27\x76\x33\xaf\xf9\xa6\x48\x77\xd0\x0b\x8f\xf6\xdd\xe2\x3c\x13\x03\x25\x64\x59\xbe\xd3\xce\xce\x68\x5e\xdb\x22\xe0\x42\x19\x6a\x94\xb8\x50\xf4\x4c\x9e\x3d\xf8\x6e\xd4\x56\xd9\xc6\xe0\x35\xe2\x64\xd0\xcf\x46\xc4\xdf\x24\x94\x66\x3a\xdc\x87\x7b\x84\xb2\xc6\xdd\xbd\xcc\xfa\xdb\xe1\xf8\x74\x3d\x34\x99\xce\x4e\xcd\xb1\x86\xcb\x4b\x28\x9f\xe4\x74\xcb\xa7\xc9\xc2\xe5\x73\xd7\x20\x7c\x82\x0f\xd1\x09\xc2\xd5\x5a\xe8\xfd\x13\x72\x9d\x60\xb6\x06\x64\x17\x83\xc6\xfe\xf5\x02\x30\xd4\x91\x6c\x56\x00\xda\xc7\x1a\x8e\xc6\xe3\x6e\x63\xe9\xb0\x73\x61\x55\xc3\x83\xf1\xf8\x19\x6d\xee\xe1\x0f\x11\xf9\x46\xdc\x64\x4f\xd8\x64\x13\xc6\xa8\x63\x20\x59\x3d\x71\x56\xf0\xa3\x0c\xb1\x3e\xd0\x82\x0c\xce\xb1\xa9\x73\xf1\xc3\x11\xd1\x3e\xe6\xbf\x18\x43\xdd\x4f\xf0\xc2\x99\xd8\xe1\xb3\x24\x7f\x1e\xde\xb6\x3c\x0c\x2f\x95\xb4\x35\x54\x86\xa6\x55\xe7\xd2\x43\x3e\xc8\x7e\x4d\x41\x1a\x8c\x62\x77\x23\x75\xf6\x85\x35\xab\xad\x03\x77\xb1\x42\xb4\xd5\xe7\xd4\xed\xe0\x85\x68\x8b\xe1\xd5\xdf\x0d\x5d\xa8\xf0\x3d\xe1\xbc\xda\x93\xfd\xb5\xf1\x3f\x33\x47\xd1\x5f\x3e\x7a\x2d\xf4\x62\xd7\x27\xed\x3c\x5f\x7f\x8d\x6c\x90\x93\xed\xe5\xd3\xdf\x36\x6b\x1f\xc8\xe5\xf6\x19\xc5\xfc\x3c\x03\xf6\x42\xb6\xae\xc1\x62\xf8\x4e\x1a\x0d\x9d\xea\xbf\x46\x32\x4c\xca\x6d\x68\xf7\xfe\x6e\xed\xed\xd5\xad\xd1\xfb\x08\xde\x4b\xef\xad\x08\x03\xa5\x37\x58\xbe\x35\x22\x33\x1b\x68\x4e\x5f\x3c\x7a\x0f\xbd\xff\x06\x00\x00\xff\xff\x44\x82\x43\x11\x96\x0a\x00\x00")

func workerEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsOvsYaml,
		"worker/etc/origin/node/pods/ovs.yaml",
	)
}

func workerEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcd\x8a\xa6\xdd\x46\x29\x2e\xd6\x61\x50\x91\x02\x5d\x92\x75\x01\x1a\x27\x68\xd3\x62\x40\x50\x14\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x7a\x69\xfe\xfb\x40\xea\xc5\x76\x14\x39\x49\xf7\x69\x5f\x5a\x93\x77\xf7\xdc\xeb\x73\x54\x78\x21\x3f\xa2\x75\xd2\xe8\x04\xaa\xf1\x68\x21\x75\x9a\xc0\x99\x49\x47\x39\x12\x4f\x39\xf1\x64\x04\xc0\xb5\x36\xc4\x49\x1a\xed\xfc\x11\xc0\x89\x0c\xd3\x52\xa1\x8d\xb8\x2a\x32\x1e\x2d\xca\x29\x5a\x8d\x84\x2e\x92\x26\x16\x56\x92\x14\x5c\xb1\xc2\xa4\x09\xec\xec\x8c\x00\x14\x9f\xa2\x6a\x8c\x79\x51\x24\xe0\x52\x1d\x0e\xc2\xe4\x85\xd1\xa8\x29\x01\x8d\x74\x69\xec\x22\x5c\x9b\x02\xb5\xcb\xe4\x8c\x02\xde\xed\x3a\xb4\x2c\x30\x01\xa9\x67\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xbf\x5d\xc1\x05\x26\x2b\x20\xe6\x45\xae\x40\xe1\x83\x10\x46\x13\x97\x1a\x6d\x08\x89\xf9\x28\x72\xae\xd3\x3a\x3e\x06\xf1\x54\xea\x78\xca\x5d\xd6\x9c\x99\x68\x7e\x7c\x0b\xff\x03\xfc\xf0\x68\x53\x05\xc0\x21\x01\xc3\xd2\x40\x21\x0b\x9c\x71\xa9\x46\xad\x2a\xc8\x19\x70\x6d\x28\x43\x0b\x85\x35\x02\x9d\x03\xe9\x40\x49\x47\xa8\xa5\x9e\x83\xd1\x40\x19\x82\xd0\x92\x39\xb4\x15\x5a\x70\x46\x2c\x90\x7e\x86\x4b\x2e\x09\x4a\x4d\x52\x81\x24\xc0\xaf\x92\x5c\x83\x4a\x96\x17\xb0\xbb\x90\x4a\xc1\xe3\xa7\x7f\x9b\xa9\x03\x56\x3c\x7b\x19\x54\x60\x6f\x17\xce\x8f\xde\x9d\x34\x9a\x16\xc9\x4a\x74\xfb\x7b\xcd\xf9\x32\x93\x0a\x81\x6c\x89\x2f\x21\x35\xcd\x25\xf8\x20\x51\x64\x06\x76\x09\x1d\xed\xc2\x37\x1f\x03\x27\x60\xf0\x61\x72\xfc\x17\x3b\x38\x9d\x4c\x8e\x0e\xce\x93\xb8\xe2\x36\xb6\xa5\x8e\x37\xca\x1a\xaf\x42\x8f\x7c\xe8\xf0\x2a\x4e\xb1\x8a\x75\xa9\xd4\x4b\x9f\x9a\xee\xbc\x40\xed\x64\xe7\x92\x5b\x9f\x7a\x02\xaf\xfb\x85\x11\xa5\xb5\xa8\x49\x2d\xfb\x25\x3a\x98\x1c\x6f\xd4\xc6\x8b\xc6\x2f\x1c\x44\x51\xb4\x03\xcf\x5f\x3d\x19\xaf\x39\x72\x0a\xb1\x80\xf1\x0b\x78\x12\x54\xd7\x24\x4f\x9f\xb6\x45\x81\x9f\xf6\x61\x0c\xcf\x9e\x75\x42\x54\x0e\xd7\x34\xa7\x16\xf9\xa2\x3b\xcf\xe4\x7a\xb5\x2e\x2e\x60\xe7\xf1\x55\x03\x74\xbd\x03\x6c\x4e\xf0\xcb\x1e\x7c\xfa\x34\x90\x32\x5a\x6b\xec\x7f\x49\xd8\xf7\x56\xea\x79\x2f\xd1\xd0\xf3\x71\x3f\xca\xd4\x68\x5c\x9f\x41\x8f\xa7\x4d\x8a\x7e\xf8\x67\x72\x0e\xa9\x41\xa7\x77\xc3\x58\x39\x82\x65\x7f\xde\xbc\xc2\x83\x87\xe8\xe2\x02\x1e\x01\x9b\x41\x8c\x24\x62\x63\xe5\x5c\xea\xd8\x7b\x0d\xff\xb0\xda\x75\xb4\xe4\xb9\x1a\xae\x54\x37\x1c\x07\x61\xef\xc0\x4c\xea\xb4\x8e\xd2\x57\xe6\x26\xce\xff\x76\x12\x26\x66\x5b\x52\xdf\xd5\xed\xae\xdd\xe7\x7c\x81\x60\xfc\x2a\x69\x16\x26\xcc\x4a\x2d\xc2\x02\x6f\x47\xcb\xbb\x6c\xbb\x9b\x03\x7b\xd7\xb4\x4c\x68\x19\x6b\xa4\x28\x8d\x7f\xdb\x63\x2b\x96\x37\x30\x91\x8f\xb1\xb1\x12\x45\x6d\x65\x0a\x0a\x56\x7e\x21\xfe\x08\x71\x66\x1c\x6d\xdc\xb5\x51\xd5\x95\x6a\x47\xc3\x2d\x5d\x9d\x6f\x33\x24\x2c\x8c\x66\xaf\x66\x61\xad\x1a\xe0\x4a\xe1\xd7\xc2\xd8\x55\xf3\x9c\x29\xad\xc0\x2d\x58\xa3\xae\x40\xa3\xb6\x72\x28\x56\xcf\x01\x38\xe2\x96\xba\xf2\xb0\xa6\xfa\xfb\x77\xcf\x2d\x63\xfe\xb5\x1b\x52\x77\xa9\x8e\x56\x72\x60\x4c\x99\xb9\xc2\x0a\xd5\xfe\xe3\xab\xc3\xa3\xdf\x3f\xbc\xf9\xfc\xf6\xf4\xcd\xdb\xa3\x8f\x47\x6f\x13\xf6\xfc\x3a\x84\x86\xba\x6a\x1f\x9e\xfa\x11\x3b\x3d\x3b\x9a\xbc\xff\xf3\xf8\x8f\xf3\xcf\x87\x93\xf7\x9f\x0f\x4f\x4f\x5e\x1f\x4f\x9a\x24\x2a\xae\x4a\x4c\x40\xa8\xd2\x11\xda\x48\x19\xc1\x55\x10\xc9\x9c\xcf\x31\x81\xab\x2b\x88\x0e\xea\x60\x8f\xfd\x8d\x8b\x26\xbe\xae\xdf\xe0\x4b\x69\x08\xe1\xba\xf6\xb8\xfe\x56\x02\xf8\xba\xba\x36\x82\xee\x65\x3c\x33\x96\x12\x18\xef\x3d\x7f\xf1\x6b\xe3\xdb\x77\xb6\x7f\x5b\x63\x65\xc8\x15\x65\xff\x8c\xea\x65\x51\x37\xa7\xc1\xf4\x17\x5f\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x2e\x72\xcc\x8d\x5d\xfa\xbb\xbd\x93\x7a\xa4\x1d\x8a\xd2\x4a\x5a\x1e\x18\x4d\xf8\x95\x5a\xdb\xc2\xca\x4a\x2a\x9c\x63\x9a\x84\xfd\xd3\xba\x28\xf5\x6b\xf7\xc1\xa1\x4d\xa0\xde\x51\x95\x51\x65\x8e\x27\xa6\xd4\xab\xdc\x72\x7f\x3a\xe3\x94\x25\xfd\xf5\xb4\x99\x8d\x71\xd4\xf4\xbc\x4b\x81\xa7\xa7\x5a\x2d\xd7\x9c\xf6\xf1\xb6\xcd\xe1\x1a\x70\xa7\xb6\x2e\xbf\xd3\x41\xf3\xf2\xf6\xe1\x2a\x6e\x59\x2b\xb8\xd5\x24\x4e\xa7\xa5\xbb\x25\xc1\xc6\x90\x79\xf1\x03\xa3\x08\xef\x7f\xe5\x2e\x25\x89\x6c\x0b\xb2\xa9\x1e\x0c\xbc\xfa\x92\xdc\x82\xbb\x52\xfa\x9e\xb8\x57\x9f\x83\xc3\x81\xf7\xd4\x36\xe1\x6e\x2e\xb9\x3e\x92\x29\x88\xf9\xcf\xa2\x56\xd8\x9f\x96\x6e\xd3\xf6\x8d\x91\x44\x30\xd6\x48\xe9\x40\x32\x4a\x4e\x5b\x04\xbf\xc0\xdc\x7d\x32\x53\x72\xda\xc2\x06\x9b\x5e\x9a\x5e\x73\x52\x0b\xbb\x4a\x06\xd6\x1f\x1f\x76\xe7\xc2\x4a\x13\x78\xa9\xb8\x73\x93\x7a\x91\x2c\x1d\x61\xce\xea\x4d\xd9\x7c\xfb\x8f\x5a\x0a\x36\x5f\xd8\x01\xc6\x87\xdf\xf2\xf8\x56\x1a\x8e\x86\x38\xb8\x15\x60\x98\x77\xdb\x58\x37\x08\xe9\x4b\x9b\x1b\xff\xe7\x8d\xbb\x09\xb2\xba\x1e\xb4\x5e\xe7\xe9\xad\x2c\xbd\xcb\x32\xee\xf8\x38\xcc\xd5\x3b\x31\xd6\xf8\x39\x04\x55\x93\xf3\x4e\xa4\x1b\x5c\xbb\x8b\x8d\xf7\x8a\x6c\x73\x4e\xef\xc1\xbf\x41\xd4\x9b\x1c\x1c\x64\xe0\xd6\x01\xda\xa4\xe2\x30\x11\xb7\x26\x77\x0f\x46\x3e\x8c\x8f\xff\x06\x00\x00\xff\xff\x1a\xb6\xf4\xf5\x9b\x0f\x00\x00")

func workerEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsSdnYaml,
		"worker/etc/origin/node/pods/sdn.yaml",
	)
}

func workerEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func workerEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeResolvConf,
		"worker/etc/origin/node/resolv.conf",
	)
}

func workerEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := workerEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func workerEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeSdnKubeconfig,
		"worker/etc/origin/node/sdn.kubeconfig",
	)
}

func workerEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\xa9\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x5f\xc7\x2a\x7e\x47\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\xae\x77\xed\x6c\x2d\x59\x05\x45\xa3\x3a\xe3\x94\x81\x16\x8c\xdc\xb6\xac\xc2\x88\x53\xc6\x4b\x0a\x93\x9f\x79\x49\xef\x85\x02\x86\x64\x68\x36\xb8\xe2\x8b\x5b\x1a\x31\xdb\x77\xa6\x2f\x47\x05\x5d\x0b\xb7\x5a\x3b\x2b\xd7\x03\xcf\x73\x76\x6e\x0a\x28\x9d\x3d\x69\x25\x05\xa6\x41\x50\xf4\xb3\x0f\x22\xd0\x88\xa2\x27\x4a\x9f\x14\x1f\x0b\x7f\x7e\x7b\x1c\xfe\x3c\xfb\x05\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func workerEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcSysconfigAtomicOpenshiftNode,
		"worker/etc/sysconfig/atomic-openshift-node",
	)
}

func workerEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := workerEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func workerVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_workerVarLibOriginDockerConfigJson,
		"worker/var/lib/origin/.docker/config.json",
	)
}

func workerVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := workerVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master/etc/etcd/ca.crt":                                  masterEtcEtcdCaCrt,
	"master/etc/etcd/etcd.conf":                               masterEtcEtcdEtcdConf,
	"master/etc/etcd/peer.crt":                                masterEtcEtcdPeerCrt,
	"master/etc/etcd/peer.key":                                masterEtcEtcdPeerKey,
	"master/etc/etcd/server.crt":                              masterEtcEtcdServerCrt,
	"master/etc/etcd/server.key":                              masterEtcEtcdServerKey,
	"master/etc/origin/cloudprovider/azure.conf":              masterEtcOriginCloudproviderAzureConf,
	"master/etc/origin/master/admin.kubeconfig":               masterEtcOriginMasterAdminKubeconfig,
	"master/etc/origin/master/aggregator-front-proxy.crt":     masterEtcOriginMasterAggregatorFrontProxyCrt,
	"master/etc/origin/master/aggregator-front-proxy.key":     masterEtcOriginMasterAggregatorFrontProxyKey,
	"master/etc/origin/master/ca-bundle.crt":                  masterEtcOriginMasterCaBundleCrt,
	"master/etc/origin/master/ca.crt":                         masterEtcOriginMasterCaCrt,
	"master/etc/origin/master/ca.key":                         masterEtcOriginMasterCaKey,
	"master/etc/origin/master/front-proxy-ca.crt":             masterEtcOriginMasterFrontProxyCaCrt,
	"master/etc/origin/master/master-config.yaml":             masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/master.etcd-ca.crt":             masterEtcOriginMasterMasterEtcdCaCrt,
	"master/etc/origin/master/master.etcd-client.crt":         masterEtcOriginMasterMasterEtcdClientCrt,
	"master/etc/origin/master/master.etcd-client.key":         masterEtcOriginMasterMasterEtcdClientKey,
	"master/etc/origin/master/master.kubelet-client.crt":      masterEtcOriginMasterMasterKubeletClientCrt,
	"master/etc/origin/master/master.kubelet-client.key":      masterEtcOriginMasterMasterKubeletClientKey,
	"master/etc/origin/master/master.proxy-client.crt":        masterEtcOriginMasterMasterProxyClientCrt,
	"master/etc/origin/master/master.proxy-client.key":        masterEtcOriginMasterMasterProxyClientKey,
	"master/etc/origin/master/master.server.crt":              masterEtcOriginMasterMasterServerCrt,
	"master/etc/origin/master/master.server.key":              masterEtcOriginMasterMasterServerKey,
	"master/etc/origin/master/named/console.crt":              masterEtcOriginMasterNamedConsoleCrt,
	"master/etc/origin/master/named/console.key":              masterEtcOriginMasterNamedConsoleKey,
	"master/etc/origin/master/openshift-master.kubeconfig":    masterEtcOriginMasterOpenshiftMasterKubeconfig,
	"master/etc/origin/master/scheduler.json":                 masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/service-signer.crt":             masterEtcOriginMasterServiceSignerCrt,
	"master/etc/origin/master/service-signer.key":             masterEtcOriginMasterServiceSignerKey,
	"master/etc/origin/master/serviceaccounts.private.key":    masterEtcOriginMasterServiceaccountsPrivateKey,
	"master/etc/origin/master/serviceaccounts.public.key":     masterEtcOriginMasterServiceaccountsPublicKey,
	"master/etc/origin/master/session-secrets.yaml":           masterEtcOriginMasterSessionSecretsYaml,
	"master/etc/origin/node/ca.crt":                           masterEtcOriginNodeCaCrt,
	"master/etc/origin/node/client-ca.crt":                    masterEtcOriginNodeClientCaCrt,
	"master/etc/origin/node/node-config.yaml":                 masterEtcOriginNodeNodeConfigYaml,
	"master/etc/origin/node/node.kubeconfig":                  masterEtcOriginNodeNodeKubeconfig,
	"master/etc/origin/node/pods/apiserver.yaml":              masterEtcOriginNodePodsApiserverYaml,
	"master/etc/origin/node/pods/controllers.yaml":            masterEtcOriginNodePodsControllersYaml,
	"master/etc/origin/node/pods/etcd.yaml":                   masterEtcOriginNodePodsEtcdYaml,
	"master/etc/origin/node/pods/ovs.yaml":                    masterEtcOriginNodePodsOvsYaml,
	"master/etc/origin/node/pods/sdn.yaml":                    masterEtcOriginNodePodsSdnYaml,
	"master/etc/origin/node/resolv.conf":                      masterEtcOriginNodeResolvConf,
	"master/etc/origin/node/sdn.kubeconfig":                   masterEtcOriginNodeSdnKubeconfig,
	"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt": masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master/etc/sysconfig/atomic-openshift-node":              masterEtcSysconfigAtomicOpenshiftNode,
	"master/root/.kube/config":                                masterRootKubeConfig,
	"master/var/lib/origin/.docker/config.json":               masterVarLibOriginDockerConfigJson,
	"worker/etc/origin/cloudprovider/azure.conf":              workerEtcOriginCloudproviderAzureConf,
	"worker/etc/origin/node/bootstrap.kubeconfig":             workerEtcOriginNodeBootstrapKubeconfig,
	"worker/etc/origin/node/ca.crt":                           workerEtcOriginNodeCaCrt,
	"worker/etc/origin/node/node-bootstrapper.crt":            workerEtcOriginNodeNodeBootstrapperCrt,
	"worker/etc/origin/node/node-bootstrapper.key":            workerEtcOriginNodeNodeBootstrapperKey,
	"worker/etc/origin/node/node-config.yaml":                 workerEtcOriginNodeNodeConfigYaml,
	"worker/etc/origin/node/pods/ovs.yaml":                    workerEtcOriginNodePodsOvsYaml,
	"worker/etc/origin/node/pods/sdn.yaml":                    workerEtcOriginNodePodsSdnYaml,
	"worker/etc/origin/node/resolv.conf":                      workerEtcOriginNodeResolvConf,
	"worker/etc/origin/node/sdn.kubeconfig":                   workerEtcOriginNodeSdnKubeconfig,
	"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt": workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"worker/etc/sysconfig/atomic-openshift-node":              workerEtcSysconfigAtomicOpenshiftNode,
	"worker/var/lib/origin/.docker/config.json":               workerVarLibOriginDockerConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"ca.crt":     {masterEtcEtcdCaCrt, map[string]*bintree{}},
				"etcd.conf":  {masterEtcEtcdEtcdConf, map[string]*bintree{}},
				"peer.crt":   {masterEtcEtcdPeerCrt, map[string]*bintree{}},
				"peer.key":   {masterEtcEtcdPeerKey, map[string]*bintree{}},
				"server.crt": {masterEtcEtcdServerCrt, map[string]*bintree{}},
				"server.key": {masterEtcEtcdServerKey, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {masterEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"master": {nil, map[string]*bintree{
					"admin.kubeconfig":           {masterEtcOriginMasterAdminKubeconfig, map[string]*bintree{}},
					"aggregator-front-proxy.crt": {masterEtcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
					"aggregator-front-proxy.key": {masterEtcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
					"ca-bundle.crt":              {masterEtcOriginMasterCaBundleCrt, map[string]*bintree{}},
					"ca.crt":                     {masterEtcOriginMasterCaCrt, map[string]*bintree{}},
					"ca.key":                     {masterEtcOriginMasterCaKey, map[string]*bintree{}},
					"front-proxy-ca.crt":         {masterEtcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
					"master-config.yaml":         {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"master.etcd-ca.crt":         {masterEtcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
					"master.etcd-client.crt":     {masterEtcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
					"master.etcd-client.key":     {masterEtcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
					"master.kubelet-client.crt":  {masterEtcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
					"master.kubelet-client.key":  {masterEtcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
					"master.proxy-client.crt":    {masterEtcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
					"master.proxy-client.key":    {masterEtcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
					"master.server.crt":          {masterEtcOriginMasterMasterServerCrt, map[string]*bintree{}},
					"master.server.key":          {masterEtcOriginMasterMasterServerKey, map[string]*bintree{}},
					"named": {nil, map[string]*bintree{
						"console.crt": {masterEtcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
						"console.key": {masterEtcOriginMasterNamedConsoleKey, map[string]*bintree{}},
					}},
					"openshift-master.kubeconfig": {masterEtcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
					"scheduler.json":              {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"service-signer.crt":          {masterEtcOriginMasterServiceSignerCrt, map[string]*bintree{}},
					"service-signer.key":          {masterEtcOriginMasterServiceSignerKey, map[string]*bintree{}},
					"serviceaccounts.private.key": {masterEtcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
					"serviceaccounts.public.key":  {masterEtcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
					"session-secrets.yaml":        {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"ca.crt":           {masterEtcOriginNodeCaCrt, map[string]*bintree{}},
					"client-ca.crt":    {masterEtcOriginNodeClientCaCrt, map[string]*bintree{}},
					"node-config.yaml": {masterEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"node.kubeconfig":  {masterEtcOriginNodeNodeKubeconfig, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"apiserver.yaml":   {masterEtcOriginNodePodsApiserverYaml, map[string]*bintree{}},
						"controllers.yaml": {masterEtcOriginNodePodsControllersYaml, map[string]*bintree{}},
						"etcd.yaml":        {masterEtcOriginNodePodsEtcdYaml, map[string]*bintree{}},
						"ovs.yaml":         {masterEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml":         {masterEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {masterEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {masterEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {masterEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"root": {nil, map[string]*bintree{
			".kube": {nil, map[string]*bintree{
				"config": {masterRootKubeConfig, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {masterVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"worker": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {workerEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"bootstrap.kubeconfig":  {workerEtcOriginNodeBootstrapKubeconfig, map[string]*bintree{}},
					"ca.crt":                {workerEtcOriginNodeCaCrt, map[string]*bintree{}},
					"node-bootstrapper.crt": {workerEtcOriginNodeNodeBootstrapperCrt, map[string]*bintree{}},
					"node-bootstrapper.key": {workerEtcOriginNodeNodeBootstrapperKey, map[string]*bintree{}},
					"node-config.yaml":      {workerEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"ovs.yaml": {workerEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml": {workerEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {workerEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {workerEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {workerEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {workerVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

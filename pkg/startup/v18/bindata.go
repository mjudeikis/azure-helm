// Code generated by go-bindata. (@generated) DO NOT EDIT.

//Package startup generated by go-bindata.// sources:
// data/common/etc/azsec/azsecmon-audit.rules
// data/common/etc/default/mdsd
// data/common/etc/fluentd/fluent.conf
// data/common/etc/mdsd.d/mdsd.xml
// data/common/etc/mdsd.d/secret/gcscert.pem
// data/common/etc/mdsd.d/secret/gcskey.pem
// data/master/etc/aro-admission-controller/aro-admission-controller.yaml
// data/master/etc/etcd/ca.crt
// data/master/etc/etcd/etcd.conf
// data/master/etc/etcd/peer.crt
// data/master/etc/etcd/peer.key
// data/master/etc/etcd/server.crt
// data/master/etc/etcd/server.key
// data/master/etc/origin/cloudprovider/azure.conf
// data/master/etc/origin/master/admin.crt
// data/master/etc/origin/master/admin.key
// data/master/etc/origin/master/admin.kubeconfig
// data/master/etc/origin/master/admission-webhook.kubeconfig
// data/master/etc/origin/master/aggregator-front-proxy.crt
// data/master/etc/origin/master/aggregator-front-proxy.key
// data/master/etc/origin/master/ca-bundle.crt
// data/master/etc/origin/master/ca.crt
// data/master/etc/origin/master/ca.key
// data/master/etc/origin/master/client.secret
// data/master/etc/origin/master/front-proxy-ca.crt
// data/master/etc/origin/master/master-config.yaml
// data/master/etc/origin/master/master.etcd-ca.crt
// data/master/etc/origin/master/master.etcd-client.crt
// data/master/etc/origin/master/master.etcd-client.key
// data/master/etc/origin/master/master.kubelet-client.crt
// data/master/etc/origin/master/master.kubelet-client.key
// data/master/etc/origin/master/master.proxy-client.crt
// data/master/etc/origin/master/master.proxy-client.key
// data/master/etc/origin/master/master.server.crt
// data/master/etc/origin/master/master.server.key
// data/master/etc/origin/master/named/console.crt
// data/master/etc/origin/master/named/console.key
// data/master/etc/origin/master/openshift-master.kubeconfig
// data/master/etc/origin/master/scheduler.json
// data/master/etc/origin/master/service-signer.crt
// data/master/etc/origin/master/service-signer.key
// data/master/etc/origin/master/serviceaccounts.private.key
// data/master/etc/origin/master/serviceaccounts.public.key
// data/master/etc/origin/master/session-secrets.yaml
// data/master/etc/origin/node/ca.crt
// data/master/etc/origin/node/client-ca.crt
// data/master/etc/origin/node/node-config.yaml
// data/master/etc/origin/node/node.kubeconfig
// data/master/etc/origin/node/pods/apiserver.yaml
// data/master/etc/origin/node/pods/aroadmissioncontroller.yaml
// data/master/etc/origin/node/pods/controllers.yaml
// data/master/etc/origin/node/pods/etcd.yaml
// data/master/etc/origin/node/pods/ovs.yaml
// data/master/etc/origin/node/pods/sdn.yaml
// data/master/etc/origin/node/resolv.conf
// data/master/etc/origin/node/sdn.kubeconfig
// data/master/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master/etc/sysconfig/atomic-openshift-node
// data/master/root/.kube/config
// data/worker/etc/origin/cloudprovider/azure.conf
// data/worker/etc/origin/node/bootstrap.kubeconfig
// data/worker/etc/origin/node/ca.crt
// data/worker/etc/origin/node/node-bootstrapper.crt
// data/worker/etc/origin/node/node-bootstrapper.key
// data/worker/etc/origin/node/node-config.yaml
// data/worker/etc/origin/node/pods/ovs.yaml
// data/worker/etc/origin/node/pods/sdn.yaml
// data/worker/etc/origin/node/resolv.conf
// data/worker/etc/origin/node/sdn.kubeconfig
// data/worker/etc/origin/node/volume-config.yaml
// data/worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/worker/etc/sysconfig/atomic-openshift-node
package startup

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commonEtcAzsecAzsecmonAuditRules = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\xbf\x4e\xc3\x40\x0c\xc6\xf7\x3c\x85\xa5\xae\xb9\x46\x02\xc4\x80\xc4\xc2\xc0\x06\x4b\x1f\xa0\x32\x67\xb7\x3d\xb8\x7f\x3a\x3b\x4d\xc2\xd3\xa3\xa4\x51\x49\x87\x56\x30\x9d\x3e\xfb\xd3\xef\x7e\x5e\xc1\x26\x05\x86\x9d\xf3\x0c\x18\x09\xc8\x15\xb6\x9a\xca\x00\x1d\xaa\x3d\xb0\x54\xa6\x83\xe6\x88\xa5\xf1\x69\xdf\x60\x4b\x4e\x1b\x30\x19\xba\x1e\xc1\x7c\xc1\x34\x50\x0c\x99\x8b\x8b\xfb\xa9\xcb\x6a\xff\xdc\xcb\x28\xd2\xd1\xa2\xd7\x0a\x97\x7d\x49\x6d\x3e\x57\xa6\x74\xb3\x91\x31\xac\x69\xf9\x59\xc6\xf0\x6b\xf2\x2d\x6c\x2f\x4c\xc6\x41\x55\xad\xe0\x2d\x45\xa7\xa9\x80\xe5\xa2\xe8\x22\xc8\x20\x16\xbd\x97\x35\xbc\xbf\x3c\x01\xfa\xc2\x48\x03\xf8\x84\xc4\x04\xe3\x5e\x93\x9d\x0f\x21\x28\xad\x67\xa9\x56\x06\x01\x7d\x87\x83\xd4\xdc\x3b\x05\xf3\x0a\x58\xec\xe1\xf9\xe3\xfe\x0e\xcc\x06\xb8\x67\x7b\xe4\xfa\xf4\xa0\xd6\x2e\x3a\xdd\x86\x44\xad\xe7\x7a\xb7\x08\xd7\x39\x8f\x0f\xff\xe2\x2c\xaf\xf2\xa3\x2d\x1f\x39\xaa\x54\xb7\x35\x85\x55\x5d\xe0\xb4\x23\x1c\x6a\xa4\xcf\x31\xf4\xf5\x04\xd8\xce\xbb\x39\xcd\xcb\xab\xbc\x93\xee\x19\x71\x01\xbe\xc5\xfb\x09\x00\x00\xff\xff\x47\x1a\xe0\x6a\x85\x02\x00\x00")

func commonEtcAzsecAzsecmonAuditRulesBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcAzsecAzsecmonAuditRules,
		"common/etc/azsec/azsecmon-audit.rules",
	)
}

func commonEtcAzsecAzsecmonAuditRules() (*asset, error) {
	bytes, err := commonEtcAzsecAzsecmonAuditRulesBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/azsec/azsecmon-audit.rules", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcDefaultMdsd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xdf\x8f\xe2\x36\x10\x7e\xcf\x5f\x31\x82\xea\xf6\x4e\x22\x09\x74\x7f\x74\x77\x25\x54\x21\x36\xa0\xa8\x40\x28\x70\xa7\xf6\x09\x39\xf6\x24\x71\x31\x76\x6a\x4f\xe0\xe8\x6a\xff\xf7\xca\x81\xd5\x55\xbd\xee\xe9\x1e\xfa\x12\xc5\x3f\xe6\x9b\x6f\xbe\x6f\xc6\x5d\xc8\x6a\x92\x46\x3b\x28\x8c\x85\xbd\x70\x22\xe8\xc2\xb8\x42\xbe\x83\x2b\xbf\x82\xb0\xba\x6a\x8f\x04\x12\x93\xca\x45\x41\x30\x7f\x5a\x3f\x6d\x57\xd9\x2c\xd9\x2e\x57\xc9\x24\xfd\x6d\x18\x1f\x98\x8d\x6d\xa3\x63\x1f\x10\x0b\x2c\x58\xa3\xe8\x7c\x2d\x5b\x6e\xd2\x6c\xb1\x1e\x76\x42\x01\xe1\x08\x42\x0b\x3f\x3c\xff\x3b\xfe\x05\xc2\x02\x6e\xfb\xfd\x41\x27\x08\xba\x90\x16\x40\x95\x74\x20\x1d\xf0\x8a\xe9\x12\x45\x0f\x98\x72\xe6\xb2\x82\x18\x89\xc7\xca\x94\xd6\x10\x23\x8c\x44\x9b\xf4\x9c\x6c\x96\x4d\xcf\x5c\x94\x29\x3d\xd4\xcc\x30\x01\x4c\x29\xd8\x69\x73\xd4\x30\x1e\xb9\x00\x3f\xd7\xc6\x12\xac\xd7\xb3\xed\x38\x59\x6d\xb6\x93\x74\x96\x0c\x5b\xc8\x7a\x27\x63\x52\x2e\xe6\x68\xc9\xc5\x9c\x85\x79\xa3\x85\xc2\x88\x5b\xf2\x58\xab\xe4\xd7\x8f\xe9\x2a\x79\x0a\xba\x30\x45\x8d\x07\x06\xa8\x0f\xd2\x1a\xbd\x47\x4d\x11\x24\x9f\xd9\xbe\x56\xe8\x1e\x61\x83\x8e\x7a\x30\x91\xd6\xd1\x92\x59\x3a\x2d\xad\x11\x3d\x78\x92\xac\xd4\xc6\x91\xe4\xce\x6f\x04\x5d\x98\x18\x0b\x54\x21\x14\x8d\x52\xa0\xa4\x23\x30\xc5\x3f\x31\x5d\x0f\x1c\xe2\x63\xd0\x85\x8a\xa8\x76\x8f\x71\xfc\x07\xb3\x07\xe9\xc2\x23\x3a\x8a\x04\x8f\x98\x88\xf6\xae\xa0\x48\x23\xc5\x3f\xd7\xac\xc4\xa1\x30\xbc\x69\x43\xdf\x39\xe4\xde\xd4\xe1\xe0\xfa\xee\x5a\xb0\xfe\x20\xcc\xef\x50\x84\x37\xd7\xe2\x26\x7c\xf8\xa9\x8f\x61\x71\xff\x90\xf7\x07\x03\x71\xfb\x30\x28\xde\x49\x31\x14\x83\x7b\xd6\xe7\x22\x0f\x31\xef\x63\x78\x73\x7f\x9b\x87\xf9\x20\xcf\x43\x9e\xe7\x77\xfd\xbb\x07\x71\x7d\xfb\x63\x1e\x74\x5f\xd5\x9b\x67\x8b\x74\x93\xad\xd2\xc5\x74\x3b\x1d\xaf\xb7\xc9\xe2\x53\xba\xca\x16\xf3\x64\xb1\x19\x3e\x3f\x43\x34\x36\xba\x90\x65\x74\x96\x69\x66\xca\x52\xea\x72\x6c\x34\x59\xa3\x96\x8a\x69\x4c\xbe\x14\x09\x2f\x2f\xff\x2d\xee\x88\x73\xd3\x68\x02\xcd\xf6\xf8\x66\xe2\xd1\x78\x9c\x7d\xfc\xce\xa4\xaf\x80\x5f\x25\xdc\x54\x08\x16\x4b\x69\x34\x4c\xc7\x6b\x70\x95\x69\x94\x80\xc6\x21\x1c\x2b\xd4\x20\xc9\x77\x3e\xda\xbd\xd4\xe8\xe0\x58\x49\x5e\x81\x23\x63\x59\x89\xc0\x2e\x98\xdc\xa2\x40\x4d\x92\x29\xe7\xef\x5f\x20\x2c\x52\x63\x35\x90\x81\xf9\x28\x02\x8c\xca\x08\x3a\xde\xbb\xc6\x75\x7a\xd0\x41\xd6\xfe\x45\x97\x92\x2d\x53\xea\xd4\x03\x49\x57\x0e\x72\x74\xe4\xc3\x4c\x4e\x4c\xea\xf3\x34\x1c\x98\x6a\x10\x8c\x6e\x5b\xe6\xd3\x1c\x2a\xdf\x4b\xba\x6c\x97\xac\xf4\x4a\xe6\x27\xf8\xb3\x41\x7b\x7a\xdd\x1d\xfd\xd5\x58\x84\x54\x3b\x62\x9a\x23\xcc\x91\x98\x60\xc4\x60\x8d\xf6\x20\x39\xc2\xfb\x74\xfe\xb4\xfe\xd0\x8e\xb6\xbf\xde\x51\x86\x33\xdf\x33\x9d\x4b\xae\xf7\x0e\x11\x58\x6e\x0e\x08\xdc\x08\x04\xa7\x65\x5d\x23\x7d\x88\xde\xb4\x63\x95\x4c\xd3\x6c\xf1\x5d\x6e\xac\xce\x82\x7f\x65\xc6\xc4\x0f\x43\xcd\xa8\xf2\xf5\xd7\x4d\xae\x24\x07\x3f\x90\xb2\x90\x9c\x11\x42\x21\x15\x7a\x6f\x84\x3f\x67\x0d\x55\x5e\xf6\xf6\xa4\x7d\xab\x8e\x92\xaa\xb3\x8b\xe7\x22\xdf\xe6\xda\x0e\xbf\xff\x7c\x79\x00\x3c\x42\x24\x62\x87\xdc\x22\xc5\x25\x77\x3e\x71\x54\xe3\xfe\x5b\x1c\xbd\x74\xb5\x95\x07\x4f\x61\x87\xa7\xff\x99\xe0\x2f\xc9\xef\xdf\xe0\xb7\xc3\x53\x4b\xef\xef\x00\x00\x00\xff\xff\x9d\x6b\x10\x04\xc3\x05\x00\x00")

func commonEtcDefaultMdsdBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcDefaultMdsd,
		"common/etc/default/mdsd",
	)
}

func commonEtcDefaultMdsd() (*asset, error) {
	bytes, err := commonEtcDefaultMdsdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/default/mdsd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcFluentdFluentConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x4d\x6f\xdb\x46\x10\xbd\xf3\x57\x0c\xe8\x0a\xb5\x0d\xf1\x4b\x96\x23\x9b\x10\x9c\x0a\x8a\xd2\xea\x60\x47\xa8\x94\x43\x1b\x04\x8b\x15\x77\x48\x6e\xb4\xdc\x65\x76\x87\x4a\x85\xa2\xff\xbd\x20\x29\x59\x01\x0c\xdf\x7c\x5b\xbd\x79\xf3\x66\xde\x68\x86\x17\xf0\xd1\x58\xb0\x98\xa3\x45\x9d\x21\x28\x63\x76\xc0\x09\xa8\x44\xc8\x55\x83\x9a\x04\x08\x93\x39\x28\xd1\x62\x0a\x25\x51\xed\xd2\x28\x6a\xa1\xf0\x18\x0f\x8d\x2d\xa2\x7d\x14\x87\xc9\x28\xf2\xa6\xce\x34\x36\xc3\x07\x0f\xe0\x37\x3a\xd4\x08\xee\xe0\x08\x2b\xe1\x01\x10\x2f\xe0\x9b\x69\xac\xe6\x4a\x78\xd3\xe8\x44\x7c\x91\x41\x5c\x2a\x0f\x20\x37\xb6\xe2\x04\xdf\x9c\xd1\x1e\x40\xcd\xa9\x84\x68\xcf\x6d\xa4\x4c\x11\x99\x1a\xb5\x2b\x65\x4e\x01\x6f\x84\xa4\xe8\x3a\x54\xa6\x68\x59\xc6\xb1\x5c\x2a\x7c\x95\x19\xd6\xc6\x79\xd0\xfa\xb5\xe8\x4a\x26\x35\xa1\xdd\x73\x05\x49\xdc\x36\x28\x2b\x64\x3b\x3c\x74\x0f\x47\xbc\xaa\x4f\xe0\xb1\x97\xc1\x5f\xc1\xa0\x0a\x06\x62\x33\xf8\x23\x1d\x3c\xa6\x83\xf5\xdf\x47\x5b\xbb\x3b\xc7\x3a\xfd\x9f\x7d\xe5\x52\x11\xda\x67\xcb\x67\x83\x16\x33\x63\x05\x23\xcb\xb5\x6b\x95\xd1\x7a\x00\xa8\xf9\x56\x21\xb3\xcd\xf6\x00\x64\x1b\xf4\x00\xa6\x3d\xb1\x4d\x04\x78\x5c\xac\xd7\xb3\xdf\x17\xf0\xcb\xbf\x3d\xfa\xc5\x3f\x22\xfe\xd7\x50\x4b\xf5\x1e\xde\x83\x96\x0a\x52\x78\x19\xce\x8d\xcd\x90\xa1\xce\x8c\x90\xba\xb8\xf4\x3f\x6f\x3e\x06\x77\xfe\x55\xd8\x21\x78\xe9\xcf\xd6\xf3\xe5\xd2\x1f\x82\xd4\x7b\xae\xa4\x48\x21\xb5\x58\x2b\x9e\xe1\x10\x1a\x2d\x30\x3f\x03\x57\xff\x75\xbd\x5c\x80\xe0\xc4\x8f\xff\x50\x7a\x84\xba\x19\xd4\xd2\xa1\xdd\xa3\x3d\xbf\x82\xfd\xf7\x7f\x8a\x31\xdb\x35\x5b\x0c\x5a\x44\x66\x18\x64\x9c\xb8\x32\x05\x9b\x8c\x32\x1c\x8b\xc9\x4d\x70\x3b\x1a\x8d\x83\x24\xc1\xfb\xe0\xfe\x4e\xc4\x41\x1c\xc7\xe2\x86\x27\xf7\xef\x26\xb7\xef\x58\xdc\xe9\xcf\x3f\x3d\x6d\x66\xcb\xa7\xc5\x9f\x3f\x0d\xe0\x19\x63\x4f\xb3\xc7\x57\xe7\xf0\x82\xe5\x6a\x25\xe9\xd2\x67\xfe\xd5\x97\xe4\x2b\xf4\x8e\x56\x9f\x3e\xbc\xa9\xf0\xe8\x24\xdc\x86\xd6\xab\xd9\x7c\xf1\xa6\xf2\x37\x27\xf9\x33\x69\xf9\xb6\x06\xc6\x7d\x85\x69\x74\xda\xc1\x69\xd4\xef\xf3\x83\x37\xad\x38\x65\x25\x5c\x5f\x9f\x37\x3a\x37\xf6\x07\xb7\xed\x91\x6f\x9b\x3c\x47\xcb\x3a\xb4\xc2\xca\xd8\xc3\x19\xfc\xde\x60\x83\x2c\x6f\x94\x62\x3c\x23\x69\x34\x6c\x95\xc9\x76\x1e\x80\x90\xae\xdf\x7e\x24\x7b\x60\x4a\x56\x92\x4e\x47\x70\x01\x02\x73\xde\x28\x82\x12\xb9\xa5\x2d\x72\x02\xe9\xe0\xf3\x87\xd5\x10\x7e\x94\x32\x2b\xa1\x12\xae\xfd\x46\xa1\xd3\xbf\x12\xb8\xa6\xae\x8d\xa5\x21\x70\x2d\x60\x33\x5f\x41\x69\x0a\x07\x99\xd1\x1a\xbb\x92\xae\x0b\x54\x7c\x87\x0e\x24\x81\x36\xd2\xb5\x1d\x3e\x6b\xf7\x9d\x6b\xa3\xbb\x03\xec\x57\xb8\x3f\x40\xcd\x2b\xec\x6a\x75\xbf\x4a\xe3\x08\x92\xd1\x24\x8c\xc3\x38\x4c\x3a\xa8\xad\x0b\xb7\x71\x9c\x74\x73\x3b\xa5\x4e\xa3\x6e\x5c\x0f\xde\xff\x01\x00\x00\xff\xff\xc8\x3e\xbe\x47\x6a\x05\x00\x00")

func commonEtcFluentdFluentConfBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcFluentdFluentConf,
		"common/etc/fluentd/fluent.conf",
	)
}

func commonEtcFluentdFluentConf() (*asset, error) {
	bytes, err := commonEtcFluentdFluentConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/fluentd/fluent.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcMdsdDMdsdXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x98\xdf\x4f\xe3\x46\x10\xc7\xdf\xef\xaf\x58\xed\x3b\xb1\x01\x55\xe5\x4e\x76\x4e\x21\xa1\x47\xd4\x04\x51\x42\xab\xaa\x2f\x68\x58\x4f\xcc\x16\x7b\x36\xda\x1d\xe7\x08\xd7\xfb\xdf\x2b\xff\x4a\xec\x70\xa0\x58\x17\x22\xf1\x90\xfd\xf1\x9d\xf9\xec\xcc\xce\x6c\x48\xf0\xf9\x29\x4d\xc4\x12\xad\xd3\x86\x42\x79\xdc\xf3\xa5\x40\x52\x26\xd2\x14\x87\x32\xe3\xf9\xd1\x99\xfc\xdc\xff\x10\x4c\x0d\x69\x36\x56\x53\x3c\x05\x82\x18\x53\x24\xde\x92\x11\xa4\xe8\x16\xa0\x30\x94\xdf\xbe\x89\xde\xd0\xd0\x5c\xc7\xbd\x2f\x48\xb8\x84\x89\x89\x63\x4d\xf1\x55\xbd\x45\xfc\x27\xfe\x9e\x4e\x2e\x9c\x82\x05\x8a\xef\xdf\xa5\xc0\x25\x12\xff\xb5\xb6\x27\x05\xeb\x14\x1d\x43\xba\x08\xe5\x89\x7f\xfc\xeb\x91\x7f\x76\xe4\x1f\xdf\xfa\xfe\xa7\xe2\xaf\xe7\xfb\xfe\x3f\xb2\xff\x41\x08\x21\x82\x81\x52\x26\x23\x76\xe5\xb0\x39\x25\x52\x43\xfa\x11\xed\xeb\x44\xf5\xc6\x6d\x1e\xed\x46\x38\x87\x2c\xe1\x50\xb2\xcd\x50\x0a\xc8\xd8\xfc\x8e\xab\x50\xce\x21\x71\x28\xbd\xca\xb7\xd7\x76\x1e\x34\xa2\x53\x1e\xc9\x24\x59\x8a\xa1\x9c\x80\x8d\x51\x8a\xa8\x34\x7a\x83\x8c\xc4\xda\xd0\x98\x46\xb0\x72\xa1\xfc\xe8\xcb\x06\xfd\x38\xca\x57\x79\x25\x18\x09\x88\xf3\xa8\x0d\x12\x0d\x2e\x94\x37\xe8\x4c\x66\x15\xe6\x53\x0d\x45\x4b\x35\x34\xe9\xc2\x50\x4e\x90\x67\x24\xd7\xc4\xda\x90\xec\x57\x21\x60\xd0\x84\x76\x86\x76\xa9\x15\xf6\x26\x46\x41\x0e\xb2\x15\x80\xc0\x7b\x61\x6d\x47\x6f\xb3\xec\xde\x29\xab\x17\xc5\xe9\xa2\x57\xbc\x5e\x5b\xb3\x40\xcb\x1a\x5d\x6f\xf0\x7c\x6d\xcd\x5c\x27\xd8\x6b\x29\x47\x7b\x03\xaa\x43\xf6\xc5\x9a\x6c\x51\xc6\x2d\x67\x1a\xa1\xd5\x4b\x8c\x7a\xc3\xcc\xb1\x49\xd1\xb6\xb6\xfd\x00\xf9\x1d\x88\x36\x30\x2f\xbc\xe5\x4b\xfb\xf3\x67\x92\xca\x4f\xfe\xe9\xa7\x4d\x8d\xc9\x31\x90\x42\x29\x32\x87\xf9\x86\x8c\xd1\x5e\x15\xcb\x45\xa9\x78\x8d\x9b\xbc\x76\xd4\xac\xcd\x18\x89\xeb\x18\xfc\xe9\x20\x46\x11\x69\xf7\xf8\x47\x66\x18\xc6\x34\x3d\x0f\xe5\x2f\xbe\xef\xfb\x9b\x12\xdb\xd4\x54\x35\x33\x53\x0f\x98\x42\xb3\xde\xcb\x99\x0a\x12\x9e\x1d\xaa\xe5\xf1\x76\x7d\x0c\xf3\x52\xa4\x6a\xcf\x6f\xa0\x74\xa2\x79\x25\x45\x1a\x39\x5e\x2d\x30\x94\x29\x7f\xfa\xea\xd8\x4a\x51\x0e\xf3\x8f\xfd\xc0\x2b\x55\x6f\x99\x9a\xe1\x12\xed\x0b\x53\x9a\xf8\xf4\xa4\xb3\xad\x8b\xbc\x67\xdc\xea\x14\xdb\xc6\x32\x56\x0d\x53\x47\x76\xae\x4e\x4f\x4f\x3f\xee\x8a\x47\x79\x33\xbf\x34\x8e\xf7\x70\xd8\xa9\x8b\x3b\x5b\x09\xbc\x32\x3d\x6f\xe7\xeb\xe4\xcd\x7c\x0d\x9e\x67\xa8\xc6\xa3\x7d\xa4\x4b\x01\x15\x95\xf7\xf3\xa6\xde\x21\x5b\x23\x60\xd8\x03\xd9\x35\x58\x1e\xe6\xef\xd2\x3e\x2e\x65\x6e\x6c\x4c\x11\x3e\x75\x37\xd6\x4e\x7d\x3d\xaa\x1f\xcb\x59\xd1\x02\x5a\x75\x5c\xcc\x54\x7e\x1f\x10\x2c\xdf\x23\xb0\x14\xae\xd0\x6d\x4a\xdb\x7b\x4d\x73\x0f\x0e\x13\x4d\xd8\x41\xe2\xcc\x9c\xbf\x82\xed\x22\x51\x09\xa4\xb0\xec\xe2\x43\x01\xdd\x15\x5f\x08\xb6\x45\x27\xaf\x8b\x20\x41\xdb\x69\x7f\x16\x69\x96\x22\x5a\x11\xa4\x5a\xdd\xd5\xba\x17\x4d\xb9\x25\xfa\xd7\x64\x96\x20\x89\xba\xea\x1e\xcf\xdc\xdd\x0e\x0e\x03\xaf\x95\xe4\xa0\x28\x99\x66\xc6\xa7\x91\x8b\xb6\x27\xdb\x0b\x95\xdb\xf2\xbd\x68\xde\x8a\xb6\xa0\x10\xdd\x98\x8c\xb1\x50\x95\x5f\xbf\xca\x67\x69\xa2\x29\x7b\x1a\xb8\xf4\xb2\x71\xa1\xd8\x58\xbc\x2d\xae\xee\x10\x89\x2d\x24\xe7\x86\x22\x29\x16\x56\x9b\xbc\x99\x87\xf2\xca\xd8\x14\x92\x66\x00\xca\xf3\x6c\x71\xed\x48\xbd\xbe\x97\x9d\xa1\xcf\x37\x37\xfa\xc0\xcc\xeb\xc2\xe8\xcc\x3c\xdb\x94\xd4\x81\x99\xab\xca\xec\x4c\x3c\xac\x2b\xfa\xd0\x31\xde\x34\x86\xee\x51\x56\x40\x17\x55\x4f\x39\x30\x76\xd9\x9a\x3a\x13\x0f\xaa\x8e\x76\x68\xda\xa2\x4f\x75\xa7\x2d\xdb\xdb\xa1\x69\xd7\x1d\x79\x67\xe0\xfa\x7f\x98\xd9\xca\x25\x26\x2e\xbb\xe9\x2e\xdc\x97\x3a\x7e\xd8\x17\xf5\xe6\x3d\xe8\x8c\x5d\xc4\x79\xf2\x8e\xe0\x8d\xa5\xfa\x1d\xf2\xea\x51\xe0\xfd\xe8\xa7\x8d\xfe\x87\xff\x03\x00\x00\xff\xff\xd0\x0e\x95\x1b\x19\x11\x00\x00")

func commonEtcMdsdDMdsdXmlBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcMdsdDMdsdXml,
		"common/etc/mdsd.d/mdsd.xml",
	)
}

func commonEtcMdsdDMdsdXml() (*asset, error) {
	bytes, err := commonEtcMdsdDMdsdXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/mdsd.d/mdsd.xml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcMdsdDSecretGcscertPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x2e\x29\xca\xcc\x4b\x57\xd0\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\xa7\xe6\xa5\x96\x25\xfa\xe4\xa7\xa7\x67\xe6\x41\xa4\x34\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xdf\x9d\x46\xf8\x43\x00\x00\x00")

func commonEtcMdsdDSecretGcscertPemBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcMdsdDSecretGcscertPem,
		"common/etc/mdsd.d/secret/gcscert.pem",
	)
}

func commonEtcMdsdDSecretGcscertPem() (*asset, error) {
	bytes, err := commonEtcMdsdDSecretGcscertPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/mdsd.d/secret/gcscert.pem", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcMdsdDSecretGcskeyPem = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x2e\x29\xca\xcc\x4b\x57\xd0\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4f\xcd\x4b\x2d\x4b\xf4\xc9\x4f\x4f\xcf\xcc\x4b\xd7\xf3\x4e\xad\xd4\x54\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x8c\x06\x2c\x55\x48\x00\x00\x00")

func commonEtcMdsdDSecretGcskeyPemBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcMdsdDSecretGcskeyPem,
		"common/etc/mdsd.d/secret/gcskey.pem",
	)
}

func commonEtcMdsdDSecretGcskeyPem() (*asset, error) {
	bytes, err := commonEtcMdsdDSecretGcskeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/mdsd.d/secret/gcskey.pem", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcAroAdmissionControllerAroAdmissionControllerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcb\x41\xaa\xc3\x20\x10\x00\xd0\x7d\x4e\x21\xae\xfe\x27\xa8\x7b\xaf\x12\x92\x30\x9d\x4e\x13\xa9\x55\x3a\x33\x41\x52\x3c\x7c\xa1\x8b\x2e\xba\x7d\xf0\xda\x9e\x94\x72\x12\x8d\x83\x31\xce\xd8\x85\x69\x4b\xa2\x7c\x3a\x38\x74\xf7\xda\x92\x68\xae\x78\xf7\x58\x1f\x41\xdb\x3a\x2d\x61\x1e\xc3\x97\xc3\x04\xee\xb5\xba\x79\x8c\xf6\xe7\x7b\x78\x1e\x20\x84\x9f\xf8\x87\xb5\x48\xcd\xd4\xa9\xdc\x2a\x23\x71\xbf\x82\xc2\x05\x84\xfa\x06\x4a\x0d\xce\x2e\x08\xa5\x10\xff\x47\x3b\xbc\x03\x00\x00\xff\xff\x29\x19\xc1\xe9\x94\x00\x00\x00")

func masterEtcAroAdmissionControllerAroAdmissionControllerYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcAroAdmissionControllerAroAdmissionControllerYaml,
		"master/etc/aro-admission-controller/aro-admission-controller.yaml",
	)
}

func masterEtcAroAdmissionControllerAroAdmissionControllerYaml() (*asset, error) {
	bytes, err := masterEtcAroAdmissionControllerAroAdmissionControllerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/aro-admission-controller/aro-admission-controller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdCaCrt,
		"master/etc/etcd/ca.crt",
	)
}

func masterEtcEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x51\x4f\xc2\x30\x14\x85\xdf\xfd\x15\xfc\x00\x65\x63\x22\x38\x92\x3e\x94\xee\x1a\x1a\x4a\xd1\xee\x8e\x84\xa7\x66\x62\x13\x8d\xa2\x64\xab\x24\x86\xf0\xdf\x0d\x2d\xc2\x1c\x23\x6c\xd9\x4b\xcf\x77\x6e\x77\xee\x01\x64\x89\xa6\xc9\x0c\x14\xf2\x14\x34\x13\x1c\x24\xea\x4c\x89\x94\xbc\x5a\xbb\x2a\x07\x41\xb0\xd9\xb4\xda\xa3\xaf\xd2\x7e\xe6\x4b\xd3\xda\x6e\x07\xd1\x6d\x3f\xbe\x72\x3e\x06\x0a\xf5\x03\x17\x40\x02\x63\x17\xbb\xef\x25\x28\x4d\xb1\x36\x45\x7b\x51\xd8\x3d\xe3\x27\x3a\x94\x66\x38\x22\xb6\xf8\x36\x5e\x4a\x28\x52\x9d\x70\x45\x82\x75\x5e\x04\x1f\x6f\xcf\x6e\x82\xd7\x40\x00\x43\x3e\x95\x1a\xf9\x04\xa6\x19\x92\xe8\x2e\x0c\xbd\x34\x02\xaa\x70\x08\x14\x35\x97\x08\x6a\x46\x05\x39\x68\x5c\x72\xe4\x54\x54\x12\x3d\x02\xa8\x4b\x79\xee\x6b\x6e\x26\xb2\x14\x41\x91\x65\x5e\x5a\x53\xdc\x84\xee\x39\xf8\xff\x9d\x3a\xf7\x75\xf5\xa8\xd3\x08\x76\x4e\xc1\xa8\x11\x8c\x2a\xff\x33\x86\xf9\x99\xf5\xbe\x9b\x1f\x8f\x08\x9e\x22\xc8\xc6\xde\xc2\xb6\x7b\x2b\x7d\xed\xe1\xd3\x95\x1c\xd1\xbf\xab\x25\x9d\x00\xa9\x6d\xca\x2b\xce\xdd\xd4\xfc\xca\x54\x7b\xf7\xd8\xf9\xf2\x9d\xde\x10\xd0\x4d\x39\xc4\x73\x14\xaa\x5d\x1d\x89\x66\xb4\x0e\x2f\xf2\xe3\x85\x4f\xd9\x14\xa9\x1e\x52\x36\x06\x99\xe8\xe1\x1c\x21\x25\xdd\x28\xee\xc6\xbd\x7e\x14\xf7\x3c\x73\x71\xd2\x6f\x00\x00\x00\xff\xff\x27\xa7\x9b\x77\x0f\x03\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\x81\x45\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func masterEtcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerCrt,
		"master/etc/etcd/peer.crt",
	)
}

func masterEtcEtcdPeerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x48\x4d\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func masterEtcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerKey,
		"master/etc/etcd/peer.key",
	)
}

func masterEtcEtcdPeerKey() (*asset, error) {
	bytes, err := masterEtcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\x81\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func masterEtcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerCrt,
		"master/etc/etcd/server.crt",
	)
}

func masterEtcEtcdServerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x09\x4e\x2d\x2a\x4b\x2d\xd2\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func masterEtcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerKey,
		"master/etc/etcd/server.key",
	)
}

func masterEtcEtcdServerKey() (*asset, error) {
	bytes, err := masterEtcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\x64\x82\x2e\x51\xaf\x82\xd0\x09\x8a\xfd\x4a\x40\x12\xf8\xd6\x5c\x6a\x77\xf7\x8d\x21\x69\x05\x35\xd0\xd2\x56\x9f\x0e\xe6\xdb\xdf\xb6\xd3\x43\x1b\x98\xdd\x4e\x49\xd9\xad\x57\x35\xb0\x80\xa1\x07\xe4\x93\xd2\xa9\x76\xc9\x9c\xcb\x1f\x00\x00\xff\xff\x93\xa5\x60\x70\x42\x00\x00\x00")

func masterEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginCloudproviderAzureConf,
		"master/etc/origin/cloudprovider/azure.conf",
	)
}

func masterEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := masterEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xe4\x66\xe6\x81\x85\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x21\x3e\xf2\xe6\x3b\x00\x00\x00")

func masterEtcOriginMasterAdminCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminCrt,
		"master/etc/origin/master/admin.crt",
	)
}

func masterEtcOriginMasterAdminCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4c\xc9\xcd\xcc\xd3\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x26\xc6\x1f\xc6\x40\x00\x00\x00")

func masterEtcOriginMasterAdminKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKey,
		"master/etc/origin/master/admin.key",
	)
}

func masterEtcOriginMasterAdminKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKubeconfig,
		"master/etc/origin/master/admin.kubeconfig",
	)
}

func masterEtcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdmissionWebhookKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xcd\xb1\x4e\xc3\x30\x14\x85\xe1\x3d\x4f\x71\x5e\xc0\x96\x90\x10\x83\xb7\xd4\x62\xea\xc2\xc4\x6e\x9c\x53\x64\x35\xb1\xe1\xde\x9b\x48\x56\xdb\x77\x47\xad\x04\x65\x62\x60\xff\xcf\xf9\xd2\x47\x79\xa5\x68\x69\x35\x60\x7b\x18\x56\xa5\x68\x18\x1c\x6a\x5a\x18\x90\xa4\xb9\x34\x2d\x45\xaf\x81\xcb\xad\x9a\xb4\x79\xa6\xf8\xe3\xfa\x46\xa7\x5d\x8d\x8b\xd7\x2d\x0f\xc0\x75\x19\x06\x00\xc8\x73\x61\x35\x97\x29\x56\x0e\x25\x27\xa3\x9b\x92\xa5\x80\xd3\x09\x91\x62\xa3\xee\xba\x51\xe1\x63\xab\x87\xf2\xee\xe3\x3d\x54\x3f\x4a\x1b\xbf\xc1\xf8\xe3\xc5\xdb\xe5\xad\xc4\x19\xbb\xa4\x7c\x7a\x7c\xae\xb9\x4d\xc4\x19\x9f\x6b\x33\xe2\x72\xf9\x8d\x1f\xd9\xef\xe8\x8b\x94\x2d\x19\xf7\xec\xff\xa7\xf7\xec\x7f\xc8\x5f\x01\x00\x00\xff\xff\xab\xbf\x56\xf4\x46\x01\x00\x00")

func masterEtcOriginMasterAdmissionWebhookKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdmissionWebhookKubeconfig,
		"master/etc/origin/master/admission-webhook.kubeconfig",
	)
}

func masterEtcOriginMasterAdmissionWebhookKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdmissionWebhookKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admission-webhook.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\xa6\xa7\x17\xa5\xa6\x27\x96\xe4\x17\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x82\x55\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyCrt,
		"master/etc/origin/master/aggregator-front-proxy.crt",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x00\xd0\xfb\x9f\x22\x13\x64\x07\xbf\xd0\x8b\x17\xa1\x13\x48\x89\x21\x17\x03\x31\x94\x06\xeb\xee\x7d\x6b\x41\x35\xb9\x9b\x53\xa1\x48\xf3\x1f\x4e\x13\x30\xeb\xe8\xc2\x98\xc9\x5c\xba\x5c\xcd\x69\x62\x62\x36\xe2\xe6\x6a\x87\xe9\xf0\x6a\xfa\x04\x16\x0a\x78\xe1\x74\x93\xc1\xb0\xf7\xef\x0b\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyKey,
		"master/etc/origin/master/aggregator-front-proxy.key",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaBundleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\xe4\xa8\x97\xee\x60\xe3\x06\x9d\xa0\xd8\x8f\x06\x24\x42\x1a\x0b\x52\xbb\xbb\xaf\x77\x62\x98\xf3\x99\x45\xd7\x1a\x5f\x47\xa5\x39\x6c\x30\x69\x28\x81\x73\x7c\xb4\x5c\xa0\xc0\xb7\x7a\x16\x85\x25\x58\x93\x1d\x0b\x7d\x94\xdc\x44\x0f\x1a\x63\xfa\x03\x00\x00\xff\xff\x01\x5e\x1d\x24\x46\x00\x00\x00")

func masterEtcOriginMasterCaBundleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaBundleCrt,
		"master/etc/origin/master/ca-bundle.crt",
	)
}

func masterEtcOriginMasterCaBundleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaBundleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca-bundle.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaCrt,
		"master/etc/origin/master/ca.crt",
	)
}

func masterEtcOriginMasterCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x4e\xd4\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func masterEtcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaKey,
		"master/etc/origin/master/ca.key",
	)
}

func masterEtcOriginMasterCaKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterClientSecret = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc7\x31\x0a\x42\x31\x0c\x06\xe0\xdd\x53\x64\xd4\x25\x78\x05\x71\x72\x2b\xbc\x13\x48\xfb\x8b\x01\x49\xe4\x6f\x2c\x4a\xe9\xdd\x9d\xde\xf8\xcd\x29\x47\xf3\x86\xaf\xe8\x35\x3c\xef\xe6\xe0\x06\x0e\xab\xd0\xc2\x78\x83\x69\xe8\x7a\xf9\xe4\xb3\x30\x1e\xf6\x82\xde\x1a\x3c\x2d\x7f\x85\x31\xac\x81\x5d\xce\x27\xdd\xa1\x1b\x2a\x91\xb2\xd6\xe1\x1f\x00\x00\xff\xff\x71\xa0\xdf\x27\x5b\x00\x00\x00")

func masterEtcOriginMasterClientSecretBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterClientSecret,
		"master/etc/origin/master/client.secret",
	)
}

func masterEtcOriginMasterClientSecret() (*asset, error) {
	bytes, err := masterEtcOriginMasterClientSecretBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/client.secret", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x15\xe5\xe7\x95\x04\x14\xe5\x57\x54\x3a\x27\x82\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func masterEtcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterFrontProxyCaCrt,
		"master/etc/origin/master/front-proxy-ca.crt",
	)
}

func masterEtcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5b\x8f\xdb\xba\x11\x7e\xd7\xaf\x20\xfc\x92\xb6\xa8\x24\xef\xe6\x2e\xa0\x0f\xee\x6e\xd2\x63\x9c\x64\xe3\xae\x93\xd3\x02\x45\x51\xd0\xe4\x58\x66\x4c\x91\x0a\x2f\xce\xfa\x6c\xf7\xbf\x17\xbc\x48\xa2\xb4\xde\x24\x0d\xd2\xe2\x38\x0f\x59\x71\x2e\x1c\xce\x0c\xbf\x99\x21\xa6\x0d\xd3\x9a\x49\x71\x21\xc5\x96\xd5\x55\x86\x50\xcb\x6d\xcd\x92\x6f\x84\x2e\x41\x1c\x5f\x69\x82\x39\x36\x4c\xd4\xaf\x6e\x80\x84\x75\x84\x88\xe7\xb2\x0a\x1b\x26\x45\xb7\x88\xd0\x9e\x09\x5a\xa1\x4b\xd8\x62\xcb\xcd\x62\xbc\x45\xcf\x84\x5b\xf6\x0b\x28\x47\xa8\xd0\xe1\xac\x5f\xa6\x4c\xe3\x0d\x87\x0a\x19\x65\xc1\xaf\xfe\x82\x39\xa3\x7e\xeb\x5e\xd5\xdf\x60\xb3\x93\x72\xff\x15\x33\xd2\x1d\x70\xcb\x34\xa8\x03\xa8\x22\x30\x17\xfb\x17\xba\x60\xb2\x3c\x9c\x61\xde\xee\xf0\xb0\xff\xde\x6e\x20\x58\xfa\x9a\x39\x33\x4a\x30\xa4\x94\x8a\xd5\x4c\x94\x0d\xd6\x06\x54\xd9\x3b\x2d\xff\x1c\xec\x28\x9c\x10\x19\x1f\x2f\xf8\x20\x1a\xda\x1b\xee\xc9\x7f\xb6\x8c\xd3\xe8\x1d\xfd\x5f\x9c\x21\xf1\x12\x88\x43\x85\xfe\xf1\xcf\xc9\x6e\x23\xc5\x13\x77\x2b\xd0\xd2\x2a\x02\x7a\xd0\x8d\x10\x67\x0d\x33\xba\x42\xb7\x77\xc9\xa2\x82\x4f\x16\x74\xb2\xec\xd5\xbe\x3b\x80\x52\x8c\xc2\x77\x1a\x9c\x18\xd8\x6b\x4a\x2c\x94\x2d\x08\xbd\x63\x5b\xe3\x62\xb2\x6c\x70\x0d\x2b\xc9\x19\x39\x7e\xa7\x77\x6e\x80\x58\xc7\x79\x6d\x79\x7a\xe0\x1c\x35\xd8\x90\x9d\xd7\xbf\x10\x42\x1a\xaf\x6e\xe4\x91\x1c\xed\xe1\x58\x21\xe6\x58\x74\x31\x32\x8b\x82\x38\xe6\xbd\xea\x44\x06\xa1\x03\xe6\x16\x2a\xf4\xc8\xe5\xec\xa3\x84\x22\x70\x03\xd5\x60\x4e\x4e\x41\x30\xa0\x09\x83\x14\xd7\xa7\xe2\x92\xf7\xe1\xaa\x50\x2b\xa9\x7e\x80\xb4\x71\xee\xd4\xa3\xd0\x7d\x04\x62\x92\xbb\x13\x7e\x7a\xcf\xda\x77\x7e\x27\xee\xed\x78\x8d\x19\xb7\x0a\x26\x7c\x21\x44\x89\xf3\x63\x7c\xb0\xa5\xcc\x0c\x78\x00\xc2\xdd\x4f\xda\x0b\x7b\xb2\xbb\x2b\x2b\x6c\x76\x15\x2a\x0f\x58\x95\x5c\xd6\x65\xef\xbb\xdc\x73\x4c\xbf\x0b\x2e\x5d\xe8\x1b\x7c\xc3\x1a\xdb\x5c\x83\xc1\x4c\x00\x75\x7a\x74\x85\xce\xe6\x19\xae\x6b\x05\x35\x36\x52\x25\xd0\xa4\xe4\xcd\xf1\x82\x33\x10\x66\x29\xb6\x32\x78\x8c\x80\x32\xe1\xaa\x0e\x22\xf9\x56\x49\x61\x72\xcf\x5f\x10\x65\x3c\xe3\x1e\x8e\x5f\xe4\xdb\xc3\x31\xc3\x2d\x7b\x03\x07\xe0\xba\xca\x72\x97\x51\x93\x04\xc3\xd6\xec\x06\x73\xe2\x45\xf9\x09\x30\x05\x15\x8d\xf1\xc6\x5d\x2c\x2a\x94\x68\xce\x09\xee\x8d\x88\x0c\xb2\x69\xa4\xb8\xc2\x4d\x17\xf6\xfc\x01\xa3\xb2\x90\xce\x46\xe1\xb0\xcb\x4a\xc1\x96\xdd\x0c\x52\x7f\xcf\xaf\xa1\x91\x06\xf2\x57\x8e\x27\xf7\xab\xb5\x92\xb6\x0d\xec\xf7\xf9\xfe\xe2\x88\x7e\xd1\x6a\x50\x2e\x3f\x1f\xe2\xfc\xa0\x41\x65\x44\x0a\xa3\x24\xe7\x90\x44\x01\x38\x90\xe1\x1a\x72\x49\xf6\x57\x3e\xcd\x87\x00\x07\x9c\xcc\x07\x61\x97\xa3\x0e\x7e\x19\x81\xb5\xfb\x4f\xd4\x17\xa0\x4c\x50\xa0\x59\x2d\x3a\xf7\xa5\xd1\x8c\xfc\x79\xa0\xf7\x0e\x4c\xe2\x38\xe1\x70\xf1\x4b\xb6\xac\xd0\xec\x0f\xb3\x8c\x48\xa5\x17\x9c\xcb\xcf\x40\xdf\x79\x10\xd7\x55\x46\x85\x1e\x4e\xb3\x61\x82\x2e\x28\x55\xa0\x75\x85\xe6\x85\xff\x57\xbd\x98\x3f\x7d\x1c\x69\x57\x60\x3e\x4b\xb5\xaf\x90\x21\xed\x93\x0c\x0c\xa1\xe3\x04\x24\xb8\x42\xe1\xbc\x85\x23\x0e\xb1\x1e\x4e\x32\x22\x7b\xe1\xc8\xd2\x9f\xe4\x04\x87\x3b\x0d\x42\x56\x71\x1f\x99\x1c\xed\x8c\x69\x75\x55\x96\xb7\xb7\xa8\xf8\x49\x6a\xe3\x42\x87\xee\xee\xaa\xf3\xc7\xcf\x5f\x7a\xb3\xd6\x46\x2a\x5c\xc3\x70\x32\x57\x94\x94\x00\x03\x3a\x92\x42\xf2\x54\x09\xa1\x60\xf2\x14\xe3\x18\x53\x5d\x5c\xd7\x2e\xae\x13\x35\x29\x38\x9e\x60\x4b\x95\x78\x38\x1d\x2c\xdb\x4a\xd5\x60\x53\x21\x77\x96\xb0\x5a\x2c\x03\xe0\xbe\xf6\x14\x74\x77\x17\x44\x52\x1c\x72\x82\x4c\x18\x97\xb4\xfc\x1a\x6a\xa6\x8d\x3a\x76\x8e\xa8\x10\x95\x64\x0f\x2a\x57\x91\x50\xd0\x50\x05\x0b\x7d\x20\xd5\xd3\xf9\x7c\x9e\x05\x74\x7b\xeb\x1d\x1d\x81\xcd\x9d\x9b\x83\xb9\x1f\xcf\x87\x63\x18\x45\xbe\x1c\xc6\x09\x53\x88\x64\x2b\x95\x71\xc0\x76\xfe\x74\x9e\x0d\x0e\x4f\xed\x71\xbb\xe3\x96\xad\x7d\x9b\xb2\x50\xb5\x6d\x40\x74\xfd\x01\xe1\xd2\xd2\x9c\x24\x4d\x59\x3e\xea\x4c\x3c\xbd\x55\xf2\xc0\xa8\x6b\x50\x7e\xb5\x0a\x7c\xa3\x93\x08\x77\xd4\x1e\x70\x1c\x53\xb8\x81\x21\x60\xf9\x06\x93\x3d\x08\xda\x31\xb8\xa4\x7a\x3c\x62\x68\x80\x32\x9c\x9b\x63\x0b\xbd\x92\xb6\xe5\x8c\xf8\x32\x5a\x1e\x04\x2d\x92\xd4\x6a\x95\x34\x72\x63\x9d\x09\xc3\xad\xfc\x7f\x1e\x8b\x70\xeb\x61\xc8\xc1\x03\x13\x75\xee\x82\x99\x6f\x5d\xa0\x4e\xec\x14\x5b\xbb\x11\x52\x8f\xc5\xf7\x70\xfc\x06\xe9\x10\xec\xf0\xbd\x5c\x55\xe8\xec\xfc\xb9\xc7\x94\xb3\xaf\x97\xaf\x98\x3d\xb1\x64\xa4\x09\x76\x3f\xc5\x46\x4c\x61\x4f\x4d\x76\x40\x6d\x8f\xd4\x0f\x76\xaf\x3d\x5f\xf1\x51\xfb\x36\x26\xc2\xa8\xbe\x92\x14\x56\x52\x99\x6b\x2c\x6a\xd7\xcc\x3c\x4a\x68\x6b\xbb\x11\xe0\xf2\xf7\xf9\x79\xf1\xd8\x63\x64\x79\xf6\x2c\x0b\x1a\xc3\x89\x7c\x44\x7b\x48\x78\x23\x65\xeb\xd2\xe9\x22\x96\x3b\x21\x42\xcd\x98\x74\x91\x98\x10\x68\x1d\xd9\x80\x30\xef\x8f\xad\xab\xfd\xdf\x90\x52\x7f\x4c\x79\xe2\x29\x10\xda\x58\xa5\x4d\x85\x9e\xcd\xe7\x59\x6c\x19\x3b\xad\xdf\xa4\xd4\x0b\x7d\x6a\x75\x85\x1e\x7b\x0d\xf7\xce\xf2\x73\x3f\x19\xdc\xaf\x75\xe9\x04\x10\x56\x56\x76\xc3\x19\xf9\x70\xfd\xc6\xc3\x5c\xab\x98\x30\x68\xd6\x81\xf8\xcc\xe3\x9e\x6f\x79\xd4\x3a\xb8\xb8\x58\x29\xd9\x82\x32\x0c\x74\x11\x64\x7b\x94\xff\x37\xfa\x64\xa5\x71\x68\x9f\x89\x50\x8d\x06\xc0\x88\x59\x1a\xab\x54\xac\x15\x84\x51\xe5\xb0\xa6\x38\x3b\x7f\x11\x62\xf5\xc4\x9f\x6e\x27\xb5\x09\x91\x7c\x03\xa2\x76\xdd\xda\xcb\xcc\xb7\x17\x1e\x54\x97\xab\xa8\xe5\x62\x79\x79\x1d\x35\xc5\x82\x58\x3a\x87\xc4\xbd\x57\x7e\x3e\x0c\x25\x5f\x01\xdd\xe1\xb4\xb5\x93\x07\x9d\x47\xbe\xd6\x63\xf7\x90\x43\x89\xf2\x69\x1e\xc9\x71\x5f\x85\xb5\x06\xf3\x03\xfd\x37\x2b\x89\x14\x5a\x72\x28\x67\xa9\x2f\x5d\xa7\x84\x85\x49\x27\xdd\x06\xcc\x4e\xd2\x0a\x61\x6b\x5c\x49\x63\x14\x84\x61\xe6\xb8\x8a\x18\x13\x9d\xc2\x65\xcd\x44\xd2\x3c\x37\xb8\x6d\x99\xa8\xdf\x46\x61\xc2\x31\x6b\xb2\xa1\xfd\xbf\xbd\x45\xbf\x63\x82\xc2\xcd\x97\x8d\x5e\x58\xb3\x5b\x29\xe9\x20\xa6\x58\x4e\x37\x46\xf3\xdf\x17\x57\x93\x5c\x70\x3b\x8c\xd1\xef\x81\x81\xc8\x1b\x94\xcc\x17\xd0\x60\xc6\xd3\xa9\xc8\x2f\xf4\xdf\x8c\xa6\x34\x6d\x37\xd9\x68\x9c\x49\x68\xee\xbb\xff\x6c\x15\x6c\x41\x29\xa0\x1f\x62\x63\x99\x72\x5a\xc1\x3e\x59\xf8\x57\x22\x10\xb0\x6b\x79\xf9\xe3\xfc\xd3\x7d\x14\x11\x62\x2f\xa7\xce\xea\x36\x5d\x03\x51\x60\x06\xf3\x3c\xaa\x47\x5a\xa1\x3d\x31\x4b\x47\xa2\x77\x2d\x88\xe5\xe5\x74\xcf\xc8\xd2\x75\x68\xd1\xff\xd6\xec\xa4\x62\xbf\xc2\xa9\xac\xf5\x79\x53\x34\x8c\x28\xa9\xe5\xd6\x48\xc1\x99\x70\xf5\xac\x29\x67\x3f\xd8\x03\xef\x41\x60\xef\x81\x59\xe9\xef\xd6\x79\xd9\x1b\x36\xbb\xef\x15\x84\x8c\xdc\x83\xf8\xad\x99\xec\x8d\x9a\x98\x1b\x2b\xce\x22\xe9\xd1\xfe\x97\x70\xdb\x69\xff\x3e\xbd\xaf\xff\x7a\x79\x35\xd6\xa6\x61\xf2\xd8\xd6\x2f\xbd\xc5\x37\x8b\x1a\xd6\xae\x86\x50\x57\x82\xba\x2a\x16\xc9\x01\x6e\xb5\x16\xe9\x62\xc8\x63\xfd\x70\xa5\x0f\x6c\x79\x48\x69\x5d\x1c\x71\xe3\x6e\xb9\xf7\x6b\x6a\x82\xab\xc2\x5a\xbf\x77\xcb\x13\x33\x5e\x3c\x7b\x12\xed\xe8\xf3\xe7\x14\xdb\xd3\xf9\x3c\x6b\x95\xfc\x08\x24\x41\xd3\xd8\x81\xbb\xae\x62\xed\x47\x46\xa9\x2a\x24\x24\x85\x5c\x49\x0e\xc5\x68\x08\x29\x89\x6c\x5a\x6b\xe0\x4f\x11\x53\xa3\xb2\xeb\x30\x60\xbf\x87\xa6\xe5\xd8\x40\x85\x66\x7d\xa5\x29\x23\x4b\x1e\x87\xf0\x99\xf7\x2e\xb1\x8a\x99\xa3\x9b\xf7\x88\x9b\xa4\x23\xa8\x13\xdd\xaf\xc4\xde\x46\xcf\xab\xf2\xbc\x23\xbe\xc1\x1b\xe0\x7a\xe5\x86\x6b\x19\x9e\x4f\x9e\x86\x01\x99\xd1\xa9\xdc\xd9\xbc\xfb\xe5\x67\x2f\xbb\x5f\xe9\x57\x33\x25\xad\x71\x83\x6d\xef\x00\x6d\x37\x54\x36\x98\x89\x6f\x86\xb8\x6b\x69\x8d\x37\xc3\xdd\x97\x70\x3d\x7c\x6a\xae\x3b\x4d\x69\x36\xc5\xb2\xba\x20\x44\xda\xb4\x8a\x35\x58\xe0\x1a\x68\xff\xb8\x90\x77\x91\xf0\x7f\xfb\x27\x23\x0f\x5e\x6e\xbd\xe5\xf2\xe8\x3f\xd2\x7b\x95\x6f\xac\xa0\x1c\xe2\xf5\x6a\x15\x3b\x60\x03\x3f\x4f\x86\x6e\x1c\xb6\x75\xed\x93\xa7\x77\x53\x8e\xb7\x37\x32\xc7\xed\xef\x49\x78\x1e\x2f\xa0\xc3\x63\x40\xd7\x0d\x9f\x9c\xc5\x9f\x3c\x39\x3d\x8a\x9f\x68\x9d\xbb\x17\xde\x30\xbb\xf5\x4f\x31\x3d\x54\x4c\xbb\xe8\xc8\xdf\xf5\xec\x37\x31\xdf\xf4\x52\xbc\xe6\xac\xde\x99\x90\xd9\xfd\x43\xcf\x7b\xd6\x80\xb4\x66\x7c\x49\x6f\x6f\x73\xc4\xb6\x48\x48\xf3\x15\x90\x09\x7e\x5a\xac\x96\x61\xc0\x0b\x80\xe0\x00\x87\x5e\x38\x96\xad\x6b\x4f\x63\x5f\x9c\x27\x47\x3b\x71\xaf\xbd\x50\xd7\xd3\x0c\x0f\x23\xfd\xe9\xbe\x2a\x12\x0e\x1c\x0b\x7a\x5f\xbd\xf2\x6e\x1e\xff\x0e\xa0\x74\x5e\x00\x41\xdd\x9f\x07\xc9\x6d\x93\x0c\xfb\xf4\x28\x70\xc3\x88\x07\x7a\x07\x47\x4c\xd4\xaf\x46\x4f\x88\xff\x09\x00\x00\xff\xff\xd2\x13\xce\x8d\x84\x18\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\x27\x82\xc5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdCaCrt,
		"master/etc/origin/master/master.etcd-ca.crt",
	)
}

func masterEtcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\x80\xc5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientCrt,
		"master/etc/origin/master/master.etcd-client.crt",
	)
}

func masterEtcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\x73\x2d\x49\x4e\x71\xce\xc9\x4c\xcd\x2b\xd1\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientKey,
		"master/etc/origin/master/master.etcd-client.key",
	)
}

func masterEtcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\x80\x15\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientCrt,
		"master/etc/origin/master/master.kubelet-client.crt",
	)
}

func masterEtcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x51\x0a\x02\x21\x10\x06\xe0\xf7\x4e\x31\x27\x98\x3b\x94\x8f\x12\x04\x9d\xc0\xe2\x57\x06\xc4\x60\xe6\x6f\x41\x5c\xef\xbe\xdf\x5a\xf2\x72\x3b\x0a\x91\x31\xef\xf1\x98\x44\x88\xa6\xdf\xa8\xd6\x34\xc1\x69\xd5\xbe\x85\x08\x7d\x96\x20\x3c\xff\x3f\xe8\x60\xea\x86\x41\xcd\x98\x72\xca\x9b\x6e\xa3\xc9\xde\xb7\x2b\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientKey,
		"master/etc/origin/master/master.kubelet-client.key",
	)
}

func masterEtcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\x80\xa5\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientCrt,
		"master/etc/origin/master/master.proxy-client.crt",
	)
}

func masterEtcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\x03\x21\x0c\x06\xe0\xf7\x4e\x91\x09\xb2\x43\xeb\xa3\x14\x84\x4e\x20\xe5\x57\x02\x87\x42\x12\x8e\x0b\x9e\xbb\xdf\xb7\x16\x15\x95\xb3\x3a\x32\xe2\x6d\x9f\x70\x18\x71\x9a\xa3\x49\xe7\x04\x75\x69\xf2\xaf\x0e\xe3\x6f\x35\x87\x16\x9d\x57\xa4\x43\x30\x9c\x33\x82\x6e\xfa\xb9\xca\xe8\xb4\xf7\xeb\x09\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientKey,
		"master/etc/origin/master/master.proxy-client.key",
	)
}

func masterEtcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\x81\x65\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func masterEtcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerCrt,
		"master/etc/origin/master/master.server.crt",
	)
}

func masterEtcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x09\xc5\x20\x0c\x06\xe0\xfb\x9b\x22\x13\x64\x87\x57\x8f\x52\x28\x38\x81\x94\x5f\xc9\xc5\x42\x12\x84\x60\xdd\xbd\xdf\x5a\x74\xa9\xcc\xea\xc8\x88\xbf\x1d\xe1\x30\xe2\xf4\x8c\x26\x9d\x13\xd4\xa5\xc9\x5d\x1d\xc6\x67\x35\x87\x16\xe8\x84\x72\x46\xd0\x4b\xc5\x55\x46\xa7\xbd\x7f\x5f\x00\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func masterEtcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerKey,
		"master/etc/origin/master/master.server.key",
	)
}

func masterEtcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x49\x64\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x38\xe7\xe7\x15\xe7\xe7\xa4\x82\x65\x8b\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xfc\x0f\x86\x36\x4c\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleCrt,
		"master/etc/origin/master/named/console.crt",
	)
}

func masterEtcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xd1\x09\xc4\x20\x0c\x06\xe0\xf7\x9b\x22\x13\x64\x87\x3b\x1f\x7d\xb8\x82\x13\x48\xf9\xb5\x81\x12\x8b\x09\x05\xb1\xee\xde\x6f\x4e\xda\xba\xdc\xd9\x11\x31\xbe\xf6\x1b\x0e\x23\x0e\x4d\x8b\x54\x0e\xe8\x2e\x45\xf6\xec\x30\xfe\x5f\xd0\x74\x48\xf1\xd0\xd4\xda\x09\x8e\x18\xf4\x50\xf2\x2e\x5a\x69\xad\xcf\x1b\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleKey,
		"master/etc/origin/master/named/console.key",
	)
}

func masterEtcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func masterEtcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterOpenshiftMasterKubeconfig,
		"master/etc/origin/master/openshift-master.kubeconfig",
	)
}

func masterEtcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x41\x6f\x1a\x31\x10\x85\xef\xf9\x15\x96\xcf\x39\x90\x1e\xb9\x01\x89\xa2\x4a\x0d\xb2\x20\xca\xa1\x55\x0e\xae\xfd\x80\x11\xc6\x43\xc7\x5e\x5a\x12\xe5\xbf\x57\x66\xc9\x16\xaa\x36\xec\x86\x9c\xd6\x3b\x9e\x6f\x76\x3c\x7e\x6f\x9f\x2f\x94\x52\x4a\xdb\x35\x3d\x40\x12\x71\xd4\x7d\xa5\x37\x57\xfa\xb2\x8e\x2f\x29\xfa\x12\x31\x1c\xc8\x6d\x5f\xa3\x6b\x81\x27\x67\x33\x92\xee\xab\x6f\xbb\x98\x52\xcf\xfb\xa7\x52\x3a\xda\x15\x0a\x35\xe6\x07\x0e\xd5\x0a\x5f\x39\x62\xc4\x71\x16\xc8\x65\xbd\x4f\x7b\xb9\xfc\x3f\x77\x67\x7f\xdd\x0c\xa7\x35\x3b\xe2\x2a\xb6\x85\x6e\x47\x37\xe6\xba\x3b\x36\x78\xaa\x04\xd7\x94\x96\x9d\xd1\xec\x16\x9f\x63\x86\x18\xf6\x83\xd9\x8c\x22\xe5\x6d\x1b\x70\xcc\xe5\x6b\x5d\x26\x72\x8b\x08\xb1\xc1\xfc\x19\x7c\x0b\xc8\xb0\xbf\xe7\x00\x29\xf9\x63\xf6\xb8\xb7\x14\x73\x2b\x72\xb4\x80\x5b\x16\xe4\x0e\x2b\x96\xad\x11\xa4\x54\x09\x3a\xa1\xe5\x88\x9d\xc1\xfa\x06\x86\x14\x3d\xc5\xf9\x5b\x94\x95\x79\xb5\x42\xcc\xba\x7f\x10\x55\x4a\x27\xc8\x86\x1c\x9a\xdb\x38\xde\x56\x4a\x07\xfb\x1d\xe1\x50\xb7\xcd\x8e\x60\x5e\xf4\x7f\x14\x7e\x3c\x78\x7b\x69\xd6\x4d\x43\x07\xed\x4f\x8e\xe8\x3a\xf7\xb1\xf1\x0b\xb1\x50\xa6\x53\x7e\x99\x22\xc0\x65\x96\xe9\x5a\x60\xbd\xa9\xa9\x57\xd7\xed\x32\x7f\x82\xe6\x8b\x72\xe8\xab\x16\x13\xfd\x5b\x9a\x67\x17\xfc\x02\x9b\xf2\x04\x3f\x2a\xa4\x8c\xf3\xfb\x1b\xda\x60\xa3\x83\x9f\x20\x71\x25\x0e\x83\x10\xd8\xd9\x5c\xc6\xf8\xde\x92\x45\x78\x46\x30\x83\x0c\x36\x4c\xde\xb0\x4f\x6f\xb7\xd9\xeb\xf5\x7a\x2d\xeb\x7e\xd8\x18\x77\x3e\xdc\x3b\x93\x38\xbe\xbb\xde\x29\x0f\xc4\x4c\x27\x7c\x50\xba\x79\xe2\x08\xdd\x5a\xe6\xe5\x57\xfe\xcf\x46\x3f\x1d\x2b\xff\xa2\xac\x7e\x07\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\x82\x65\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func masterEtcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerCrt,
		"master/etc/origin/master/service-signer.crt",
	)
}

func masterEtcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x03\x21\x0c\x05\xd0\x7d\x4f\x91\x13\xe4\x0e\xad\xcb\xd9\x14\x3c\x81\x0c\xdf\xf0\x37\x29\xc4\x20\x88\xf5\xee\xf3\xf6\x96\x6f\x70\xb6\xc4\x85\xf5\x1e\x9f\x95\x18\xa2\xe5\xe7\x9d\xa6\x05\x91\xec\xbc\x5b\x62\x68\x45\x4c\xde\xa8\x34\xa7\x5b\x69\x7a\x61\xc9\x5f\x6a\x06\xdd\xe4\x9c\xd7\x13\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func masterEtcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerKey,
		"master/etc/origin/master/service-signer.key",
	)
}

func masterEtcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPrivateKey,
		"master/etc/origin/master/serviceaccounts.private.key",
	)
}

func masterEtcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xf1\x4e\xad\xd4\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPublicKey,
		"master/etc/origin/master/serviceaccounts.public.key",
	)
}

func masterEtcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\xa5\x25\x19\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x0a\x35\x0a\x85\xa5\xf9\x25\xa9\x0a\xb5\xb5\x5c\x0a\x0a\xa9\x79\xc9\x45\x95\x05\xf8\x0d\x71\xcd\x4b\xc6\x63\x06\x20\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeCaCrt,
		"master/etc/origin/node/ca.crt",
	)
}

func masterEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeClientCaCrt,
		"master/etc/origin/node/client-ca.crt",
	)
}

func masterEtcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x73\xdb\x36\x13\xbe\xf3\x57\x60\x7c\x0e\x48\xca\xb1\xdf\xb7\x83\x99\x1c\x52\x67\xd2\x7a\xda\x71\x5d\xc9\xed\x1d\x02\x56\x12\x6a\x10\x0b\x2f\x16\x8c\xe5\x34\xff\xbd\x03\x90\xb2\xe4\x34\xce\xf4\x24\x81\xcf\xb3\x1f\x78\xf6\x03\x3a\xba\x3f\x81\x92\xc3\xa0\xc4\xb8\x68\x74\xe6\xdd\x15\x86\x8d\xdb\xaa\x46\x88\x72\x82\xc0\xce\x68\x76\x18\xae\xb4\xd9\xc1\xca\x3d\x81\x12\x8b\xbe\xef\xbf\x8d\xdf\xdd\xfd\xaa\xc4\xe5\x30\x83\x48\xee\xe9\x3b\xb6\x2f\xe1\x83\xa9\x0d\xe9\x47\x17\xec\x7b\x6b\x09\x52\x52\x62\x71\xfe\xff\xb6\x6f\xfb\x76\xa1\x2e\xdf\x16\xf0\x03\x0e\xda\x05\x25\x8c\xcf\x89\x81\x5a\x8f\x46\xfb\x02\x5c\xdf\x2a\xd1\x57\x6a\x5f\x8e\x4b\x30\x99\x92\x1b\x61\x09\x09\xfd\x58\xae\xa5\x44\x07\x6c\x3a\x24\xb7\x75\xa1\x0b\x68\xa1\xa3\x0a\xb6\x06\xc3\xa6\xb1\x68\xee\x81\x8e\xf7\x9f\xce\xab\x9d\x1b\x96\x88\xfc\xc1\x11\x18\x46\xda\x2b\xd1\x8d\x9a\x3a\xef\xd6\xdd\xc4\x48\x3b\x37\xbc\xa0\xaf\xca\x3f\x9e\x79\x94\xc3\x09\xaf\x4d\x68\xee\x1b\x21\xe0\x11\xcc\xcf\x3a\x58\x0f\x74\xa3\x07\x50\x22\x68\x76\x23\x34\x10\xf4\xda\xc3\x1f\xc1\x59\xef\xc2\x56\x09\xa6\x0c\x8d\x1b\xf4\x16\x8e\x79\x6d\x90\x06\xcd\x4a\x7c\xfe\x2c\xda\xe9\x6b\x7b\x5d\x18\xa9\xfd\x58\x11\xf1\xb7\x78\xc8\xc8\x20\xbe\x7c\x69\x84\xf0\x9a\x21\xb1\x12\x1b\xed\x13\x34\x2e\x72\x09\x90\x56\xfb\x60\x6e\x81\x1c\x5a\x25\xde\xf6\xa9\xb9\x77\xc1\x2a\x71\x83\x76\x8e\xd3\xdc\xe7\x35\x78\xe0\xf7\xb4\xcd\x03\x04\x4e\x25\xf0\x1a\x91\x13\x93\x8e\xb2\xa0\xe6\x39\x21\xf9\x6f\x5d\x9f\xa9\xed\x91\xda\x08\x61\x80\x58\x5a\x47\xaf\x58\x15\xd8\x6d\x4a\x43\x41\x2a\x6c\x8f\xd9\xca\xd7\xe2\x54\x34\x12\x8e\xce\x02\x75\xfa\x29\x13\x4c\x75\x3c\x18\x1e\xb0\xc9\xb4\x12\x8a\xf2\x55\xe1\xe2\x95\x09\xbd\x07\x92\x9a\x59\x9b\x9d\xb4\x50\x7e\x26\xf2\x59\xd1\xfd\xac\x68\x0d\x9a\x33\x81\xdc\x96\x94\x26\x6c\x89\xac\x19\x7e\x99\xf4\xb9\xf2\x0e\x02\x5f\x1d\xf3\x7e\x57\x2c\xdf\xbc\xe0\xac\x80\x46\xa0\xaf\x39\x8d\x10\x83\x7e\x94\x11\xed\xec\xf7\xec\xb2\x2f\x11\x6b\xb1\xe5\xd6\x48\x8f\x9f\x24\xef\x08\xd2\x0e\xbd\x55\x62\xe2\xfc\xaf\x72\x06\xfd\xe8\x86\x3c\x48\x0b\xba\xea\xc3\xda\x05\xa0\x83\x9f\xf3\xcb\xef\x91\x64\x04\x3a\x1e\x0f\x26\xd5\xc0\x85\x6a\xf0\x0c\x4a\x66\x2f\x6d\xa6\x3a\xa4\x87\x24\x87\x42\x2d\xd5\x92\x5e\xaf\xc1\xcf\x41\xeb\x07\x42\x0f\xb5\xde\x14\x80\x21\xb5\x0e\xbb\xd2\xa3\x4b\xf4\xa5\x17\x0f\xb7\x96\x02\x23\x84\xb4\x73\x1b\x96\x2e\x6c\x48\xbf\xd3\xd1\xa5\xaa\x51\x23\x44\x44\x2b\x07\x1d\xdc\x06\x12\xcb\xa8\x79\xf7\x4a\xab\x14\xdd\x1a\x21\xa8\x0a\x2d\x4f\x1b\xe7\xab\x0a\x52\x0e\xec\x06\x90\x04\x0f\xb9\xf8\x2c\x07\xcc\x3c\xb1\x16\x7d\x99\xdc\x04\xe4\xb4\x77\x4f\x20\x27\xf1\x63\xf6\x87\x7b\x9d\xd5\xb1\x29\x7e\xd2\x3e\x31\x0c\x92\xa0\xa6\x6a\x27\xb8\x5c\xef\x03\x90\x1b\xc1\xb6\xab\x4a\x58\xce\x78\x1d\xcd\x49\xc6\x52\x7f\x67\x60\x16\xe2\x64\x38\x07\x5d\x36\xd8\xdc\x42\x18\x02\x98\x22\xf4\x6f\x23\x10\x39\x3b\x5d\x44\x1b\x03\xb1\x80\x0c\x81\xef\xf6\x11\x92\x12\x3a\x46\x3f\x2f\xdd\x6e\x0c\xf6\x54\xf1\x48\xc8\xb8\xce\x9b\x37\xa7\x9c\xbf\x12\x86\x32\xbd\x99\xca\x1e\xb8\x28\xeb\xd7\x1c\x1d\xfe\x27\x7f\x8d\x10\x0f\x31\x29\x71\xde\xcf\x49\x97\xd6\x9e\x37\x52\xad\xfd\xe9\x98\x07\xe0\x4f\x48\xf7\xc7\x85\x35\x70\x56\x62\x71\x71\x59\x22\xcf\xe0\xad\xcf\x5b\x17\xa6\xd5\x47\x60\x77\x9a\xbb\x63\x57\xe0\x98\xe4\xcc\x8b\xe8\x9d\xd9\x37\x91\xf0\x71\xff\x62\x17\xcd\xeb\x5f\x1a\x67\xe9\x50\xcb\x76\x71\xfe\x43\x59\xff\xdd\xe2\xa2\x29\x55\x70\x61\x7b\x1d\x36\x58\x57\xd7\xe9\x93\x32\xbf\x12\x6a\xd1\x9f\xd7\x9c\x0a\x78\x33\xc5\x53\x82\x4d\xbc\xa8\xfe\x6b\x55\xde\x2b\x61\x74\x6b\x88\x9b\x11\x7d\x1e\x4e\xb6\x70\x7d\x77\x7e\xcf\xc8\xba\x9c\x84\x88\x40\x1f\x57\x3f\x11\xe6\xa8\x44\xc8\xde\xcf\x06\xdf\x7a\x36\xe6\x3e\x7e\xbe\xf0\xf4\x86\xb5\x93\x41\x6a\xfe\x09\x00\x00\xff\xff\xc6\x5a\x77\x87\x95\x07\x00\x00")

func masterEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeConfigYaml,
		"master/etc/origin/node/node-config.yaml",
	)
}

func masterEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeKubeconfig,
		"master/etc/origin/node/node.kubeconfig",
	)
}

func masterEtcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xcf\x4f\xdb\x4a\x10\xbe\xe7\xaf\x18\x71\xe1\xbd\x83\x93\x87\x1e\xbd\x58\xe2\x80\x40\x6a\x91\x28\xb5\x04\xea\x7d\x62\x0f\xf6\x28\xeb\x9d\xed\xee\xd8\xd4\xa5\xfc\xef\xd5\xda\xeb\x14\x48\x42\x5b\xa9\xa7\x64\x7e\x7d\xdf\x97\xf9\x26\x8b\x8e\x3f\x93\x0f\x2c\x36\x87\xfe\x64\xb1\x61\x5b\xe5\x50\x48\xb5\x68\x49\xb1\x42\xc5\x7c\x01\x80\xd6\x8a\xa2\xb2\xd8\x10\x43\x80\x50\x36\x54\x75\x86\xfc\x12\x8d\x6b\x70\xb9\xe9\xd6\xe4\x2d\x29\x85\x25\xcb\xaa\xf4\xac\x5c\xa2\xc9\x9c\x54\x39\x1c\x1f\x2f\x00\x0c\xae\xc9\xa4\x61\x71\x64\x43\xc3\xf7\x3a\xf6\x4a\xeb\xc4\x92\xd5\x1c\xd0\xf1\xbe\xba\x55\x2f\x26\x73\x06\x2d\xe5\x70\xac\xbe\xa3\x08\x68\xb1\xa5\x1c\x5a\x0c\x4a\x3e\x9b\x26\x63\x2a\x38\x2c\x29\x87\xa8\x27\x0b\x43\x50\x6a\x17\xc1\x51\x19\x89\x23\x12\xb2\x25\x3f\xca\xc8\x00\x7d\x9d\x04\x65\x10\x14\xbd\xa6\xef\x13\x66\x0a\x66\x4d\x19\x64\x59\x29\xf6\x9e\xeb\xb3\x15\x69\xb9\x12\xcf\x35\xdb\xd5\xd4\x9b\x3e\x52\xc3\x72\xc0\xd6\xa4\xa1\xc7\x47\x70\x9e\xad\xc2\x51\x96\x19\xa9\x0d\xf5\x64\xce\x8e\xe0\x9f\x4b\xf2\x74\x0f\xcb\x8b\x69\xe0\x62\xde\xc1\xb5\xd4\xd7\xb1\x65\x79\x5e\x5c\xdd\x92\xef\xc9\xff\x0b\xdf\xe1\x4b\x27\x4a\xf0\xf4\x34\x62\x96\xd2\xb6\x68\xab\x59\xf8\x76\x57\x63\xcc\x2d\xd6\x94\x47\xd6\x19\xfa\x2a\x66\x42\x8c\xe2\x16\x8b\xb8\xc4\xd7\x88\xe3\x50\xd1\x19\x53\x88\xe1\x72\xc8\xe1\xdc\x3c\xe0\x10\xc6\x9a\xe1\x9e\x2c\x85\x50\x78\x59\xd3\xc4\x09\xd0\xa8\xba\xf7\xa4\x73\x08\xe0\x50\x9b\x1c\x1a\x42\xa3\xcd\xb7\x9f\x59\xf1\x9a\xc3\xe9\xe9\xff\xdb\x4c\xbc\x9a\xe8\xda\x87\xbb\xbb\xe2\x36\x65\xd9\xb2\x32\x9a\x4b\x32\x38\xdc\x52\x29\xb6\x0a\x39\x9c\xbe\x4b\x55\xe5\x96\xa4\xd3\x6d\xe1\xe4\xbf\xb1\x30\x99\x3f\x7b\xe3\x09\x2b\xfe\x43\x95\xab\x38\x34\xfc\x0d\xad\x49\xd2\x41\xad\x81\xca\xce\xb3\x0e\xd1\x02\xfa\xba\xd5\xe3\x3c\xf7\x6c\xa8\xa6\x2a\x87\x78\xd3\x63\xba\x17\xd3\xb5\xf4\x51\x3a\xab\xdb\xd3\x6c\x63\x54\x8c\xda\x77\x2f\x2f\x81\xbd\xf8\x33\x4c\x57\x98\x2a\xf1\x67\x7e\xb2\x66\x78\x46\x72\x10\xb2\x34\xd2\x55\xce\x4b\xcf\xd5\x01\xe4\xd8\x90\xbd\xea\xf8\x25\x43\x8f\x7e\x65\x78\x3d\xb3\xec\x03\x8e\xef\xcc\x01\x6d\x6e\xc3\xfb\x26\xe6\xf4\x1e\x2a\xa9\xf7\x0d\x4c\xe9\x46\x82\xde\x90\x3e\x88\xdf\x6c\xf5\x3a\xcf\x32\x1a\x64\x30\x84\x9b\x71\x66\x7a\x39\x32\x2b\x15\x65\xf3\x63\xb6\x98\xed\x49\xcf\x47\x84\x1a\x69\x17\xcf\xcf\xeb\x80\x45\xfb\x0d\xfa\x1d\x90\x5d\x53\xde\xb6\xe4\x20\xe6\x4b\x1b\x76\x91\x92\x07\x6f\x6a\x9a\xb7\xbe\xc7\x8a\xb7\x79\x93\x27\x3b\x8e\xfc\x08\x00\x00\xff\xff\xb2\xe2\x07\x25\x7e\x06\x00\x00")

func masterEtcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsApiserverYaml,
		"master/etc/origin/node/pods/apiserver.yaml",
	)
}

func masterEtcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsAroadmissioncontrollerYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x4d\x6f\xdb\x3c\x0c\xbe\xfb\x57\x10\xbd\xdb\x7e\x8b\xb7\x87\x41\xb7\xa2\xc3\x3e\x0e\xcb\x82\xb5\xd8\xb5\x60\x25\x26\x16\x2a\x89\x9e\x44\xa5\x73\xbb\xfe\xf7\x41\xae\xe3\x38\x5d\xd1\xf8\x64\xf1\xe1\xc7\xc3\x87\x24\xf6\xf6\x27\xc5\x64\x39\x28\xd8\x9d\x57\xf7\x36\x18\x05\x6b\x36\x95\x27\x41\x83\x82\xaa\x02\xc0\x10\x58\x50\x2c\x87\x54\x9e\x00\x49\x77\x64\xb2\xa3\xd8\xa0\xeb\x3b\x6c\xee\xf3\x1d\xc5\x40\x42\xa9\xb1\xdc\xea\x68\xc5\x6a\x74\x75\xcf\x46\xc1\xd9\x59\x05\xe0\xf0\x8e\xdc\x14\xcc\x3d\x85\xd4\xd9\x8d\x8c\xbe\xec\x7b\x0e\x14\x44\x01\x46\xae\xd1\x78\x9b\x0a\x9b\x5a\x73\x90\xc8\xce\x51\x7c\x2b\x68\xc4\xea\xde\x61\x20\x05\x67\x12\x33\x95\x2a\x01\x3d\xbd\x9b\xa7\x38\xa4\x1e\x35\x29\x28\x94\xeb\x34\x24\x21\x5f\xa5\x9e\x74\xe1\x56\x7c\xd1\x06\x8a\x13\xd3\x1a\x30\x6e\xa7\xff\xf1\xb5\xcf\xfa\x8a\x5c\x89\xf4\x1e\x83\x59\xb8\x3e\xe6\x48\xd3\x8b\xc2\xee\x00\xbc\x70\xf4\x98\x84\xe2\x8a\x0d\xad\xd0\xef\xfd\x00\x76\xe8\x32\x7d\x8a\xec\xd5\x6c\x02\xd8\x58\x72\xe6\x07\x6d\x96\x36\x80\x57\x83\x5b\x42\x63\xc0\x1a\xa5\x53\x50\x3a\x6b\xc2\x71\x19\xeb\x71\x4b\x0a\x9e\x9e\xa0\xb9\xe2\xb0\xb1\xdb\xe6\x6b\xb1\xa4\xe6\x32\xf2\xe5\xbe\xc3\xab\xb9\x43\xf8\x03\xbf\x32\x0b\xc1\xf3\xf3\x32\xc1\x3a\x3b\xb7\x66\x67\xf5\xa0\xe0\xd2\x3d\xe0\x90\x26\xf4\xe4\x10\xca\x17\x09\x8d\x0d\x94\xd2\x3a\xf2\x1d\x1d\x3a\xeb\x44\xfa\xcf\x24\xcb\x56\xfb\xb1\x91\x8e\xd0\x49\xf7\xd8\x96\xc0\x61\x89\x72\x14\x05\x1f\x2e\x2e\xfe\x5f\x18\xcb\x7a\x16\x12\x5f\x6e\x6e\xd6\xd7\xb3\xdd\x06\x2b\x16\xdd\x47\x72\x38\x5c\x93\xe6\x60\x92\x82\xf3\xff\x66\x5c\xac\x27\xce\xf2\x2f\x94\x48\xe7\x68\x65\x28\x9a\xd0\xef\x05\xb9\x3e\xda\x9d\x75\xb4\x25\xa3\xa0\xec\xe0\x04\xec\xd8\x65\x4f\xdf\x38\x07\x49\x07\xe7\x1a\x7c\xb1\xbc\xcc\xa5\xbd\x2d\xb7\xd5\xde\x72\x96\x05\xef\x49\xba\xb2\x3a\x7a\x9c\xcc\x02\x2b\x8d\x7f\x0f\x6e\x38\xaa\xf4\x76\xd6\x13\xda\x1f\x2a\x91\xe8\x1a\x51\xbf\x57\xa5\xe3\x24\x2b\x92\x07\x8e\xf7\xb3\xad\x8f\x96\x47\x3d\x1c\xa6\xb4\x1a\x33\xbd\x1c\x52\x5d\x36\xad\xde\x9f\x7f\xb5\x57\x62\xbe\xa6\x92\x6c\x64\x5a\x1d\x0f\xb7\x25\xd1\x2d\x47\xbb\xb5\xa1\xd5\x8e\xb3\xe9\x23\xef\xac\x99\x19\xbf\xad\xcb\x89\x7c\x27\x54\x38\x56\xe0\x6f\x00\x00\x00\xff\xff\x5d\x01\x0f\x68\x07\x05\x00\x00")

func masterEtcOriginNodePodsAroadmissioncontrollerYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsAroadmissioncontrollerYaml,
		"master/etc/origin/node/pods/aroadmissioncontroller.yaml",
	)
}

func masterEtcOriginNodePodsAroadmissioncontrollerYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsAroadmissioncontrollerYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/aroadmissioncontroller.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\x41\x6f\xdb\x3a\x0c\xbe\xe7\x57\x10\x39\xbd\x77\x70\xfc\x1e\xd0\xc3\x60\xa0\x87\xae\x19\xd6\x61\x4d\x67\xa0\x5d\xb1\x5b\xa1\xc8\xac\x43\x44\x96\x3c\x92\x76\x9b\x75\xfd\xef\x83\x6c\x27\x5d\x52\xa7\xd8\x92\x83\x25\x91\xfc\xf8\x91\x1f\x25\x53\xd3\x2d\xb2\x50\xf0\x19\xb4\xff\x4f\xd6\xe4\x8b\x0c\xf2\x50\x4c\x2a\x54\x53\x18\x35\xd9\x04\xc0\x9b\x0a\x33\xb0\xc1\x2b\x07\xe7\x90\x65\x38\x93\xda\x58\xcc\x60\xdd\x2c\x31\x91\x8d\x28\x56\x13\x00\x67\x96\xe8\x24\x86\x01\x84\x1a\xbd\xac\xe8\x5e\x67\x14\x52\x1b\xaa\x3a\x78\xf4\x7a\x08\xf5\xca\xaf\x33\x26\xb5\x33\x1e\x33\x98\x2a\x37\x38\x9d\x48\x8d\x36\x82\x46\xab\x21\x8f\xdc\xa5\x48\xc0\x70\x39\x24\x4b\x40\xd4\xb0\x0e\xeb\xca\x88\x22\x0f\x9b\xc3\x7c\x09\x24\x89\x0d\xfe\x9e\xca\xd3\x14\xd5\xa6\x81\xa9\x24\x9f\xf6\x31\xc3\x67\x70\x98\x6d\x4c\xe5\x76\x41\x8e\x44\xd1\x9f\xae\x54\x6b\xc9\xd2\xf4\xbf\x59\xf7\xcf\xde\x9d\x9c\x9c\x0c\x3e\x4f\x4f\x50\x33\x79\x85\x69\x92\xb8\x50\x3a\x6c\xd1\x9d\x4e\xe1\x9f\x39\x32\xde\xc3\xec\xbc\x07\x3d\xdf\xf6\xe2\x32\x94\x97\xd1\x25\x1a\x06\x8a\x0b\xe3\x4d\x89\xfc\x2f\xfc\x84\xef\x4d\x50\x84\xe7\xe7\x0e\xdb\x86\xaa\x32\xbe\xd8\x16\xbb\xeb\x59\xb7\x47\xdf\x6e\x0d\xbd\x5a\x9f\xbf\xbe\xff\x70\xb7\x38\xfb\x76\x97\xcf\xef\x6e\xbf\x5c\x5e\x77\x46\x80\xd6\xb8\x06\xb3\xc8\x72\x36\x47\xa6\x16\x8b\xd9\xc2\x3c\xce\x8d\x9a\x39\xc9\x5a\x72\xe4\xdb\x45\xc7\xb2\x6f\xf2\x35\x72\x4b\x16\x0f\xa9\x50\x65\xca\x01\x65\x28\xe8\x53\x3c\x91\x6d\x15\x79\x94\x6e\x34\x28\x6f\x9c\xcb\x83\x23\xbb\xc9\xe0\xcc\x3d\x98\x4d\x2f\x88\xa3\x16\x3d\x8a\xe4\x1c\x96\x98\x0d\x5c\x63\x97\x3f\xa2\x6e\xb7\x00\xb5\xd1\x55\x06\x2b\x34\x4e\x57\x3f\x5e\x4e\x03\x6b\x06\x3b\x09\xe2\x4f\xec\x0a\x63\x13\x2e\x6e\x6e\xf2\xbe\xf2\xb1\x11\x06\x10\xb4\x0d\x93\x6e\x22\x6d\x7c\xdc\x65\xaa\x99\x5a\x72\x58\x62\x91\x41\x9c\xbe\xee\xb8\x0d\xae\xa9\x70\x11\x1a\xaf\xbb\x81\xab\xe2\x2e\xef\x58\x8d\xcc\xd1\x80\xd6\xa7\xde\x1b\xaa\xb7\xc3\xad\x0b\x4d\x51\x73\x68\xa9\x38\x86\x12\x3d\x92\xad\xcb\x11\xb4\x97\x9b\x92\x32\x96\x24\xca\x84\x32\x2b\xf6\x01\x85\x4a\x6f\xb4\x61\x4c\xa8\x8a\x8d\x1c\xc1\x6a\x84\x53\x47\x4b\x7c\x44\x9b\xc6\xab\xce\x1e\x15\xa5\x5b\x3a\xd4\xa4\x76\x4d\x49\x5e\x06\xd4\x3e\x90\x43\x6d\x4a\xa3\xdd\xab\x72\x11\x44\x6f\xc2\x6e\xa2\xf6\xb2\xbf\xc6\x58\x05\xd1\x2b\xd4\x87\xc0\xeb\x5d\xef\x6b\xa6\xd0\xa9\xe4\x8c\xc8\x55\x4f\xbb\x7b\x6d\x12\x1f\x0a\x4c\x2c\x93\x92\x35\xf1\x92\xf6\x1a\x0d\x2f\x43\x84\xea\x4a\x98\xfc\x3e\x3d\xc7\x74\x1a\x57\xe9\x4f\x50\xf6\xe4\x1a\xc1\x3a\xd4\xea\x4d\xcc\x23\xa2\x4d\xde\x54\xec\x28\xe2\x5f\x48\x37\x2e\xc8\xaf\x00\x00\x00\xff\xff\xe0\x81\x84\xe8\x1f\x06\x00\x00")

func masterEtcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsControllersYaml,
		"master/etc/origin/node/pods/controllers.yaml",
	)
}

func masterEtcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\x5d\x6f\xe2\x3a\x10\x7d\xe7\x57\x58\xbc\xf4\xc9\x41\xb4\xf7\xf6\xde\xfa\xad\x82\x4a\x5b\x69\xcb\x22\x6d\xb5\xaf\xab\xc1\x9e\x12\x0b\x67\x9c\xb5\x27\x69\x51\xcb\x7f\x5f\xd9\x49\x20\xfd\xe0\x01\xb0\xcf\x7c\xf8\xcc\x99\x19\xa0\xb6\xbf\x30\x44\xeb\x49\x89\x76\x3e\xd9\x59\x32\x4a\xac\xbd\x99\x54\xc8\x60\x80\x41\x4d\x84\x00\x22\xcf\xc0\xd6\x53\x4c\x57\x21\xa2\x2e\xd1\x34\x0e\x43\x01\xae\x2e\xa1\xd8\x35\x1b\x0c\x84\x8c\xb1\xb0\x7e\xa6\x83\x65\xab\xc1\xc9\xda\x1b\x25\x2e\x2e\x26\x42\x38\xd8\xa0\xeb\x83\x7d\x8d\x14\x4b\xfb\xc4\xd9\xd7\x57\xb5\x27\x24\x56\x02\x59\x9b\xaf\x1c\x88\x83\x77\xb2\x76\x40\xa8\xc4\x05\x87\x06\x53\x46\x82\x0a\x95\xa8\x20\x32\x06\xd9\x87\x26\x2c\xd6\xa0\x51\x89\xc4\x48\xc6\x7d\x64\xac\x26\xb1\x46\x9d\x9e\x4e\xa9\xc0\x12\x86\x4c\x44\x0a\x08\xdb\x9e\x92\x14\x6f\xf9\x57\x88\x88\x2c\x24\xf4\x97\x42\xcc\x90\x75\xfa\x98\xfc\x55\x68\x4f\x4f\xbd\x0d\x5f\x50\x9f\x28\x6b\x5f\x55\x40\x66\xc8\x36\xdb\x58\x9a\xc5\xb2\xbf\x49\x9d\x0f\x48\xed\x60\xef\xc8\xdf\x3d\x2e\x96\x8b\xc7\xef\xbf\x6f\xd7\xf7\x7d\xd2\x16\x5c\x83\x4a\x4c\xaf\xa6\x19\xb0\x15\x6c\x51\x89\xd7\x57\x51\x2c\x3c\x3d\xd9\x6d\x71\x9f\x90\x58\x3c\xe4\xb2\xef\x58\x1b\xf1\x26\xfe\x34\x9e\x51\x1c\x0e\xa7\x90\x75\xe3\xdc\xda\x3b\xab\xf7\x4a\xdc\xba\x67\xd8\xc7\x6c\x73\xb6\x45\xc2\x18\xd7\xc1\x6f\x50\x8d\xea\x18\xce\x1f\xea\xe8\xb8\xa6\x1a\x35\xbb\x11\x22\xa5\x06\x8d\x81\x47\xd0\x49\x27\x0d\x85\x7e\x67\x92\xf2\xac\x6f\x8d\x18\x3e\x79\xef\x70\x7f\xde\xf9\xbd\x51\x4a\x24\x53\x7b\x4b\x1c\x47\x68\xc9\x5c\x47\x35\x9b\x25\xd9\xbe\xf9\xc8\x49\x6c\x71\x38\xa8\xcb\xab\xff\x6e\xc6\x75\xf5\xa1\xe3\x48\x04\xc7\x65\x0f\x58\xb2\x6c\xc1\x2d\xd1\xc1\xfe\x27\x6a\x4f\x26\x2a\xf1\xcf\xbf\xd9\xda\xf5\xef\xd8\xfd\x88\xba\x09\x96\xf7\x0b\x4f\x8c\x2f\x3c\xa8\x57\x07\xdb\x5a\x87\x5b\x34\x4a\xa4\xb1\xcd\x70\xeb\x5d\x53\xe1\x83\x6f\x88\x8f\xc3\x57\xa5\xdb\x1a\xb8\x54\xa7\x7a\xfb\x1c\xa7\x97\xa4\xce\x23\xd0\xe3\x01\xc1\xfc\x20\xb7\x1f\x65\x7e\x9f\xa7\x85\x30\x73\x76\x73\x26\x57\xda\xec\x8c\x3e\xfb\xb0\xb3\xb4\x5d\xda\xf0\x39\xa6\xf4\x91\x57\xc8\xc9\xe5\xf8\x8c\xa1\x38\x4c\xd6\x74\xe5\x09\xa7\x1d\xd6\x8d\xa7\x3a\x8a\x13\x31\xb4\xfd\x9e\x75\xd4\xe6\xd7\xff\x17\xd7\x57\xc5\xfc\xf2\xa6\x98\x5f\xf7\xa2\x41\xd0\x25\x8e\x7c\x52\xc3\x96\xbe\x02\x4b\xab\xae\x65\x93\xac\xa1\xcf\xd2\x3a\x88\x71\x95\x0b\xe8\xb6\x5a\x92\x37\x28\x87\xbf\x9a\xc9\x20\x6c\xbf\xda\x89\x7a\x16\x62\x68\xc5\x17\xe2\x7e\x25\xed\xd9\xc8\x4f\x72\x7e\x14\xf3\x6f\x00\x00\x00\xff\xff\x8d\x7b\x37\x76\x49\x05\x00\x00")

func masterEtcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsEtcdYaml,
		"master/etc/origin/node/pods/etcd.yaml",
	)
}

func masterEtcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xeb\x86\x64\x03\x26\x29\xce\x1a\x04\x55\x90\x0e\x45\x37\x0c\x79\xc8\x0f\x24\x5b\x5f\x8a\x22\xa5\xc9\xb3\xc5\x99\x22\x19\xde\xd1\xae\x97\xf6\x7f\x1f\x48\x4b\x8a\xbd\x38\x5d\xd1\x3e\x59\x77\xba\xfb\x78\xf7\xdd\x77\xa2\x85\xd7\x6f\x30\x90\x76\xb6\x86\xc5\x78\x34\xd7\x56\xd5\x70\xe5\xd4\xa8\x45\x16\x4a\xb0\xa8\x47\x00\xc2\x5a\xc7\x82\xb5\xb3\x94\x4c\x00\x92\x0d\xaa\x68\x30\x94\xc2\xf8\x46\x94\xf3\x38\xc1\x60\x91\x91\x4a\xed\x2a\x19\x34\x6b\x29\x4c\xe1\x9d\xaa\x61\x7f\x7f\x04\x60\xc4\x04\x4d\x97\x2c\xbc\xaf\xc1\x2d\x28\x1b\xd2\xb5\xde\x59\xb4\x5c\x83\x45\x5e\xba\x30\xcf\x6e\xe7\xd1\x52\xa3\xa7\x9c\xf1\x76\xc7\xf0\xca\x63\x0d\xda\x4e\x83\x18\x01\x58\xd1\x62\x0f\x9b\x9e\xc9\x0b\x99\x1c\x3d\x50\x41\xca\x8e\xc8\xa3\x4c\x45\x48\x67\x59\x68\x8b\x21\x97\x54\xa4\x2a\x5a\x61\xd5\xba\xbe\x02\xaa\x89\xb6\xd5\x44\x50\xd3\xd9\x85\xec\x1e\x3e\xe6\x5f\x80\xef\xbf\xdb\x0e\x01\x20\x64\x28\x30\x3a\xf0\xda\xe3\x54\x68\x33\xea\x43\x41\x4f\x41\x58\xc7\x0d\x06\xf0\xc1\x49\x24\x02\x4d\x60\x34\x31\x5a\x6d\x67\xe0\x2c\x70\x83\x20\xad\x2e\x08\xc3\x02\x03\x90\x93\x73\xe4\x9f\x61\x29\x34\x43\xb4\xac\x0d\x68\x06\xfc\xa0\x99\x3a\x54\x0e\xc2\xc3\xfe\x5c\x1b\x03\x3f\xfc\xf8\xb7\x9b\x10\x14\xfe\xa7\x93\x1c\x02\x07\xfb\xf0\xe7\xef\xd7\xe7\x5d\xe4\xb2\xd1\x06\x81\x43\xc4\x13\x50\xae\x73\x42\x2a\xaa\x8a\x14\x2a\x6a\x44\xc0\x2a\xb1\xb4\xa0\xa5\x66\xd9\x54\x24\x83\xf6\x4c\x95\x5b\x50\x21\xd9\x00\xb1\xe0\x48\xb0\xf7\xb2\x52\xb8\xa8\x6c\x34\xe6\x24\xd5\x6b\x07\x28\x00\x94\x8d\x83\x67\x4b\x11\x52\x3f\x35\xbc\x7a\xdc\xad\x8c\x21\xa0\x65\xb3\x82\x56\x58\x31\x4b\x6d\x5f\xbe\xb9\x59\x77\x98\x8c\x23\x82\xb2\x2c\x9f\xc1\xe1\xcb\xbd\xf1\x06\x30\x19\x44\x0f\x47\xb0\x97\x03\x87\x17\x68\x08\x37\xa2\x26\x01\xc5\x7c\xb0\xa7\xba\x7b\x54\xce\xe2\xc3\x14\x8c\x88\x56\x36\xe9\xd4\xce\x35\x8d\x56\x26\x49\xc3\x5d\xd4\x0c\xf7\x1b\x78\x5f\x4c\x8c\xf3\x9b\x24\x64\xee\x3b\xc7\xa7\xcd\x39\xe5\x03\x6e\xce\xfe\xd8\x98\xca\x97\x73\x1f\x18\x8a\xc2\xba\x22\xb9\xba\x30\x05\x45\x41\x2b\x62\x6c\x0b\xad\x4e\x83\xb0\xca\xb5\x0f\x8d\x5e\x23\x71\xd0\x92\xb3\xa8\x6c\x6c\x27\x18\xc0\x4d\xc1\x73\x13\x50\x28\x82\x2d\x20\x19\x50\x30\x12\xb0\x83\x80\x2a\x4a\x4c\x59\x03\x94\x68\x5d\xb4\x9c\xb2\xaf\x6f\x6e\x92\x04\x23\x21\x25\xbd\x36\x8e\x98\x60\xa9\xb9\x49\xf3\x5c\x81\x74\x01\x69\x48\x6b\x98\x3d\xd5\x55\x35\x89\xb3\x7f\xb4\x31\xa2\x0c\xa8\x1a\xc1\xa5\x74\x6d\x45\x8d\x5b\xde\x4e\xe2\xac\x94\x33\xfd\xab\x56\xa7\xe3\xa3\xe3\xf1\x2f\xc7\x2f\xbe\x36\xf7\xf0\xf8\xc5\xf1\x68\x50\xf4\xdb\xb7\xf0\xde\x26\xd5\xbd\x87\x62\xc6\x30\x3e\x84\x77\xef\x1e\x89\x75\xdd\x7f\x62\x37\xf3\x9a\x77\x2c\x6d\xef\xa5\x47\x7b\xbb\xb8\xc9\xc4\x40\x09\x59\xc2\xb7\xd2\xd9\xa9\x9e\xd5\xb6\x08\xb8\x10\x46\x2b\xc1\x2e\x14\x1d\x93\xa7\xcf\xbf\x19\xb5\x11\x56\x19\x7c\x40\x1c\xf7\xfa\x19\x44\xfc\x55\x42\x51\x93\xfe\x4b\xb2\x43\x28\xbb\x3e\x0b\xfd\xa2\x9d\xac\x97\x26\xd3\xd9\x8a\x19\xd6\x70\x7f\x0f\xe5\xeb\x5c\x6e\x79\x96\x3c\x54\x5e\x38\x85\xf0\x11\xee\xa2\x63\x84\x4f\x6b\xa1\x77\x1f\xdf\x87\x02\xb3\x37\x20\xb9\x18\x24\x76\xdf\x7d\x00\xa3\x5b\xcd\x83\x05\x20\x7d\xac\xe1\xf0\xe0\xa0\x1d\x3c\x2d\xb6\x2e\xac\x6a\x78\x7e\x70\x70\xde\x53\x10\xf0\x2e\x22\x3d\xca\x1b\xef\x48\x1b\x0f\x69\x84\x32\x06\xcd\xab\xd7\xce\x32\x7e\xe0\x3e\xd7\x07\xbd\xd0\x06\x67\xa8\xea\xdc\x7c\x7f\x44\xb4\xaf\xe8\x2f\xc2\x50\x77\x1b\xbc\x70\x26\xb6\x78\x9e\xe4\x4f\xfd\xad\x90\x97\xe1\x4a\x70\x53\x43\x65\xf4\xa4\x6a\x5d\xba\x02\x7b\xd9\xaf\x29\x48\x8b\x51\x6c\xbf\x48\x93\xbd\xb4\x66\xb5\x71\xe0\x36\x56\x88\xb6\xfa\x2f\x75\x5b\x78\x21\xda\xa2\xbf\x2f\xb7\x53\x17\x22\x7c\x4b\x3a\xad\x76\x54\xff\xe0\xfc\xdf\xca\x91\xe5\xe7\x8f\x5e\x0b\xbd\xd8\x8e\x49\x6f\x2e\xd6\xf7\xf8\x80\x9c\x7c\x57\x67\xbf\x0d\xb6\x0f\xda\xe5\xf1\x19\x41\x74\x91\x01\x3b\x21\x5b\xa7\xb0\xe8\xff\x61\x8c\xfa\x49\x75\xf7\x78\x86\x49\xb5\xf5\xe3\xde\x3d\xad\x9d\xb3\x7a\x32\x7b\x17\xc1\x3b\xe9\x7d\x12\xa1\xa7\xf4\x11\xcb\x4f\x66\x64\x66\x83\x9e\xe9\xcf\x1e\xbd\x83\xde\x7f\x03\x00\x00\xff\xff\x41\x1c\xe0\x81\xd0\x09\x00\x00")

func masterEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsOvsYaml,
		"master/etc/origin/node/pods/ovs.yaml",
	)
}

func masterEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcb\x8a\x66\x1b\x46\x29\x2d\xd0\x61\x50\xd1\x02\x59\xe2\x75\x06\x12\x27\x68\x93\x62\x40\x51\x04\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x78\x49\xff\xfb\x40\xea\xcd\x8e\x23\x27\xd9\x17\x5b\xbc\x97\xe7\x5e\x78\xcf\x49\xbc\x90\x9f\xd1\x3a\x69\x74\x02\xd5\xab\xd1\x52\xea\x34\x81\x73\x93\x8e\x72\x24\x9e\x72\xe2\xc9\x08\x80\x6b\x6d\x88\x93\x34\xda\xf9\x23\x80\x13\x19\xa6\xa5\x42\x1b\x71\x55\x64\x3c\x5a\x96\x33\xb4\x1a\x09\x5d\x24\x4d\x2c\xac\x24\x29\xb8\x62\x85\x49\x13\xd8\xdb\x1b\x01\x28\x3e\x43\xd5\x38\xf3\xa2\x48\xc0\xa5\x3a\x1c\x84\xc9\x0b\xa3\x51\x53\x02\x1a\xe9\xda\xd8\x65\x10\x9b\x02\xb5\xcb\xe4\x9c\x02\xde\xc3\x36\xb4\x2a\x30\x01\xa9\xe7\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xcf\xae\xe0\x02\x93\x1e\x88\x79\x95\x2b\x50\xf8\x24\x84\xd1\xc4\xa5\x46\x1b\x52\x62\x3e\x8b\x9c\xeb\xb4\xce\x8f\x41\x3c\x93\x3a\x9e\x71\x97\x35\x67\x26\x9a\x87\xbb\xf0\x0f\xf0\xe3\x0f\x9b\x26\x00\x0e\x09\x18\x96\x06\x0a\x59\xe0\x9c\x4b\x35\x6a\x4d\x41\xce\x81\x6b\x43\x19\x5a\x28\xac\x11\xe8\x1c\x48\x07\x4a\x3a\x42\x2d\xf5\x02\x8c\x06\xca\x10\x84\x96\xcc\xa1\xad\xd0\x82\x33\x62\x89\xf4\x2b\x5c\x73\x49\x50\x6a\x92\x0a\x24\x01\xde\x48\x72\x0d\x2a\x59\x5e\xc0\xfe\x52\x2a\x05\x2f\x7e\xfa\xc7\xcc\x1c\xb0\xe2\xe7\xb7\xc1\x04\x0e\xf6\xe1\x62\xfc\xf1\xb4\xb1\xbc\xce\xa4\x42\x20\x5b\xe2\x5b\x48\x4d\x23\x04\x9f\x14\x8a\xcc\xc0\x3e\xa1\xa3\x7d\xb8\xf3\x31\x39\x01\x83\xcb\xe9\xe4\x6f\x76\x74\x36\x9d\x8e\x8f\x2e\x92\xb8\xe2\x36\xb6\xa5\x8e\x37\xda\x18\xf7\xa9\x46\x3e\x55\x78\x1f\xa7\x58\xc5\xba\x54\xea\xad\x2f\x45\x77\x51\xa0\x0e\xb2\x77\xcd\xad\x2f\x35\x81\xc3\xed\x46\x88\xd2\x5a\xd4\xa4\x56\xdb\x2d\x39\x9a\x4e\x36\x7a\xe1\x55\x6f\x1c\x44\x51\xb4\x07\xaf\xdf\xbf\x7c\xb5\x16\xc7\x29\xc4\x02\xde\xc0\xcb\x60\xd8\x29\x50\x39\x5c\xb3\x9a\x59\xe4\xcb\xee\x3c\x97\xcd\x63\x6a\x34\xf6\xf7\x75\xc1\x97\x08\xc6\xdf\x43\x33\x6d\x30\x2f\xb5\x08\xd3\xdf\x26\xa6\x4d\xda\xc2\xda\x1c\xd8\xc7\x39\xc4\x48\xc2\xf7\x25\xd6\x48\x51\x1a\xff\x7e\xc0\xfa\x96\x35\x30\x91\x30\x7a\xde\x78\x89\xa2\xf6\x32\x05\x05\x2f\x3f\x4d\xbf\x40\x9c\x19\x47\x1b\xb2\x36\x2b\x39\x87\x2f\x5f\x80\x35\x71\xdc\xca\x79\x2c\xb9\x88\x8d\x95\x0b\xa9\x99\xcf\x07\xbe\x7e\xbd\xd7\xfd\x30\x93\x06\xb8\x52\x78\x53\x18\xdb\x77\xc5\x99\xd2\x0a\xdc\x81\x35\xea\x1a\xd4\x3c\xe1\x0d\x8a\x9e\x4b\xe0\x88\x5b\xea\xda\xc3\x58\x8d\xf0\x2e\x00\xd6\x30\xb1\x87\x09\x3f\x8d\x32\x5a\xf1\x5c\x01\x63\x7e\x55\x0c\x99\xbb\x54\x47\xbd\x1e\x18\x53\x66\xa1\xb0\x42\xf5\xee\xc5\xed\xf1\xf8\x8f\xcb\x0f\x57\x27\x67\x1f\x4e\xc6\x9f\xc7\x27\x09\x7b\xfd\x3d\xa4\x86\xba\x6a\x59\x5b\x6f\x80\xb3\xf3\xf1\xf4\xd3\x5f\x93\x3f\x2f\xae\x8e\xa7\x9f\xae\x8e\xcf\x4e\x0f\x27\xd3\xa6\x88\x8a\xab\x12\x13\x10\xaa\x74\x84\x36\x52\x46\x70\x15\x54\x32\xe7\x0b\x4c\xe0\xf6\x16\xa2\xa3\x3a\xd9\x89\x97\xb8\x68\xea\xfb\x7a\x07\xdf\x4a\x43\x08\xdf\xeb\x88\xeb\x8b\x06\xc0\xf7\xd5\xb5\x19\x74\x6b\xe5\xdc\x58\x4a\xe0\xd5\xc1\xeb\x37\xbf\x35\xb1\xfd\xcd\x6e\x4b\x6b\xac\x0c\xb9\xa2\xec\xdf\x20\xb3\x58\x5f\x4e\x83\xe9\x05\xdf\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x04\x39\xe6\xc6\xae\xbc\xec\xe0\xb4\x1e\x69\x87\xa2\xb4\x92\x56\x47\x46\x13\xde\x50\xeb\x5b\x58\x59\x49\x85\x0b\x4c\x93\xb0\x11\xda\x10\xa5\x3e\x74\x97\x0e\x6d\x02\x07\x41\x54\x19\x55\xe6\x78\x6a\x4a\xdd\xd7\x96\xfb\xd3\x39\xa7\x2c\x81\xad\x7b\xdb\xac\xc6\x38\x6a\xee\xbc\x2b\x81\xa7\x67\x5a\xad\xd6\x82\x6e\xe3\xed\x9a\xc3\x35\xe0\xce\x6c\x5d\xff\x68\x80\x66\x8d\x6d\xc3\x55\xdc\xb2\x56\xf1\xa0\x4b\x9c\xce\x4a\xf7\x40\x81\x8d\x23\xf3\xea\x67\x66\x11\x96\x69\xe5\xae\x25\x89\x6c\x07\xb2\xa9\x9e\x0d\xdc\xbf\x86\x77\xe0\xf6\x46\xff\x27\xef\xfe\x5d\x3a\x9c\xf8\x96\xd9\x26\xdc\xfd\x25\xb7\x8d\x64\x0a\x62\xfe\x1d\xd3\x2a\xb7\xa7\xa5\xdb\xb4\xdb\xce\x48\x22\x38\x6b\xa4\x74\xa0\x18\x25\x67\x2d\x82\x5f\x60\xee\x29\x95\x29\x39\x6b\x61\x83\xcf\x56\x99\xde\x72\x5a\x2b\xbb\x4e\x06\xd6\x4f\x8e\xbb\x73\x61\xa5\x09\xbc\x54\xdc\xb9\x69\xbd\x48\x56\x8e\x30\x67\xf5\xa6\x6c\x3e\x9c\x46\x2d\x05\x9b\xcf\x93\x00\xe3\xd3\x6f\x79\xfc\x20\x0d\x47\x43\x1c\xdc\x09\x30\xcc\xbb\x5d\xac\x1b\x84\xf4\xad\xcd\x8d\xff\x36\x74\xf7\x41\x7a\xf1\xa0\xf7\x3a\x4f\x1f\x64\xe9\x63\x9e\x71\xc7\xc7\x61\xae\x3e\x8a\xb1\xc6\xcf\x21\xa8\x9a\x9c\x8f\x22\xdd\xe3\xda\x63\x6c\x7c\x52\x66\x9b\x73\xfa\x04\xfe\x0d\xa2\xde\xe7\xe0\x20\x03\x77\x0e\xd0\x26\x15\x87\x89\xb8\xb3\xb8\x27\x30\xf2\x79\x7c\xfc\x2f\x00\x00\xff\xff\x7b\x9a\x32\x52\xd8\x0c\x00\x00")

func masterEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsSdnYaml,
		"master/etc/origin/node/pods/sdn.yaml",
	)
}

func masterEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xc8\x41\x0a\x42\x31\x0c\x45\xd1\xb9\xab\xc8\x0a\xb2\x09\xe7\xa5\xe0\x0a\x8a\x3e\x25\xa8\x89\xbc\x96\x3a\x08\xdd\xfb\xa7\x93\x3f\xbb\xf7\x64\x0a\x9b\xbf\x20\x7a\x0d\x1f\xcd\x1c\xbc\x81\xd3\xee\xd0\xca\xf8\x81\xc3\xd0\xb5\x60\xfc\x83\xef\xca\x78\xda\x07\x5a\xda\x17\x1d\x9c\x60\x97\xb5\x2e\x7e\xae\x64\x8a\x6e\xca\x14\xf8\x63\xd7\x11\x00\x00\xff\xff\xe6\xca\x71\x01\x61\x00\x00\x00")

func masterEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeResolvConf,
		"master/etc/origin/node/resolv.conf",
	)
}

func masterEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := masterEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func masterEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeSdnKubeconfig,
		"master/etc/origin/node/sdn.kubeconfig",
	)
}

func masterEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\xa9\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x5f\xc7\x2a\x7e\x47\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\xae\x77\xed\x6c\x2d\x59\x05\x45\xa3\x3a\xe3\x94\x81\x16\x8c\xdc\xb6\xac\xc2\x88\x53\xc6\x4b\x0a\x93\x9f\x79\x49\xef\x85\x02\x86\x64\x68\x36\xb8\xe2\x8b\x5b\x1a\x31\xdb\x77\xa6\x2f\x47\x05\x5d\x0b\xb7\x5a\x3b\x2b\xd7\x03\xcf\x73\x76\x6e\x0a\x28\x9d\x3d\x69\x25\x05\xa6\x41\x50\xf4\xb3\x0f\x22\xd0\x88\xa2\x27\x4a\x9f\x14\x1f\x0b\x7f\x7e\x7b\x1c\xfe\x3c\xfb\x05\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func masterEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcSysconfigAtomicOpenshiftNode,
		"master/etc/sysconfig/atomic-openshift-node",
	)
}

func masterEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := masterEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRootKubeConfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterRootKubeConfigBytes() ([]byte, error) {
	return bindataRead(
		_masterRootKubeConfig,
		"master/root/.kube/config",
	)
}

func masterRootKubeConfig() (*asset, error) {
	bytes, err := masterRootKubeConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/root/.kube/config", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\x0b\xcf\x2f\xca\x4e\x2d\x72\xce\xc9\x2f\x4d\x09\x28\xca\x2f\xcb\x4c\x49\x2d\x72\xce\xcf\x4b\x53\xd0\x73\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x0a\x4e\x2d\x2a\xcb\x4c\x4e\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x73\xa7\x88\x79\x42\x00\x00\x00")

func workerEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginCloudproviderAzureConf,
		"worker/etc/origin/cloudprovider/azure.conf",
	)
}

func workerEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := workerEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeBootstrapKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xf0\x2e\x4d\x4a\x4d\x06\x8b\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xc9\x1b\x98\x7a\x3b\x00\x00\x00")

func workerEtcOriginNodeBootstrapKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeBootstrapKubeconfig,
		"worker/etc/origin/node/bootstrap.kubeconfig",
	)
}

func workerEtcOriginNodeBootstrapKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeBootstrapKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/bootstrap.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeCaCrt,
		"worker/etc/origin/node/ca.crt",
	)
}

func workerEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\xf9\xe5\xa7\xa4\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\x80\xa5\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xb5\x29\x12\x85\x43\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperCrt,
		"worker/etc/origin/node/node-bootstrapper.crt",
	)
}

func workerEtcOriginNodeNodeBootstrapperCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperKey = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x4e\x2c\x49\x2d\xd6\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xd0\xf3\x4e\xad\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\xe3\x74\x32\xfb\x48\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperKeyBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperKey,
		"worker/etc/origin/node/node-bootstrapper.key",
	)
}

func workerEtcOriginNodeNodeBootstrapperKey() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x73\xdb\x36\x10\xbd\xf3\x57\x60\x74\x0e\x48\xca\xb1\xda\x0e\x66\x7a\x48\x9d\x49\x9a\x69\xc7\x75\x25\xb7\x77\x08\x58\x49\xa8\x41\x2c\xbd\x58\x30\x96\xdd\xfc\xf7\x0e\x40\xca\x92\xd2\xd8\xd3\x9e\x24\xf0\xbd\xc5\x7e\xbc\xc5\xae\xee\xdd\x9f\x40\xd1\x61\x50\x62\x98\x57\x3a\xf1\xee\x0a\xc3\xc6\x6d\x55\x25\x44\x3e\x41\x60\x67\x34\x3b\x0c\x57\xda\xec\x60\xe5\x1e\x41\x89\x79\xdb\xb6\xdf\xc6\x6f\x6f\x7f\x55\x62\xd1\x4d\x20\x92\x7b\x7c\xc5\xf6\x1c\x3e\x98\xda\x10\x7f\x72\xc1\xbe\xb3\x96\x20\x46\x25\xe6\x17\xdf\xd7\x6d\xdd\xd6\x73\xb5\x78\x9b\xc1\xf7\xd8\x69\x17\x94\x30\x3e\x45\x06\xaa\x3d\x1a\xed\x33\xf0\xe9\x46\x89\xb6\x50\xdb\x7c\x5c\x82\x49\x14\xdd\x00\x4b\x88\xe8\x87\x9c\x96\x12\x0d\xb0\x69\x90\xdc\xd6\x85\x26\xa0\x85\x86\x0a\x58\x1b\x0c\x9b\xca\xa2\xb9\x03\x3a\xe6\x3f\x9e\x57\x3b\xd7\x2d\x11\xf9\xbd\x23\x30\x8c\xb4\x57\xa2\x19\x34\x35\xde\xad\x9b\x91\x11\x77\xae\x3b\xa3\xaf\xf2\x3f\x9e\x78\x94\xc2\x09\xaf\x8e\x68\xee\x2a\x21\xe0\x01\xcc\xcf\x3a\x58\x0f\x74\xad\x3b\x50\x22\x68\x76\x03\x54\x10\xf4\xda\xc3\x1f\xc1\x59\xef\xc2\x56\x09\xa6\x04\x95\xeb\xf4\x16\x8e\x71\x6d\x90\x3a\xcd\x4a\x3c\x3d\x89\x7a\xfc\x5a\x7f\xca\x8c\x58\x7f\x28\x88\xf8\x5b\xdc\x27\x64\x10\x5f\xbe\x54\x42\x78\xcd\x10\x59\x89\x8d\xf6\x11\x2a\xd7\x73\x76\x10\x57\xfb\x60\x6e\x80\x1c\x5a\x25\xde\xb6\xb1\xba\x73\xc1\x2a\x71\x8d\x76\xf2\x53\xdd\xa5\x35\x78\xe0\x77\xb4\x4d\x1d\x04\x8e\xd9\xf1\x1a\x91\x23\x93\xee\x65\x46\xcd\x73\x40\xf2\xdf\x75\x7d\xa6\xd6\x47\x6a\x25\x84\x01\x62\x69\x1d\xbd\x60\x95\x61\xb7\xc9\x0d\x05\x31\xb3\x3d\x26\x2b\x5f\xf2\x53\xd0\x9e\x70\x70\x16\xa8\xd1\x8f\x89\x60\xd4\xf1\x60\x78\xc0\x46\xd3\x42\xc8\x95\x2f\x15\xce\xb7\x32\xa1\xf7\x40\x52\x33\x6b\xb3\x93\x16\xf2\xcf\x48\x9e\xe5\xba\xcf\x72\xad\x41\x73\x22\x90\xdb\x1c\xd2\x88\x2d\x91\x35\xc3\x2f\x63\x7d\xae\xbc\x83\xc0\x57\xc7\xb8\x7f\xcc\x96\x6f\xce\x38\x2b\xa0\x01\xe8\x6b\x4e\x25\x44\xa7\x1f\x64\x8f\x76\xba\x77\xb6\x68\xb3\xc7\x22\xb6\xdc\x1a\xe9\xf1\xb3\xe4\x1d\x41\xdc\xa1\xb7\x4a\x8c\x9c\xef\x0a\xa7\xd3\x0f\xae\x4b\x9d\xb4\xa0\x4b\x7d\x58\xbb\x00\x74\xb8\xe7\x62\xf1\x1a\x49\xf6\x40\xc7\xe3\xc1\xa4\x18\xb8\x50\x0c\x9e\x41\xc9\xec\xa5\x4d\x54\x1e\xe9\x21\xc8\x2e\x53\xb3\x5a\xd2\xeb\x35\xf8\xc9\xe9\xd3\x93\xe8\xc9\x05\x16\xb3\x02\x11\x7a\x28\xca\x53\x00\x86\x58\x3b\x6c\x66\xa2\x5e\xa2\x07\x31\x2b\xd9\xcf\xce\x9b\xb4\x47\x2b\x3b\x1d\xdc\x06\x22\xcb\x5e\xf3\xee\x85\x06\xc9\xd5\xaa\x84\xa0\x9c\x12\x06\xbf\x97\x3d\x12\x4f\x91\xcd\xdb\x8b\xc5\x22\x07\x47\xa5\xf8\xf2\xb4\x99\xbe\x52\x95\x52\x60\xd7\x81\x24\xb8\x4f\xd9\x63\x3e\x60\x9a\x2e\x9a\xb7\xf9\x35\xe7\xe0\x25\x41\xcc\xda\xd9\xe7\x1c\xeb\xf7\x40\x6e\x00\x5b\x67\x69\x97\x13\x5a\x5e\xe1\x58\xb1\x2c\xb5\x33\x30\xa5\x7a\x96\x62\x04\x72\xda\xbb\x47\x90\xa3\xc2\x7d\xf2\x87\xe2\xcd\xca\xdb\xcc\x81\xc5\x7d\x64\xe8\x5e\xf1\xbb\x2a\x84\xff\xe3\xb9\xd3\x79\x4c\x4e\x7d\x8a\x21\x80\xc9\x6a\xfe\x36\x00\x91\xb3\x63\x65\xb4\x31\xd0\x67\x90\x21\xf0\xed\xbe\x87\xa8\x84\xee\x7b\x3f\x4d\xf6\x66\x08\xf6\x54\xcc\x9e\x90\x71\x9d\x36\x6f\x4e\x39\x7f\x45\x0c\x79\x44\x24\xca\xc3\xe6\x32\xcf\x78\x73\xbc\xf0\x3f\xdd\x57\x09\x71\xdf\x47\x25\x2e\xda\x29\xe8\x5c\xe4\x69\xec\x95\x8e\x3b\x9d\x25\x01\xf8\x33\xd2\xdd\x71\x2a\x76\x9c\x94\x98\x5f\x2e\xb2\xe7\x09\xbc\xf1\x69\xeb\xc2\x38\x5f\x09\xec\x4e\x73\x83\x3d\x84\xb8\x73\x1b\x96\x38\x44\x39\xf1\x7a\xf4\xce\xec\xab\x9e\xf0\x61\x7f\x36\xf0\xa6\x1d\x23\x8d\xb3\x74\x68\x8e\x7a\x7e\xf1\x43\xde\x31\xcd\xfc\xb2\xca\x2a\xb8\xb0\xfd\x14\x36\x58\xe6\xe3\xe9\xde\x9a\x56\x91\xca\x6d\xd9\x4e\xe0\xf5\xe8\x4f\x09\x36\xfd\x65\xb9\xbf\xa8\xf2\x4e\x09\xa3\x6b\x43\x5c\x0d\xe8\x53\x77\x32\xea\xcb\x72\xfb\x3d\x21\xeb\x7c\x12\xa2\x07\xfa\xb0\xfa\x48\x98\x7a\x25\xe6\x1f\xdd\xc4\xff\xd6\x6a\x9a\x5e\xcd\x73\xbe\xe3\x9e\xac\x47\x83\x58\xfd\x13\x00\x00\xff\xff\xe4\x57\x83\x28\xf9\x07\x00\x00")

func workerEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeConfigYaml,
		"worker/etc/origin/node/node-config.yaml",
	)
}

func workerEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xeb\x86\x64\x03\x26\x29\xce\x1a\x04\x55\x90\x0e\x45\x37\x0c\x79\xc8\x0f\x24\x5b\x5f\x8a\x22\xa5\xc9\xb3\xc5\x99\x22\x19\xde\xd1\xae\x97\xf6\x7f\x1f\x48\x4b\x8a\xbd\x38\x5d\xd1\x3e\x59\x77\xba\xfb\x78\xf7\xdd\x77\xa2\x85\xd7\x6f\x30\x90\x76\xb6\x86\xc5\x78\x34\xd7\x56\xd5\x70\xe5\xd4\xa8\x45\x16\x4a\xb0\xa8\x47\x00\xc2\x5a\xc7\x82\xb5\xb3\x94\x4c\x00\x92\x0d\xaa\x68\x30\x94\xc2\xf8\x46\x94\xf3\x38\xc1\x60\x91\x91\x4a\xed\x2a\x19\x34\x6b\x29\x4c\xe1\x9d\xaa\x61\x7f\x7f\x04\x60\xc4\x04\x4d\x97\x2c\xbc\xaf\xc1\x2d\x28\x1b\xd2\xb5\xde\x59\xb4\x5c\x83\x45\x5e\xba\x30\xcf\x6e\xe7\xd1\x52\xa3\xa7\x9c\xf1\x76\xc7\xf0\xca\x63\x0d\xda\x4e\x83\x18\x01\x58\xd1\x62\x0f\x9b\x9e\xc9\x0b\x99\x1c\x3d\x50\x41\xca\x8e\xc8\xa3\x4c\x45\x48\x67\x59\x68\x8b\x21\x97\x54\xa4\x2a\x5a\x61\xd5\xba\xbe\x02\xaa\x89\xb6\xd5\x44\x50\xd3\xd9\x85\xec\x1e\x3e\xe6\x5f\x80\xef\xbf\xdb\x0e\x01\x20\x64\x28\x30\x3a\xf0\xda\xe3\x54\x68\x33\xea\x43\x41\x4f\x41\x58\xc7\x0d\x06\xf0\xc1\x49\x24\x02\x4d\x60\x34\x31\x5a\x6d\x67\xe0\x2c\x70\x83\x20\xad\x2e\x08\xc3\x02\x03\x90\x93\x73\xe4\x9f\x61\x29\x34\x43\xb4\xac\x0d\x68\x06\xfc\xa0\x99\x3a\x54\x0e\xc2\xc3\xfe\x5c\x1b\x03\x3f\xfc\xf8\xb7\x9b\x10\x14\xfe\xa7\x93\x1c\x02\x07\xfb\xf0\xe7\xef\xd7\xe7\x5d\xe4\xb2\xd1\x06\x81\x43\xc4\x13\x50\xae\x73\x42\x2a\xaa\x8a\x14\x2a\x6a\x44\xc0\x2a\xb1\xb4\xa0\xa5\x66\xd9\x54\x24\x83\xf6\x4c\x95\x5b\x50\x21\xd9\x00\xb1\xe0\x48\xb0\xf7\xb2\x52\xb8\xa8\x6c\x34\xe6\x24\xd5\x6b\x07\x28\x00\x94\x8d\x83\x67\x4b\x11\x52\x3f\x35\xbc\x7a\xdc\xad\x8c\x21\xa0\x65\xb3\x82\x56\x58\x31\x4b\x6d\x5f\xbe\xb9\x59\x77\x98\x8c\x23\x82\xb2\x2c\x9f\xc1\xe1\xcb\xbd\xf1\x06\x30\x19\x44\x0f\x47\xb0\x97\x03\x87\x17\x68\x08\x37\xa2\x26\x01\xc5\x7c\xb0\xa7\xba\x7b\x54\xce\xe2\xc3\x14\x8c\x88\x56\x36\xe9\xd4\xce\x35\x8d\x56\x26\x49\xc3\x5d\xd4\x0c\xf7\x1b\x78\x5f\x4c\x8c\xf3\x9b\x24\x64\xee\x3b\xc7\xa7\xcd\x39\xe5\x03\x6e\xce\xfe\xd8\x98\xca\x97\x73\x1f\x18\x8a\xc2\xba\x22\xb9\xba\x30\x05\x45\x41\x2b\x62\x6c\x0b\xad\x4e\x83\xb0\xca\xb5\x0f\x8d\x5e\x23\x71\xd0\x92\xb3\xa8\x6c\x6c\x27\x18\xc0\x4d\xc1\x73\x13\x50\x28\x82\x2d\x20\x19\x50\x30\x12\xb0\x83\x80\x2a\x4a\x4c\x59\x03\x94\x68\x5d\xb4\x9c\xb2\xaf\x6f\x6e\x92\x04\x23\x21\x25\xbd\x36\x8e\x98\x60\xa9\xb9\x49\xf3\x5c\x81\x74\x01\x69\x48\x6b\x98\x3d\xd5\x55\x35\x89\xb3\x7f\xb4\x31\xa2\x0c\xa8\x1a\xc1\xa5\x74\x6d\x45\x8d\x5b\xde\x4e\xe2\xac\x94\x33\xfd\xab\x56\xa7\xe3\xa3\xe3\xf1\x2f\xc7\x2f\xbe\x36\xf7\xf0\xf8\xc5\xf1\x68\x50\xf4\xdb\xb7\xf0\xde\x26\xd5\xbd\x87\x62\xc6\x30\x3e\x84\x77\xef\x1e\x89\x75\xdd\x7f\x62\x37\xf3\x9a\x77\x2c\x6d\xef\xa5\x47\x7b\xbb\xb8\xc9\xc4\x40\x09\x59\xc2\xb7\xd2\xd9\xa9\x9e\xd5\xb6\x08\xb8\x10\x46\x2b\xc1\x2e\x14\x1d\x93\xa7\xcf\xbf\x19\xb5\x11\x56\x19\x7c\x40\x1c\xf7\xfa\x19\x44\xfc\x55\x42\x51\x93\xfe\x4b\xb2\x43\x28\xbb\x3e\x0b\xfd\xa2\x9d\xac\x97\x26\xd3\xd9\x8a\x19\xd6\x70\x7f\x0f\xe5\xeb\x5c\x6e\x79\x96\x3c\x54\x5e\x38\x85\xf0\x11\xee\xa2\x63\x84\x4f\x6b\xa1\x77\x1f\xdf\x87\x02\xb3\x37\x20\xb9\x18\x24\x76\xdf\x7d\x00\xa3\x5b\xcd\x83\x05\x20\x7d\xac\xe1\xf0\xe0\xa0\x1d\x3c\x2d\xb6\x2e\xac\x6a\x78\x7e\x70\x70\xde\x53\x10\xf0\x2e\x22\x3d\xca\x1b\xef\x48\x1b\x0f\x69\x84\x32\x06\xcd\xab\xd7\xce\x32\x7e\xe0\x3e\xd7\x07\xbd\xd0\x06\x67\xa8\xea\xdc\x7c\x7f\x44\xb4\xaf\xe8\x2f\xc2\x50\x77\x1b\xbc\x70\x26\xb6\x78\x9e\xe4\x4f\xfd\xad\x90\x97\xe1\x4a\x70\x53\x43\x65\xf4\xa4\x6a\x5d\xba\x02\x7b\xd9\xaf\x29\x48\x8b\x51\x6c\xbf\x48\x93\xbd\xb4\x66\xb5\x71\xe0\x36\x56\x88\xb6\xfa\x2f\x75\x5b\x78\x21\xda\xa2\xbf\x2f\xb7\x53\x17\x22\x7c\x4b\x3a\xad\x76\x54\xff\xe0\xfc\xdf\xca\x91\xe5\xe7\x8f\x5e\x0b\xbd\xd8\x8e\x49\x6f\x2e\xd6\xf7\xf8\x80\x9c\x7c\x57\x67\xbf\x0d\xb6\x0f\xda\xe5\xf1\x19\x41\x74\x91\x01\x3b\x21\x5b\xa7\xb0\xe8\xff\x61\x8c\xfa\x49\x75\xf7\x78\x86\x49\xb5\xf5\xe3\xde\x3d\xad\x9d\xb3\x7a\x32\x7b\x17\xc1\x3b\xe9\x7d\x12\xa1\xa7\xf4\x11\xcb\x4f\x66\x64\x66\x83\x9e\xe9\xcf\x1e\xbd\x83\xde\x7f\x03\x00\x00\xff\xff\x41\x1c\xe0\x81\xd0\x09\x00\x00")

func workerEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsOvsYaml,
		"worker/etc/origin/node/pods/ovs.yaml",
	)
}

func workerEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x6d\x6f\xdb\x36\x10\xfe\xee\x5f\x71\xcb\x8a\x66\x1b\x46\x29\x2d\xd0\x61\x50\xd1\x02\x59\xe2\x75\x06\x12\x27\x68\x93\x62\x40\x51\x04\x34\x75\xb6\x38\x53\xa4\x4a\x9e\x94\x78\x49\xff\xfb\x40\xea\xcd\x8e\x23\x27\xd9\x17\x5b\xbc\x97\xe7\x5e\x78\xcf\x49\xbc\x90\x9f\xd1\x3a\x69\x74\x02\xd5\xab\xd1\x52\xea\x34\x81\x73\x93\x8e\x72\x24\x9e\x72\xe2\xc9\x08\x80\x6b\x6d\x88\x93\x34\xda\xf9\x23\x80\x13\x19\xa6\xa5\x42\x1b\x71\x55\x64\x3c\x5a\x96\x33\xb4\x1a\x09\x5d\x24\x4d\x2c\xac\x24\x29\xb8\x62\x85\x49\x13\xd8\xdb\x1b\x01\x28\x3e\x43\xd5\x38\xf3\xa2\x48\xc0\xa5\x3a\x1c\x84\xc9\x0b\xa3\x51\x53\x02\x1a\xe9\xda\xd8\x65\x10\x9b\x02\xb5\xcb\xe4\x9c\x02\xde\xc3\x36\xb4\x2a\x30\x01\xa9\xe7\x96\x8f\x00\x34\xcf\xb1\x85\xf5\xcf\xae\xe0\x02\x93\x1e\x88\x79\x95\x2b\x50\xf8\x24\x84\xd1\xc4\xa5\x46\x1b\x52\x62\x3e\x8b\x9c\xeb\xb4\xce\x8f\x41\x3c\x93\x3a\x9e\x71\x97\x35\x67\x26\x9a\x87\xbb\xf0\x0f\xf0\xe3\x0f\x9b\x26\x00\x0e\x09\x18\x96\x06\x0a\x59\xe0\x9c\x4b\x35\x6a\x4d\x41\xce\x81\x6b\x43\x19\x5a\x28\xac\x11\xe8\x1c\x48\x07\x4a\x3a\x42\x2d\xf5\x02\x8c\x06\xca\x10\x84\x96\xcc\xa1\xad\xd0\x82\x33\x62\x89\xf4\x2b\x5c\x73\x49\x50\x6a\x92\x0a\x24\x01\xde\x48\x72\x0d\x2a\x59\x5e\xc0\xfe\x52\x2a\x05\x2f\x7e\xfa\xc7\xcc\x1c\xb0\xe2\xe7\xb7\xc1\x04\x0e\xf6\xe1\x62\xfc\xf1\xb4\xb1\xbc\xce\xa4\x42\x20\x5b\xe2\x5b\x48\x4d\x23\x04\x9f\x14\x8a\xcc\xc0\x3e\xa1\xa3\x7d\xb8\xf3\x31\x39\x01\x83\xcb\xe9\xe4\x6f\x76\x74\x36\x9d\x8e\x8f\x2e\x92\xb8\xe2\x36\xb6\xa5\x8e\x37\xda\x18\xf7\xa9\x46\x3e\x55\x78\x1f\xa7\x58\xc5\xba\x54\xea\xad\x2f\x45\x77\x51\xa0\x0e\xb2\x77\xcd\xad\x2f\x35\x81\xc3\xed\x46\x88\xd2\x5a\xd4\xa4\x56\xdb\x2d\x39\x9a\x4e\x36\x7a\xe1\x55\x6f\x1c\x44\x51\xb4\x07\xaf\xdf\xbf\x7c\xb5\x16\xc7\x29\xc4\x02\xde\xc0\xcb\x60\xd8\x29\x50\x39\x5c\xb3\x9a\x59\xe4\xcb\xee\x3c\x97\xcd\x63\x6a\x34\xf6\xf7\x75\xc1\x97\x08\xc6\xdf\x43\x33\x6d\x30\x2f\xb5\x08\xd3\xdf\x26\xa6\x4d\xda\xc2\xda\x1c\xd8\xc7\x39\xc4\x48\xc2\xf7\x25\xd6\x48\x51\x1a\xff\x7e\xc0\xfa\x96\x35\x30\x91\x30\x7a\xde\x78\x89\xa2\xf6\x32\x05\x05\x2f\x3f\x4d\xbf\x40\x9c\x19\x47\x1b\xb2\x36\x2b\x39\x87\x2f\x5f\x80\x35\x71\xdc\xca\x79\x2c\xb9\x88\x8d\x95\x0b\xa9\x99\xcf\x07\xbe\x7e\xbd\xd7\xfd\x30\x93\x06\xb8\x52\x78\x53\x18\xdb\x77\xc5\x99\xd2\x0a\xdc\x81\x35\xea\x1a\xd4\x3c\xe1\x0d\x8a\x9e\x4b\xe0\x88\x5b\xea\xda\xc3\x58\x8d\xf0\x2e\x00\xd6\x30\xb1\x87\x09\x3f\x8d\x32\x5a\xf1\x5c\x01\x63\x7e\x55\x0c\x99\xbb\x54\x47\xbd\x1e\x18\x53\x66\xa1\xb0\x42\xf5\xee\xc5\xed\xf1\xf8\x8f\xcb\x0f\x57\x27\x67\x1f\x4e\xc6\x9f\xc7\x27\x09\x7b\xfd\x3d\xa4\x86\xba\x6a\x59\x5b\x6f\x80\xb3\xf3\xf1\xf4\xd3\x5f\x93\x3f\x2f\xae\x8e\xa7\x9f\xae\x8e\xcf\x4e\x0f\x27\xd3\xa6\x88\x8a\xab\x12\x13\x10\xaa\x74\x84\x36\x52\x46\x70\x15\x54\x32\xe7\x0b\x4c\xe0\xf6\x16\xa2\xa3\x3a\xd9\x89\x97\xb8\x68\xea\xfb\x7a\x07\xdf\x4a\x43\x08\xdf\xeb\x88\xeb\x8b\x06\xc0\xf7\xd5\xb5\x19\x74\x6b\xe5\xdc\x58\x4a\xe0\xd5\xc1\xeb\x37\xbf\x35\xb1\xfd\xcd\x6e\x4b\x6b\xac\x0c\xb9\xa2\xec\xdf\x20\xb3\x58\x5f\x4e\x83\xe9\x05\xdf\x4a\x74\xd4\x9d\xfd\xec\x94\x1e\x25\xef\x04\x39\xe6\xc6\xae\xbc\xec\xe0\xb4\x1e\x69\x87\xa2\xb4\x92\x56\x47\x46\x13\xde\x50\xeb\x5b\x58\x59\x49\x85\x0b\x4c\x93\xb0\x11\xda\x10\xa5\x3e\x74\x97\x0e\x6d\x02\x07\x41\x54\x19\x55\xe6\x78\x6a\x4a\xdd\xd7\x96\xfb\xd3\x39\xa7\x2c\x81\xad\x7b\xdb\xac\xc6\x38\x6a\xee\xbc\x2b\x81\xa7\x67\x5a\xad\xd6\x82\x6e\xe3\xed\x9a\xc3\x35\xe0\xce\x6c\x5d\xff\x68\x80\x66\x8d\x6d\xc3\x55\xdc\xb2\x56\xf1\xa0\x4b\x9c\xce\x4a\xf7\x40\x81\x8d\x23\xf3\xea\x67\x66\x11\x96\x69\xe5\xae\x25\x89\x6c\x07\xb2\xa9\x9e\x0d\xdc\xbf\x86\x77\xe0\xf6\x46\xff\x27\xef\xfe\x5d\x3a\x9c\xf8\x96\xd9\x26\xdc\xfd\x25\xb7\x8d\x64\x0a\x62\xfe\x1d\xd3\x2a\xb7\xa7\xa5\xdb\xb4\xdb\xce\x48\x22\x38\x6b\xa4\x74\xa0\x18\x25\x67\x2d\x82\x5f\x60\xee\x29\x95\x29\x39\x6b\x61\x83\xcf\x56\x99\xde\x72\x5a\x2b\xbb\x4e\x06\xd6\x4f\x8e\xbb\x73\x61\xa5\x09\xbc\x54\xdc\xb9\x69\xbd\x48\x56\x8e\x30\x67\xf5\xa6\x6c\x3e\x9c\x46\x2d\x05\x9b\xcf\x93\x00\xe3\xd3\x6f\x79\xfc\x20\x0d\x47\x43\x1c\xdc\x09\x30\xcc\xbb\x5d\xac\x1b\x84\xf4\xad\xcd\x8d\xff\x36\x74\xf7\x41\x7a\xf1\xa0\xf7\x3a\x4f\x1f\x64\xe9\x63\x9e\x71\xc7\xc7\x61\xae\x3e\x8a\xb1\xc6\xcf\x21\xa8\x9a\x9c\x8f\x22\xdd\xe3\xda\x63\x6c\x7c\x52\x66\x9b\x73\xfa\x04\xfe\x0d\xa2\xde\xe7\xe0\x20\x03\x77\x0e\xd0\x26\x15\x87\x89\xb8\xb3\xb8\x27\x30\xf2\x79\x7c\xfc\x2f\x00\x00\xff\xff\x7b\x9a\x32\x52\xd8\x0c\x00\x00")

func workerEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsSdnYaml,
		"worker/etc/origin/node/pods/sdn.yaml",
	)
}

func workerEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xc8\x41\x0a\x42\x31\x0c\x45\xd1\xb9\xab\xc8\x0a\xb2\x09\xe7\xa5\xe0\x0a\x8a\x3e\x25\xa8\x89\xbc\x96\x3a\x08\xdd\xfb\xa7\x93\x3f\xbb\xf7\x64\x0a\x9b\xbf\x20\x7a\x0d\x1f\xcd\x1c\xbc\x81\xd3\xee\xd0\xca\xf8\x81\xc3\xd0\xb5\x60\xfc\x83\xef\xca\x78\xda\x07\x5a\xda\x17\x1d\x9c\x60\x97\xb5\x2e\x7e\xae\x64\x8a\x6e\xca\x14\xf8\x63\xd7\x11\x00\x00\xff\xff\xe6\xca\x71\x01\x61\x00\x00\x00")

func workerEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeResolvConf,
		"worker/etc/origin/node/resolv.conf",
	)
}

func workerEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := workerEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func workerEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeSdnKubeconfig,
		"worker/etc/origin/node/sdn.kubeconfig",
	)
}

func workerEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeVolumeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xca\xb1\x0a\xc2\x40\x0c\x06\xe0\xfd\x9e\x22\x4f\x70\xd2\x35\xab\x60\x67\x11\xba\x9f\x35\xd5\xd0\x98\x3f\x5c\x2f\x3e\xbf\xd0\xfd\x6b\xa1\x8b\xf4\x43\xe1\x4c\x7b\x3e\xc5\x64\xd4\x15\xbe\xe9\xbb\x22\xc4\x8f\x8f\x6e\xa3\x2a\x2e\xbf\xa9\xec\xea\x2f\xa6\x05\x96\x5f\xb9\x9e\xa4\x18\xd6\x66\xf7\xc4\x68\x5c\x88\x42\xfa\xed\x31\x77\x64\x30\x4d\xb3\x96\x7f\x00\x00\x00\xff\xff\xc3\x01\xb7\xa5\x5c\x00\x00\x00")

func workerEtcOriginNodeVolumeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeVolumeConfigYaml,
		"worker/etc/origin/node/volume-config.yaml",
	)
}

func workerEtcOriginNodeVolumeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeVolumeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/volume-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x96\xa4\x16\xeb\x39\x27\x82\xf9\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\xcc\xc1\x0e\x82\x20\x18\x00\xe0\x3b\x4f\xe1\x13\xc0\x5c\x67\x0e\xa9\x7f\x8c\x45\xd0\x32\xbd\xba\xd4\x5f\xc7\x2a\x7e\x47\xe4\xc5\xf9\xee\x6d\xbd\xc0\xe7\xae\x77\xed\x6c\x2d\x59\x05\x45\xa3\x3a\xe3\x94\x81\x16\x8c\xdc\xb6\xac\xc2\x88\x53\xc6\x4b\x0a\x93\x9f\x79\x49\xef\x85\x02\x86\x64\x68\x36\xb8\xe2\x8b\x5b\x1a\x31\xdb\x77\xa6\x2f\x47\x05\x5d\x0b\xb7\x5a\x3b\x2b\xd7\x03\xcf\x73\x76\x6e\x0a\x28\x9d\x3d\x69\x25\x05\xa6\x41\x50\xf4\xb3\x0f\x22\xd0\x88\xa2\x27\x4a\x9f\x14\x1f\x0b\x7f\x7e\x7b\x1c\xfe\x3c\xfb\x05\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func workerEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcSysconfigAtomicOpenshiftNode,
		"worker/etc/sysconfig/atomic-openshift-node",
	)
}

func workerEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := workerEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common/etc/azsec/azsecmon-audit.rules":                             commonEtcAzsecAzsecmonAuditRules,
	"common/etc/default/mdsd":                                           commonEtcDefaultMdsd,
	"common/etc/fluentd/fluent.conf":                                    commonEtcFluentdFluentConf,
	"common/etc/mdsd.d/mdsd.xml":                                        commonEtcMdsdDMdsdXml,
	"common/etc/mdsd.d/secret/gcscert.pem":                              commonEtcMdsdDSecretGcscertPem,
	"common/etc/mdsd.d/secret/gcskey.pem":                               commonEtcMdsdDSecretGcskeyPem,
	"master/etc/aro-admission-controller/aro-admission-controller.yaml": masterEtcAroAdmissionControllerAroAdmissionControllerYaml,
	"master/etc/etcd/ca.crt":                                            masterEtcEtcdCaCrt,
	"master/etc/etcd/etcd.conf":                                         masterEtcEtcdEtcdConf,
	"master/etc/etcd/peer.crt":                                          masterEtcEtcdPeerCrt,
	"master/etc/etcd/peer.key":                                          masterEtcEtcdPeerKey,
	"master/etc/etcd/server.crt":                                        masterEtcEtcdServerCrt,
	"master/etc/etcd/server.key":                                        masterEtcEtcdServerKey,
	"master/etc/origin/cloudprovider/azure.conf":                        masterEtcOriginCloudproviderAzureConf,
	"master/etc/origin/master/admin.crt":                                masterEtcOriginMasterAdminCrt,
	"master/etc/origin/master/admin.key":                                masterEtcOriginMasterAdminKey,
	"master/etc/origin/master/admin.kubeconfig":                         masterEtcOriginMasterAdminKubeconfig,
	"master/etc/origin/master/admission-webhook.kubeconfig":             masterEtcOriginMasterAdmissionWebhookKubeconfig,
	"master/etc/origin/master/aggregator-front-proxy.crt":               masterEtcOriginMasterAggregatorFrontProxyCrt,
	"master/etc/origin/master/aggregator-front-proxy.key":               masterEtcOriginMasterAggregatorFrontProxyKey,
	"master/etc/origin/master/ca-bundle.crt":                            masterEtcOriginMasterCaBundleCrt,
	"master/etc/origin/master/ca.crt":                                   masterEtcOriginMasterCaCrt,
	"master/etc/origin/master/ca.key":                                   masterEtcOriginMasterCaKey,
	"master/etc/origin/master/client.secret":                            masterEtcOriginMasterClientSecret,
	"master/etc/origin/master/front-proxy-ca.crt":                       masterEtcOriginMasterFrontProxyCaCrt,
	"master/etc/origin/master/master-config.yaml":                       masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/master.etcd-ca.crt":                       masterEtcOriginMasterMasterEtcdCaCrt,
	"master/etc/origin/master/master.etcd-client.crt":                   masterEtcOriginMasterMasterEtcdClientCrt,
	"master/etc/origin/master/master.etcd-client.key":                   masterEtcOriginMasterMasterEtcdClientKey,
	"master/etc/origin/master/master.kubelet-client.crt":                masterEtcOriginMasterMasterKubeletClientCrt,
	"master/etc/origin/master/master.kubelet-client.key":                masterEtcOriginMasterMasterKubeletClientKey,
	"master/etc/origin/master/master.proxy-client.crt":                  masterEtcOriginMasterMasterProxyClientCrt,
	"master/etc/origin/master/master.proxy-client.key":                  masterEtcOriginMasterMasterProxyClientKey,
	"master/etc/origin/master/master.server.crt":                        masterEtcOriginMasterMasterServerCrt,
	"master/etc/origin/master/master.server.key":                        masterEtcOriginMasterMasterServerKey,
	"master/etc/origin/master/named/console.crt":                        masterEtcOriginMasterNamedConsoleCrt,
	"master/etc/origin/master/named/console.key":                        masterEtcOriginMasterNamedConsoleKey,
	"master/etc/origin/master/openshift-master.kubeconfig":              masterEtcOriginMasterOpenshiftMasterKubeconfig,
	"master/etc/origin/master/scheduler.json":                           masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/service-signer.crt":                       masterEtcOriginMasterServiceSignerCrt,
	"master/etc/origin/master/service-signer.key":                       masterEtcOriginMasterServiceSignerKey,
	"master/etc/origin/master/serviceaccounts.private.key":              masterEtcOriginMasterServiceaccountsPrivateKey,
	"master/etc/origin/master/serviceaccounts.public.key":               masterEtcOriginMasterServiceaccountsPublicKey,
	"master/etc/origin/master/session-secrets.yaml":                     masterEtcOriginMasterSessionSecretsYaml,
	"master/etc/origin/node/ca.crt":                                     masterEtcOriginNodeCaCrt,
	"master/etc/origin/node/client-ca.crt":                              masterEtcOriginNodeClientCaCrt,
	"master/etc/origin/node/node-config.yaml":                           masterEtcOriginNodeNodeConfigYaml,
	"master/etc/origin/node/node.kubeconfig":                            masterEtcOriginNodeNodeKubeconfig,
	"master/etc/origin/node/pods/apiserver.yaml":                        masterEtcOriginNodePodsApiserverYaml,
	"master/etc/origin/node/pods/aroadmissioncontroller.yaml":           masterEtcOriginNodePodsAroadmissioncontrollerYaml,
	"master/etc/origin/node/pods/controllers.yaml":                      masterEtcOriginNodePodsControllersYaml,
	"master/etc/origin/node/pods/etcd.yaml":                             masterEtcOriginNodePodsEtcdYaml,
	"master/etc/origin/node/pods/ovs.yaml":                              masterEtcOriginNodePodsOvsYaml,
	"master/etc/origin/node/pods/sdn.yaml":                              masterEtcOriginNodePodsSdnYaml,
	"master/etc/origin/node/resolv.conf":                                masterEtcOriginNodeResolvConf,
	"master/etc/origin/node/sdn.kubeconfig":                             masterEtcOriginNodeSdnKubeconfig,
	"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt":           masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master/etc/sysconfig/atomic-openshift-node":                        masterEtcSysconfigAtomicOpenshiftNode,
	"master/root/.kube/config":                                          masterRootKubeConfig,
	"worker/etc/origin/cloudprovider/azure.conf":                        workerEtcOriginCloudproviderAzureConf,
	"worker/etc/origin/node/bootstrap.kubeconfig":                       workerEtcOriginNodeBootstrapKubeconfig,
	"worker/etc/origin/node/ca.crt":                                     workerEtcOriginNodeCaCrt,
	"worker/etc/origin/node/node-bootstrapper.crt":                      workerEtcOriginNodeNodeBootstrapperCrt,
	"worker/etc/origin/node/node-bootstrapper.key":                      workerEtcOriginNodeNodeBootstrapperKey,
	"worker/etc/origin/node/node-config.yaml":                           workerEtcOriginNodeNodeConfigYaml,
	"worker/etc/origin/node/pods/ovs.yaml":                              workerEtcOriginNodePodsOvsYaml,
	"worker/etc/origin/node/pods/sdn.yaml":                              workerEtcOriginNodePodsSdnYaml,
	"worker/etc/origin/node/resolv.conf":                                workerEtcOriginNodeResolvConf,
	"worker/etc/origin/node/sdn.kubeconfig":                             workerEtcOriginNodeSdnKubeconfig,
	"worker/etc/origin/node/volume-config.yaml":                         workerEtcOriginNodeVolumeConfigYaml,
	"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt":           workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"worker/etc/sysconfig/atomic-openshift-node":                        workerEtcSysconfigAtomicOpenshiftNode,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"common": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"azsec": {nil, map[string]*bintree{
				"azsecmon-audit.rules": {commonEtcAzsecAzsecmonAuditRules, map[string]*bintree{}},
			}},
			"default": {nil, map[string]*bintree{
				"mdsd": {commonEtcDefaultMdsd, map[string]*bintree{}},
			}},
			"fluentd": {nil, map[string]*bintree{
				"fluent.conf": {commonEtcFluentdFluentConf, map[string]*bintree{}},
			}},
			"mdsd.d": {nil, map[string]*bintree{
				"mdsd.xml": {commonEtcMdsdDMdsdXml, map[string]*bintree{}},
				"secret": {nil, map[string]*bintree{
					"gcscert.pem": {commonEtcMdsdDSecretGcscertPem, map[string]*bintree{}},
					"gcskey.pem":  {commonEtcMdsdDSecretGcskeyPem, map[string]*bintree{}},
				}},
			}},
		}},
	}},
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"aro-admission-controller": {nil, map[string]*bintree{
				"aro-admission-controller.yaml": {masterEtcAroAdmissionControllerAroAdmissionControllerYaml, map[string]*bintree{}},
			}},
			"etcd": {nil, map[string]*bintree{
				"ca.crt":     {masterEtcEtcdCaCrt, map[string]*bintree{}},
				"etcd.conf":  {masterEtcEtcdEtcdConf, map[string]*bintree{}},
				"peer.crt":   {masterEtcEtcdPeerCrt, map[string]*bintree{}},
				"peer.key":   {masterEtcEtcdPeerKey, map[string]*bintree{}},
				"server.crt": {masterEtcEtcdServerCrt, map[string]*bintree{}},
				"server.key": {masterEtcEtcdServerKey, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {masterEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"master": {nil, map[string]*bintree{
					"admin.crt":                    {masterEtcOriginMasterAdminCrt, map[string]*bintree{}},
					"admin.key":                    {masterEtcOriginMasterAdminKey, map[string]*bintree{}},
					"admin.kubeconfig":             {masterEtcOriginMasterAdminKubeconfig, map[string]*bintree{}},
					"admission-webhook.kubeconfig": {masterEtcOriginMasterAdmissionWebhookKubeconfig, map[string]*bintree{}},
					"aggregator-front-proxy.crt":   {masterEtcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
					"aggregator-front-proxy.key":   {masterEtcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
					"ca-bundle.crt":                {masterEtcOriginMasterCaBundleCrt, map[string]*bintree{}},
					"ca.crt":                       {masterEtcOriginMasterCaCrt, map[string]*bintree{}},
					"ca.key":                       {masterEtcOriginMasterCaKey, map[string]*bintree{}},
					"client.secret":                {masterEtcOriginMasterClientSecret, map[string]*bintree{}},
					"front-proxy-ca.crt":           {masterEtcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
					"master-config.yaml":           {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"master.etcd-ca.crt":           {masterEtcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
					"master.etcd-client.crt":       {masterEtcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
					"master.etcd-client.key":       {masterEtcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
					"master.kubelet-client.crt":    {masterEtcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
					"master.kubelet-client.key":    {masterEtcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
					"master.proxy-client.crt":      {masterEtcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
					"master.proxy-client.key":      {masterEtcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
					"master.server.crt":            {masterEtcOriginMasterMasterServerCrt, map[string]*bintree{}},
					"master.server.key":            {masterEtcOriginMasterMasterServerKey, map[string]*bintree{}},
					"named": {nil, map[string]*bintree{
						"console.crt": {masterEtcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
						"console.key": {masterEtcOriginMasterNamedConsoleKey, map[string]*bintree{}},
					}},
					"openshift-master.kubeconfig": {masterEtcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
					"scheduler.json":              {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"service-signer.crt":          {masterEtcOriginMasterServiceSignerCrt, map[string]*bintree{}},
					"service-signer.key":          {masterEtcOriginMasterServiceSignerKey, map[string]*bintree{}},
					"serviceaccounts.private.key": {masterEtcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
					"serviceaccounts.public.key":  {masterEtcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
					"session-secrets.yaml":        {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"ca.crt":           {masterEtcOriginNodeCaCrt, map[string]*bintree{}},
					"client-ca.crt":    {masterEtcOriginNodeClientCaCrt, map[string]*bintree{}},
					"node-config.yaml": {masterEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"node.kubeconfig":  {masterEtcOriginNodeNodeKubeconfig, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"apiserver.yaml":              {masterEtcOriginNodePodsApiserverYaml, map[string]*bintree{}},
						"aroadmissioncontroller.yaml": {masterEtcOriginNodePodsAroadmissioncontrollerYaml, map[string]*bintree{}},
						"controllers.yaml":            {masterEtcOriginNodePodsControllersYaml, map[string]*bintree{}},
						"etcd.yaml":                   {masterEtcOriginNodePodsEtcdYaml, map[string]*bintree{}},
						"ovs.yaml":                    {masterEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml":                    {masterEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {masterEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {masterEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {masterEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"root": {nil, map[string]*bintree{
			".kube": {nil, map[string]*bintree{
				"config": {masterRootKubeConfig, map[string]*bintree{}},
			}},
		}},
	}},
	"worker": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {workerEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"bootstrap.kubeconfig":  {workerEtcOriginNodeBootstrapKubeconfig, map[string]*bintree{}},
					"ca.crt":                {workerEtcOriginNodeCaCrt, map[string]*bintree{}},
					"node-bootstrapper.crt": {workerEtcOriginNodeNodeBootstrapperCrt, map[string]*bintree{}},
					"node-bootstrapper.key": {workerEtcOriginNodeNodeBootstrapperKey, map[string]*bintree{}},
					"node-config.yaml":      {workerEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"ovs.yaml": {workerEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml": {workerEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":        {workerEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig":     {workerEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
					"volume-config.yaml": {workerEtcOriginNodeVolumeConfigYaml, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {workerEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

// Code generated by go-bindata.
// sources:
// data/common/etc/default/mdsd
// data/common/etc/fluentd/fluent.conf
// data/common/etc/mdsd.d/mdsd.xml
// data/common/etc/mdsd.d/secret/gcscert.pem
// data/common/etc/mdsd.d/secret/gcskey.pem
// data/master/etc/etcd/ca.crt
// data/master/etc/etcd/etcd.conf
// data/master/etc/etcd/peer.crt
// data/master/etc/etcd/peer.key
// data/master/etc/etcd/server.crt
// data/master/etc/etcd/server.key
// data/master/etc/origin/cloudprovider/azure.conf
// data/master/etc/origin/master/admin.crt
// data/master/etc/origin/master/admin.key
// data/master/etc/origin/master/admin.kubeconfig
// data/master/etc/origin/master/aggregator-front-proxy.crt
// data/master/etc/origin/master/aggregator-front-proxy.key
// data/master/etc/origin/master/ca-bundle.crt
// data/master/etc/origin/master/ca.crt
// data/master/etc/origin/master/ca.key
// data/master/etc/origin/master/client.secret
// data/master/etc/origin/master/front-proxy-ca.crt
// data/master/etc/origin/master/master-config.yaml
// data/master/etc/origin/master/master.etcd-ca.crt
// data/master/etc/origin/master/master.etcd-client.crt
// data/master/etc/origin/master/master.etcd-client.key
// data/master/etc/origin/master/master.kubelet-client.crt
// data/master/etc/origin/master/master.kubelet-client.key
// data/master/etc/origin/master/master.proxy-client.crt
// data/master/etc/origin/master/master.proxy-client.key
// data/master/etc/origin/master/master.server.crt
// data/master/etc/origin/master/master.server.key
// data/master/etc/origin/master/named/console.crt
// data/master/etc/origin/master/named/console.key
// data/master/etc/origin/master/openshift-master.kubeconfig
// data/master/etc/origin/master/scheduler.json
// data/master/etc/origin/master/service-signer.crt
// data/master/etc/origin/master/service-signer.key
// data/master/etc/origin/master/serviceaccounts.private.key
// data/master/etc/origin/master/serviceaccounts.public.key
// data/master/etc/origin/master/session-secrets.yaml
// data/master/etc/origin/node/ca.crt
// data/master/etc/origin/node/client-ca.crt
// data/master/etc/origin/node/node-config.yaml
// data/master/etc/origin/node/node.kubeconfig
// data/master/etc/origin/node/pods/apiserver.yaml
// data/master/etc/origin/node/pods/controllers.yaml
// data/master/etc/origin/node/pods/etcd.yaml
// data/master/etc/origin/node/pods/ovs.yaml
// data/master/etc/origin/node/pods/sdn.yaml
// data/master/etc/origin/node/resolv.conf
// data/master/etc/origin/node/sdn.kubeconfig
// data/master/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/master/etc/sysconfig/atomic-openshift-node
// data/master/root/.kube/config
// data/master/var/lib/origin/.docker/config.json
// data/worker/etc/origin/cloudprovider/azure.conf
// data/worker/etc/origin/node/bootstrap.kubeconfig
// data/worker/etc/origin/node/ca.crt
// data/worker/etc/origin/node/node-bootstrapper.crt
// data/worker/etc/origin/node/node-bootstrapper.key
// data/worker/etc/origin/node/node-config.yaml
// data/worker/etc/origin/node/pods/ovs.yaml
// data/worker/etc/origin/node/pods/sdn.yaml
// data/worker/etc/origin/node/resolv.conf
// data/worker/etc/origin/node/sdn.kubeconfig
// data/worker/etc/origin/node/volume-config.yaml
// data/worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt
// data/worker/etc/sysconfig/atomic-openshift-node
// data/worker/var/lib/origin/.docker/config.json
// DO NOT EDIT!

package startup

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _commonEtcDefaultMdsd = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x6d\x6f\xe2\x46\x10\xfe\xce\xaf\x18\x91\xea\x72\x27\xc5\x36\x34\x2f\x4d\x22\xa1\x0a\x11\x83\xac\x02\xa6\x86\x3b\xb5\x9f\xd0\x7a\x77\x6c\x6f\x63\x76\xdd\xdd\x35\x39\x1a\xe5\xbf\x77\xd6\x10\x5d\xd5\x6b\x4e\xf7\xa1\x12\x42\xde\x9d\x99\x67\x9e\x79\x79\xf6\x0c\xd2\xc6\x49\xad\x2c\x14\xda\xc0\x4e\x58\xd1\x3b\x83\x49\x85\xfc\x11\xce\xfd\x09\x82\xea\xbc\x33\x09\x74\x4c\xd6\x36\xec\xf5\x16\x0f\xeb\x87\x6d\x96\xce\xe3\xed\x2a\x8b\xa7\xc9\x6f\xa3\x68\xcf\x4c\x64\x5a\x15\xf9\x80\x48\x60\xc1\xda\xda\x1d\xdd\xd2\xd5\x26\x49\x97\xeb\x51\x3f\x20\xa4\x31\x04\x06\x7e\x78\xfe\x77\xfc\x0b\x04\x05\x5c\x0f\x06\xc3\x7e\x8f\x72\x27\x05\xb8\x4a\x5a\xa0\x1f\xaf\x98\x2a\x51\x5c\x00\xab\xad\x3e\x9d\x20\x42\xc7\xa3\x5a\x97\x46\x3b\xe6\x30\x14\x5d\xd2\x63\xb2\x79\x3a\x3b\x72\x21\xb3\x87\x9a\x6b\x26\x28\xb6\x86\x47\xa5\x9f\x14\x4c\xc6\xb6\x87\x9f\x1b\x6d\x1c\xac\xd7\xf3\xed\x24\xce\x36\xdb\x69\x32\x8f\x47\x1d\x64\xf3\x28\x23\x57\xdb\x88\xa3\x71\xf4\xcf\x82\xbc\x55\xa2\xc6\x90\x1b\xe7\xb1\xb2\xf8\xd7\x8f\x49\x16\x3f\xd0\xe7\x0c\x15\xee\x19\xa0\xda\x4b\xa3\xd5\x0e\x95\x0b\x21\xfe\xcc\x76\x4d\x8d\xf6\x1e\x36\x68\xdd\x05\x4c\xa5\xb1\x6e\xc5\x8c\x3b\xac\x8c\xa6\x0a\x1e\x24\x2b\x95\xb6\x4e\x72\xeb\x2f\x08\x65\x4a\x3d\x75\x15\x42\xd1\x12\xc1\x5a\x5a\x07\xba\xf8\x27\xa6\xbd\x00\x8b\x78\x4f\x9e\x95\x73\x8d\xbd\x8f\xa2\x3f\x98\xd9\x4b\x1b\x3c\x51\x82\x50\xf0\x90\x89\x70\x67\x0b\x17\x2a\x74\xd1\xcf\x0d\x2b\x71\x24\x34\x6f\xbb\xd0\x77\x16\xb9\x1f\xea\x68\x78\x79\x73\x29\xd8\x60\x18\xe4\x37\x28\x82\xab\x4b\x71\x15\xdc\xfd\x34\xc0\xa0\xb8\xbd\xcb\x07\xc3\xa1\xb8\xbe\x1b\x16\xef\xa4\x18\x89\xe1\x2d\x1b\x70\x91\x07\x98\x93\xf5\xea\xf6\x3a\x0f\xf2\x61\x9e\x07\x3c\xcf\x6f\x06\x37\x77\xe2\xf2\xfa\xc7\xbc\x77\xf6\xda\xbd\x45\xba\x4c\x36\x69\x96\x2c\x67\xdb\xd9\x64\xbd\x8d\x97\x9f\x92\x2c\x5d\x2e\xe2\xe5\x66\xf4\xfc\x0c\xe1\x44\xab\x42\x96\xe1\xb1\x4d\x73\x5d\x96\x52\x95\x74\xe7\x8c\xae\x57\x35\x53\x18\x7f\x29\x12\x5e\x5e\xfe\xbb\xb9\x63\xce\x75\x4b\x76\xc5\x76\xf8\x66\xe2\xf1\x64\x92\x7e\xfc\xce\xa4\xaf\x80\x5f\x25\xdc\xd0\x0c\x0c\x96\xd4\x2d\x20\x4c\xb0\x95\x6e\x6b\x01\xad\x45\x78\xaa\x50\x81\x74\x7e\xf3\xd1\xec\xa4\x42\x4b\x57\x92\x57\x60\x9d\x36\xd4\x6f\x60\x27\x4c\x6e\x50\x50\x31\x92\xd6\xd4\xfb\x9f\x20\x0c\xba\xd6\x28\x70\x1a\x16\xe3\x10\x30\x2c\x43\xe8\xfb\xd9\xb5\xb6\x7f\x01\x7d\x64\xdd\x57\x78\x2a\xd9\xd0\x9a\x1e\x2e\x28\xfa\xdc\x42\x4e\x4e\x3e\x4c\xe7\xa4\x38\x75\x54\xc3\x9e\xd5\x2d\x82\x56\xdd\xca\x7c\x5a\x40\xe5\x77\x49\x95\xdd\x91\xa8\x10\x89\xfc\x00\x7f\xb6\x68\x0e\xaf\xb7\xe3\xbf\x5a\x83\x90\x28\xeb\x98\xe2\x08\x0b\x92\xaf\x60\x8e\xc1\x1a\x69\x8b\xe8\xe2\x7d\x42\x9a\xf9\xd0\x49\xdb\xbb\xf7\x6b\xcd\x99\xdf\x99\xfe\x29\xd7\x7b\xda\x3e\x60\xb9\xde\x23\x70\x2d\x10\xac\x92\x4d\x83\xee\x43\xf8\xe6\x38\xb2\x78\x46\x5a\xff\xae\x69\x64\xc7\x86\x7f\x35\x8c\xa9\x17\x43\xc3\x5c\xe5\xeb\x6f\xda\xbc\x96\x1c\xbc\x20\x65\x21\x89\x1d\x89\x45\xd6\xe8\x67\x23\xbc\x9d\xb5\x44\x9c\xda\xde\x59\xba\xb7\xea\x49\x52\x64\x37\xc5\x63\x91\x6f\x73\xed\xc4\xef\xff\xbe\x3c\x00\x1e\x81\x9e\x13\x92\x0e\x4d\x2e\x2a\xb9\xf5\x89\xc3\x06\x77\xdf\xe2\xe8\x5b\xd7\x18\xb9\xf7\x14\x1e\xf1\xf0\x3f\x13\xfc\x25\xfe\xfd\x1b\xfc\x28\x5f\x47\xef\xef\x00\x00\x00\xff\xff\x9d\x6b\x10\x04\xc3\x05\x00\x00")

func commonEtcDefaultMdsdBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcDefaultMdsd,
		"common/etc/default/mdsd",
	)
}

func commonEtcDefaultMdsd() (*asset, error) {
	bytes, err := commonEtcDefaultMdsdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/default/mdsd", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcFluentdFluentConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\x50\x67\x2c\x09\xac\x5f\x8e\x53\x27\x82\xd1\xce\x70\xdd\xcd\x0f\x49\x8d\xd9\x7d\xd8\x8a\x42\xa0\xc5\x93\xc5\x9a\x22\x55\x92\x72\x66\x0c\xfb\xdf\x77\x92\xec\x38\x40\x90\xb7\x40\x0f\x22\xbf\xfb\xf8\xdd\x0f\xde\xf1\x1d\x7c\xd6\x06\x0c\xe6\x68\x50\x65\x08\x52\xeb\x1d\x30\x07\xae\x40\xc8\x65\x8d\xca\x71\xe0\x3a\xb3\x50\x10\x21\x81\xc2\xb9\xca\x26\x61\xd8\x40\xc1\xd1\x1e\x68\xb3\x0d\xf7\x61\x14\xc4\xc3\xb0\x37\xb1\xba\x36\x19\x7e\xe8\x01\xfc\xe6\x0e\x15\x82\x3d\x58\x87\x25\xa7\xbd\x63\x5b\xf8\x41\x56\xc5\x24\xef\x4d\xc2\x13\xf1\xc5\x09\xc7\x84\xa4\x4d\xae\x4d\x49\x81\xfc\xb0\x5a\xd1\xae\x62\xae\x80\x70\xcf\x4c\x28\xf5\x36\xd4\x15\x2a\x5b\x88\xdc\xf9\xac\xe6\xc2\x85\x57\x01\xa1\x0d\x4b\xdb\x34\x17\x12\x5f\x65\x06\xc4\x20\x1e\xe5\x6b\xd0\x16\xa9\x50\x0e\xcd\x9e\x49\x88\xa3\x26\x40\x51\x62\xba\xc3\x43\xbb\xb0\x8e\x95\xd5\x09\x3c\xc6\xd2\xff\xcb\xef\x97\x7e\x9f\xaf\xfb\x7f\x24\xfd\xfb\xa4\xbf\xfa\xfb\x98\xd6\xee\xd6\xa6\xad\xfe\xf3\xbc\x28\x10\x52\x7f\x4a\xf9\x9c\xa0\xc1\x4c\x1b\x9e\x3a\xc3\x94\x6d\x94\xd1\x90\x09\x15\xdb\x48\x4c\x4d\xbd\x21\xff\xa6\x46\x82\x26\x1d\xb1\x39\x08\x70\x3f\x5f\xad\xa6\xbf\xcf\xe1\x97\x7f\x3b\xf4\x9b\x77\x44\xbc\xef\x81\x12\xf2\x23\x7c\x04\xfa\x41\x02\x2f\xcd\xe4\x23\xc3\x94\xae\x57\x73\xa1\xb6\x17\xde\xd7\xf5\x67\xff\xd6\xbb\x0c\x5a\x04\x2f\xbc\xe9\x6a\xb6\x58\x78\x03\x10\x8a\x4a\x21\x78\x02\x89\xc1\x4a\xb2\x0c\x07\x50\x2b\x8e\xf9\x19\xb8\xfc\xaf\x8d\xe5\x1d\x70\xe6\xd8\xf1\x86\x92\x23\xd4\xd6\xa0\x12\x96\x0a\x8a\xe6\xbc\xf2\xf7\x3f\xff\xd9\x8e\xd2\x5d\xbd\x41\xbf\x41\x44\x86\x7e\x46\xa7\xe9\x72\xd2\xf1\x30\xc3\x11\x1f\x5f\xfb\x37\xc3\xe1\xc8\x8f\x63\xbc\xf3\xef\x6e\x79\xe4\x47\x51\xc4\xaf\x59\x7c\xf7\x7e\x7c\xf3\x3e\x8d\x5a\xfd\xd9\x97\x87\xf5\x74\xf1\x30\xff\xf3\x59\x01\x9e\xb0\xf4\x61\x7a\xff\x6a\x1d\x5e\xb0\x6c\x25\x85\xbb\xf0\x52\xef\xf2\x5b\xfc\x1d\xba\x8c\x96\x5f\x3e\xbd\xa9\xf0\xf0\x24\xdc\x98\x56\xcb\xe9\x6c\xfe\xa6\xf2\xd7\x27\xf9\x33\x69\xf1\xb6\x09\x8c\x3a\x0f\x93\xf0\xd4\x83\x93\xb0\xeb\x67\x5a\xd1\xa5\x67\x05\x5c\x5d\x9d\x3b\x9a\x3a\xe1\x91\x99\x66\xc8\x37\x75\x4e\x4f\x49\xda\xa2\x25\x96\xda\x1c\xce\xe0\xcf\x1a\x6b\x9a\xa5\x5a\xca\x94\x65\x4e\x68\x05\x1b\xa9\xb3\x1d\x11\xb8\xb0\x5d\xf7\xa3\x33\x87\x54\x8a\x52\xb8\xd3\x10\x50\xaf\x61\xce\x6a\xe9\xe8\x05\x62\xc6\x6d\x90\xe6\x50\x58\xf8\xfa\x69\x39\x80\xc7\x42\x50\x20\x25\xb7\xcd\x1b\x85\x56\xfd\xea\xc0\xd6\x55\xa5\x8d\x1b\x00\x53\x1c\xd6\xb3\x25\x14\x7a\x6b\x21\xd3\x4a\x61\xeb\xd2\xb6\x86\x92\xed\xd0\x02\x39\x51\x5a\xd8\x26\xc2\x27\xed\x2e\x72\xa5\x55\x3b\x80\x5d\x0b\x77\x03\xa8\x58\x89\xad\xaf\x76\x57\x68\xeb\x20\x1e\x8e\x83\x88\xbe\xb8\x85\x1a\xbf\x70\x13\x45\x71\x5b\xb7\xd3\xd1\x49\xd8\x96\xeb\x43\xef\xff\x00\x00\x00\xff\xff\xc8\x3e\xbe\x47\x6a\x05\x00\x00")

func commonEtcFluentdFluentConfBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcFluentdFluentConf,
		"common/etc/fluentd/fluent.conf",
	)
}

func commonEtcFluentdFluentConf() (*asset, error) {
	bytes, err := commonEtcFluentdFluentConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/fluentd/fluent.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcMdsdDMdsdXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xc4\x58\xdf\x4f\xe3\x38\x10\x7e\x86\xbf\x22\xf2\x3b\x4d\x00\x9d\x8e\x5d\x35\x5d\x95\x96\x5b\xaa\x6b\xd1\x1e\xe5\x4e\xa7\x7b\x41\xc6\x99\x06\x1f\x89\x1d\xf9\x47\x97\xb2\xc7\xff\x7e\xe3\xb8\x69\x93\xb2\x45\x8d\x28\x62\xb5\x0f\xb5\x3d\xdf\xcc\xe7\x99\xf9\xc6\x11\xdd\x2f\x8f\x79\x16\xcc\x41\x69\x2e\x45\x4c\x8e\x3b\x11\x09\x40\x30\x99\x70\x91\xc6\xc4\x9a\xd9\xd1\x19\xf9\xd2\x3b\xec\x4e\xa4\xe0\x46\x2a\xdc\x9d\x50\x41\x53\xc8\x41\x98\x0d\x98\xa0\x39\xe8\x82\x32\x88\xc9\x8f\x1f\x41\x67\x20\xc5\x8c\xa7\x9d\xaf\x20\x60\x4e\xc7\x32\x4d\x11\x7b\x55\x99\x04\xff\x05\x7f\x4f\xc6\x17\x9a\xd1\x02\x82\xe7\x67\x8c\x39\x47\x87\x7f\xad\xfc\x91\xc0\x70\x34\x35\x34\x2f\x62\x72\x12\x1d\xff\x7a\x14\x9d\x1d\x45\xc7\x37\x51\xf4\xb9\xfc\xdf\x89\xa2\xe8\x1f\xd2\x3b\x0c\xf0\x5f\xb7\xcf\x98\xb4\xc2\x68\xbf\xac\x6f\x05\x39\xd2\x7e\x00\xb5\x9d\x51\x65\xb8\xc9\x87\xeb\x21\xcc\xa8\xcd\x4c\x4c\x8c\xb2\x40\x02\x6a\x8d\xfc\x1d\x16\x31\x99\xd1\x4c\x03\x09\x97\xb1\xc3\x66\xf0\x6e\x2d\x3b\xfe\x4a\x32\xb3\x39\x66\x64\x4c\x55\x8a\x5e\x12\xef\xf4\x1a\x0c\x9e\xe1\x55\x47\x62\x48\x17\x3a\x26\x9f\x22\x52\x63\x3f\x4a\xdc\xa9\x59\x04\x68\x45\x85\x71\x59\xeb\x67\x9c\xa2\xdd\x35\x68\x69\x15\x03\xb7\x55\x43\x34\x50\x03\x99\x17\x52\x38\x06\xae\x22\x0e\x93\x62\x24\xd2\x5b\xa6\xc0\x50\x2e\x40\x4d\x41\xcd\x39\x83\xce\x58\x32\xea\x88\x6c\x24\xa0\x1b\xbe\xf0\xb6\x63\xb4\xa9\xbd\xd3\x4c\xf1\xa2\xbc\x5d\xb2\x25\xea\x37\x25\x0b\x50\x86\x83\xee\xf4\x9f\x70\x31\xe3\x19\x74\x1a\xc8\xe1\xde\x08\x55\x29\xfb\xaa\xa4\x2d\x7c\xde\x76\xe7\xd4\x00\xef\x9d\xd2\x2b\x6c\xdc\xd1\xfe\xe2\xc9\x6c\x19\xc7\xfd\x7a\xb3\xab\x91\x40\x61\x0a\x86\xed\x6c\x35\x38\x03\x6b\x40\x5d\x95\xc7\xa5\x56\xc2\x5a\x2b\xaf\x02\xd5\xc5\x99\xe2\x56\x95\x83\x3f\x35\xea\x25\x48\xb8\x7e\xf8\xc3\x4a\x43\x47\x62\x72\x1e\x93\x5f\x50\xde\xd1\x5a\x63\x6b\x51\x2d\x77\xa6\xec\x1e\x72\x5a\x17\xbc\xdf\x59\x92\xa4\x4f\x1a\xd8\xfc\x78\x53\x20\x03\xa7\x45\xb1\xb4\xf9\x8d\x32\x9e\x21\x2f\x12\xe4\x89\x36\x8b\x02\xb7\x72\xf3\xf9\xbb\x36\x0a\x67\x4f\xb9\x74\x3f\x7b\xdd\xd0\xa3\x5e\x73\x35\x45\xa5\xab\x17\xae\xb8\x30\xa7\x27\xad\x7d\x5d\xb8\xa1\x71\x83\xb3\xaf\xe9\xcc\x1a\x56\x73\x75\xa4\x66\xec\xf4\xf4\xf4\xd3\xae\xf4\x84\x9b\xe6\x97\x52\x9b\x3d\x5c\x76\xa2\xd3\xd6\x5e\xba\xa1\x2f\xcf\xeb\xf5\x3a\x79\xb5\x5e\xfd\xa7\x29\xb0\xd1\x70\x1f\xe5\x62\x54\x94\xca\x7b\xbb\xab\x77\xa8\xd6\x90\x1a\xba\x07\x66\xdf\xa8\x32\x03\xf7\x30\xed\xa3\x29\x9d\xb3\x91\x48\xe0\xb1\xbd\xb3\x66\xe9\xab\x55\xf5\x5a\x4e\xcb\x11\xd0\xd0\x71\xb9\xb3\x8c\x7b\x0f\x18\xf8\x0e\x28\x5e\x42\x97\xb8\xb5\xb4\xc3\x6d\x98\x3b\xaa\x21\xc3\x49\xda\x02\xa2\xe5\xcc\x7c\xa7\xaa\x15\x04\x7b\xe8\xb6\x7c\xe0\x37\x41\x27\xdb\x41\x34\xc3\xf7\xa5\x8d\xbd\x4d\x38\xda\x27\x0b\x5c\x72\x76\x5b\xe1\x5e\xcc\xd8\x06\xe8\x5f\x5c\x08\x9a\x25\x6d\x71\x0f\x67\xfa\x76\x87\x80\x58\xc1\x7a\xcd\xba\xa5\x02\xea\x05\x9c\x24\x3a\xd9\xdc\x6c\x1e\x2c\xc3\xfa\xf1\x5f\x2f\x72\x13\x50\x82\xae\x25\xbe\x2d\x25\xca\x7f\x4e\xf9\x57\x66\xcc\x85\x7d\xec\xeb\xfc\x72\xdd\x1f\x85\xe2\xd2\xcd\xe0\x98\x5c\x49\x95\xd3\x0c\xd3\x8c\x9f\xab\x70\x53\xf6\xe6\x00\x91\x8a\x66\xe7\x52\x24\xae\x47\xd7\x4e\x37\x28\x86\x1b\x1c\x77\xbc\xc1\xaa\xe5\x5a\x5f\xe0\x7c\xd5\xac\x1f\xc9\x7f\xd5\xff\xad\xf9\x4f\x57\xca\x79\x27\xfe\x07\x07\x07\xdb\x69\xaf\x35\xd8\x9e\x38\x62\x2f\xbc\x7c\x3f\x80\xb9\x1f\x04\xad\x49\xf7\xfd\xfc\xf8\xc8\x56\xf1\x13\xa2\x3d\x73\x3f\x58\x3e\x92\xf9\x6a\x2e\xee\x4c\x7e\x60\x91\x5d\x8e\x9f\xe4\x0b\x9d\xc9\xd4\xcf\xb4\xad\x8c\x6b\x77\xbb\xe4\xe9\x7d\x7d\xce\xbe\x85\xf5\x7a\x2a\xb7\xa6\x5d\xe6\x7c\xfc\x8e\xc4\x6b\x47\xd5\x6b\x10\x56\x2b\x3c\xfb\xc9\x1f\x0c\x7a\x87\xff\x07\x00\x00\xff\xff\x43\x51\x95\x51\x6f\x10\x00\x00")

func commonEtcMdsdDMdsdXmlBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcMdsdDMdsdXml,
		"common/etc/mdsd.d/mdsd.xml",
	)
}

func commonEtcMdsdDMdsdXml() (*asset, error) {
	bytes, err := commonEtcMdsdDMdsdXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/mdsd.d/mdsd.xml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcMdsdDSecretGcscertPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x2e\x29\xca\xcc\x4b\x57\xd0\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\xdc\x53\xf3\x52\xcb\x12\x7d\xf2\xd3\xd3\x81\xea\xc1\x52\x9a\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\xdf\x9d\x46\xf8\x43\x00\x00\x00")

func commonEtcMdsdDSecretGcscertPemBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcMdsdDSecretGcscertPem,
		"common/etc/mdsd.d/secret/gcscert.pem",
	)
}

func commonEtcMdsdDSecretGcscertPem() (*asset, error) {
	bytes, err := commonEtcMdsdDSecretGcscertPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/mdsd.d/secret/gcscert.pem", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _commonEtcMdsdDSecretGcskeyPem = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x2e\x29\xca\xcc\x4b\x57\xd0\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xb9\xa7\xe6\xa5\x96\x25\xfa\xe4\xa7\xa7\x03\x75\xe9\x01\x55\x6b\x2a\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8c\x06\x2c\x55\x48\x00\x00\x00")

func commonEtcMdsdDSecretGcskeyPemBytes() ([]byte, error) {
	return bindataRead(
		_commonEtcMdsdDSecretGcskeyPem,
		"common/etc/mdsd.d/secret/gcskey.pem",
	)
}

func commonEtcMdsdDSecretGcskeyPem() (*asset, error) {
	bytes, err := commonEtcMdsdDSecretGcskeyPemBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "common/etc/mdsd.d/secret/gcskey.pem", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x5c\x4b\x92\x53\x9c\x13\xc1\x62\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdCaCrt,
		"master/etc/etcd/ca.crt",
	)
}

func masterEtcEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdEtcdConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x92\xd1\x4e\xc2\x30\x14\x86\xef\x7d\x0a\x1e\x40\xd9\x98\x08\x8e\xa4\x17\x65\x3b\x86\x86\x52\xb4\x3b\x23\xe1\xaa\x99\xd8\x44\xa3\x28\xd9\x2a\x89\x21\xbc\xbb\xa3\x45\x98\x63\x84\x2d\xbd\xe9\xff\xfd\xa7\x3d\xe7\x2f\x60\x14\x2b\x1a\xcf\x40\x22\x4b\x40\x45\x9c\x81\x40\x95\x4a\x9e\x90\x57\x63\x56\xc5\xc0\xf3\x36\x9b\x56\x7b\xf4\x55\x98\xcf\x6c\xa9\x5b\xdb\xed\x20\xb8\xed\x87\x57\xd6\x17\x95\x2e\xf5\xc0\x38\x10\x4f\x9b\xc5\x6e\xbd\x78\x85\xce\xd7\x3a\x6f\x2f\x72\xb3\x67\x5c\x45\x8b\xd2\x14\x47\xc4\xe4\xdf\xda\x49\x31\x45\xaa\x62\x26\x89\xb7\xce\x72\xef\xe3\xed\xd9\x56\x70\x1a\x70\x88\x90\x4d\x85\x42\x36\x81\x69\x8a\x24\xb8\xf3\x7d\x27\x8d\x80\x4a\x1c\x02\x45\xc5\x04\x82\x9c\x51\x4e\x0e\x1a\x13\x0c\x19\xe5\x95\x8e\x1e\x01\xe4\xa5\x7e\xee\x6b\xee\x88\xa7\x49\x59\x99\x2c\xb3\xc2\xe8\xfc\xc6\xb7\xdf\xc1\xff\x6f\xd7\xba\xaf\xab\x5b\x9d\x46\xb0\x73\x0a\x06\x8d\x60\x50\xb9\xcf\x18\xe6\x67\xc6\xfb\xae\x7f\x1c\xc2\x59\x79\x53\xd1\x98\x9b\xdf\xb6\x7f\x25\xaf\x3d\x7c\x3a\x92\x23\xfa\x77\xb4\xa0\x13\x20\xb5\x49\x39\xc5\xba\x9b\x92\x5f\xe9\x6a\xee\x0e\x3b\x1f\xbe\xd5\x1b\x1a\xb4\x55\x0e\xed\x59\x0a\xe5\x2e\x8e\xf2\x29\xd1\x3a\xbc\xc8\x8e\x07\x3e\xa5\xd3\xf2\x39\x0d\x69\x34\x06\x11\xab\xe1\x1c\x21\x21\xdd\x20\xec\x86\xbd\x7e\x10\xf6\x1c\x73\xb1\xd2\x6f\x00\x00\x00\xff\xff\x27\xa7\x9b\x77\x0f\x03\x00\x00")

func masterEtcEtcdEtcdConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdEtcdConf,
		"master/etc/etcd/etcd.conf",
	)
}

func masterEtcEtcdEtcdConf() (*asset, error) {
	bytes, err := masterEtcEtcdEtcdConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/etcd.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x5c\x4b\x92\x53\x02\x52\x53\x8b\xc0\xa2\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x49\x32\x4a\x0a\x3e\x00\x00\x00")

func masterEtcEtcdPeerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerCrt,
		"master/etc/etcd/peer.crt",
	)
}

func masterEtcEtcdPeerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdPeerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdPeerKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xb9\x96\x24\xa7\x04\xa4\xa6\x16\xe9\x01\x15\x2a\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xb0\x95\xee\x4b\x43\x00\x00\x00")

func masterEtcEtcdPeerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdPeerKey,
		"master/etc/etcd/peer.key",
	)
}

func masterEtcEtcdPeerKey() (*asset, error) {
	bytes, err := masterEtcEtcdPeerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/peer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x5c\x4b\x92\x53\x82\x53\x8b\xca\x52\x8b\xc0\xe2\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x7d\xce\xb3\x46\x40\x00\x00\x00")

func masterEtcEtcdServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerCrt,
		"master/etc/etcd/server.crt",
	)
}

func masterEtcEtcdServerCrt() (*asset, error) {
	bytes, err := masterEtcEtcdServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcEtcdServerKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xb9\x96\x24\xa7\x04\xa7\x16\x95\xa5\x16\xe9\x01\x95\x2a\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x68\x3c\xa6\x99\x45\x00\x00\x00")

func masterEtcEtcdServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcEtcdServerKey,
		"master/etc/etcd/server.key",
	)
}

func masterEtcEtcdServerKey() (*asset, error) {
	bytes, err := masterEtcEtcdServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/etcd/server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\xf3\x4d\x2c\x2e\x49\x2d\x72\xce\xc9\x2f\x4d\x09\x28\xca\x2f\xcb\x4c\x01\x72\xf2\xf3\xd2\x14\xf4\x80\x64\x49\x62\x66\x5e\x6a\x51\x70\x6a\x51\x59\x66\x72\xaa\x42\x8d\x42\x70\x49\x51\x66\x5e\xba\x42\x6d\x2d\x17\x20\x00\x00\xff\xff\x93\xa5\x60\x70\x42\x00\x00\x00")

func masterEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginCloudproviderAzureConf,
		"master/etc/origin/cloudprovider/azure.conf",
	)
}

func masterEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := masterEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x1c\x53\x72\x33\xf3\xc0\x42\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x21\x3e\xf2\xe6\x3b\x00\x00\x00")

func masterEtcOriginMasterAdminCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminCrt,
		"master/etc/origin/master/admin.crt",
	)
}

func masterEtcOriginMasterAdminCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\x39\xa6\xe4\x66\xe6\xe9\x01\x55\x29\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x26\xc6\x1f\xc6\x40\x00\x00\x00")

func masterEtcOriginMasterAdminKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKey,
		"master/etc/origin/master/admin.key",
	)
}

func masterEtcOriginMasterAdminKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAdminKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginMasterAdminKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAdminKubeconfig,
		"master/etc/origin/master/admin.kubeconfig",
	)
}

func masterEtcOriginMasterAdminKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterAdminKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/admin.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x1c\xd3\xd3\x8b\x52\xd3\x13\x4b\xf2\x8b\xdc\x8a\xf2\xf3\x4a\x02\x8a\xf2\x2b\x2a\xc1\x2a\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe3\x24\x71\xbf\x4a\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyCrt,
		"master/etc/origin/master/aggregator-front-proxy.crt",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterAggregatorFrontProxyKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0c\xcb\xc1\x09\xc0\x20\x0c\x00\xc0\x7f\xa7\xc8\x04\xd9\xc1\x0a\xfd\xf4\x23\x74\x02\x29\x31\xe4\x63\x20\x86\x52\xb1\xee\x5e\xdf\xc7\x8d\x01\xc9\xe4\xc9\x4e\x27\xf5\xd0\xf6\xee\xd4\x00\xa3\xd6\x22\x8c\x91\xcc\xa5\xc8\xbd\xb4\x61\x60\x36\xe2\xec\x6a\x87\x69\xf5\x64\xfa\x76\x5c\x09\x3e\xb8\xdc\xa4\x32\xcc\xb9\xfd\x01\x00\x00\xff\xff\xb3\xa4\x6e\x1f\x4f\x00\x00\x00")

func masterEtcOriginMasterAggregatorFrontProxyKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterAggregatorFrontProxyKey,
		"master/etc/origin/master/aggregator-front-proxy.key",
	)
}

func masterEtcOriginMasterAggregatorFrontProxyKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterAggregatorFrontProxyKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/aggregator-front-proxy.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaBundleCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\x73\x4e\x74\x2a\xcd\x4b\xc9\x49\x55\xd0\x73\xce\xcf\x2b\x01\x2a\x49\x2d\x0a\x4e\x2d\x2a\xcb\x4c\x4e\xd5\x54\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x01\x5e\x1d\x24\x46\x00\x00\x00")

func masterEtcOriginMasterCaBundleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaBundleCrt,
		"master/etc/origin/master/ca-bundle.crt",
	)
}

func masterEtcOriginMasterCaBundleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaBundleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca-bundle.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x9c\x13\xc1\x7c\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginMasterCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaCrt,
		"master/etc/origin/master/ca.crt",
	)
}

func masterEtcOriginMasterCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterCaKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\x39\x27\xea\x01\x95\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xd6\x3c\xf7\x41\x3d\x00\x00\x00")

func masterEtcOriginMasterCaKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterCaKey,
		"master/etc/origin/master/ca.key",
	)
}

func masterEtcOriginMasterCaKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/ca.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterClientSecret = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\xd0\xc8\xcc\x4b\x49\xad\x50\xd0\x73\xce\xcf\x2b\x49\xcc\xcc\x4b\x2d\x0a\x4e\x2d\x2a\xcb\x4c\x4e\xd5\x0b\x28\xca\x2f\x48\x2d\x2a\xc9\x4c\x2d\xd6\x73\x2c\x2d\xc9\x00\x72\xd3\x32\x73\x52\xf5\x3c\x53\x52\xf3\x4a\x32\x4b\x2a\x81\xfc\xb2\xcc\x94\xd4\xa2\x62\x05\x03\x4d\x3d\x18\x47\x2f\x38\x35\xb9\x28\xb5\x44\xa1\xb6\x96\x0b\x10\x00\x00\xff\xff\x71\xa0\xdf\x27\x5b\x00\x00\x00")

func masterEtcOriginMasterClientSecretBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterClientSecret,
		"master/etc/origin/master/client.secret",
	)
}

func masterEtcOriginMasterClientSecret() (*asset, error) {
	bytes, err := masterEtcOriginMasterClientSecretBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/client.secret", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterFrontProxyCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\xdc\x8a\xf2\xf3\x4a\x02\x8a\xf2\x2b\x2a\x9d\x13\xc1\x32\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\xc4\x28\xc2\x5e\x42\x00\x00\x00")

func masterEtcOriginMasterFrontProxyCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterFrontProxyCaCrt,
		"master/etc/origin/master/front-proxy-ca.crt",
	)
}

func masterEtcOriginMasterFrontProxyCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterFrontProxyCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/front-proxy-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x73\xdb\xb8\x11\x7f\xd7\x5f\x81\xf1\x4b\xda\x4e\x49\xca\x1f\xf9\xe2\x4c\x1f\x54\xfb\xdc\xd3\x9c\xe3\xa8\xb2\xd3\xe9\x4c\xa7\xd3\x81\xc8\x95\x84\x33\x09\x30\x00\xa8\xb3\x2e\xcd\xff\xde\xc5\x02\x24\x21\x5a\xce\x65\x32\x69\xa7\xca\x43\x0c\xec\x07\x16\xbb\x8b\xdf\xee\x92\x97\xb5\x30\x46\x28\x79\xa9\xe4\x5a\x6c\xf2\x09\x63\x4d\xd5\x6e\x44\xb4\x66\xec\xcf\xad\xa8\xca\x2b\x58\xf3\xb6\xb2\xc6\x6f\x31\x56\x10\x43\xab\xb9\x45\xe9\x6e\x93\x31\xde\x88\xbf\x81\x76\x1a\x73\xb6\x3b\xed\xb7\x41\xee\x72\xf6\x8f\x7f\xf6\xeb\x07\x21\xcb\xfc\x50\xb1\x3f\xb1\xe7\xd0\x60\x54\xab\x0b\x30\x83\x6e\xc6\x2a\x51\x0b\x34\x81\x7d\xfa\x1c\x6d\x6a\xf8\xd8\x82\x89\xb6\x49\xed\xfb\x1d\x68\x2d\x4a\xf8\x46\x83\x23\x03\x7b\x4d\x91\x85\xaa\x01\x69\xb6\x62\x6d\x53\xa1\xb2\x79\xcd\x37\xb0\x50\x95\x28\xf6\xdf\xe8\x9d\x47\x28\x5a\xc7\xb9\x6c\xab\xf8\xc2\x09\xab\xb9\x2d\xb6\xa4\x7f\x26\xa5\xb2\xa4\xee\xc0\x23\x09\x7b\x80\x7d\xce\x84\x63\x31\xe9\x81\x59\x25\xc8\x7d\xd2\xab\x8e\x64\x18\xdb\xf1\xaa\x85\x9c\xbd\xb0\xba\x85\x17\x11\x45\xf2\x1a\xb7\x7b\x99\x04\x55\x08\x28\x23\x06\x34\xf1\x58\x5c\x92\x3e\x5c\x39\x6b\x54\x69\x9e\x21\xad\x9c\x3b\xcd\x41\xe8\x7e\x86\xc2\xe6\xcc\xd9\x11\x6d\x9b\x07\xd1\xbc\xa7\x93\x2a\xb2\xe3\x9a\x8b\xaa\xd5\x30\xe2\xf3\x21\x8a\x9c\x1f\xe2\xc3\xdb\x52\xd8\x21\x7f\x41\xf2\x55\x05\x65\x2f\x4c\xe4\x6b\x51\xc1\x82\xdb\x6d\xce\xb2\x1d\xd7\x59\xa5\x36\x59\xef\xbb\x84\x38\xc6\xeb\x14\x79\x50\xba\xe6\x8f\xa2\x6e\xeb\x25\x58\x2e\x24\x94\x4e\x0f\x26\xde\xe9\x74\xc2\x37\x1b\x0d\x1b\x6e\x95\x8e\x9e\x92\x56\x8f\xfb\xcb\x4a\x80\xb4\x73\xb9\x56\xde\x63\x05\x68\x3a\x3e\x67\x83\x48\xb2\xd6\x4a\xda\x84\xf8\xd3\x42\x5b\x62\xc4\xc0\x7e\x91\x0f\xe9\x13\x4c\xa8\x1b\xd8\x41\x85\xd1\x48\x5c\x46\x8d\x12\x8c\xb7\x76\x3b\x98\x13\x1e\xca\x8f\xc0\x4b\xd0\xc1\x18\x32\xee\x72\x96\xb3\x48\x73\x52\xf0\xde\x88\xc0\xa0\xea\x5a\xc9\x5b\xcc\x8e\x10\xf6\xe4\x19\xa3\x26\x3e\x9d\xad\xe6\xfe\x94\x85\x86\xb5\x78\x1c\xa4\xfe\x9e\x2c\xa1\x56\x16\x92\x1f\x1c\x4f\x42\xbb\x1b\xad\xda\xc6\xb3\x3f\xe5\xfb\x8b\x23\xd2\x66\x6b\x40\xbb\xfc\x7c\x8e\xf3\x03\xd2\x27\xf8\xee\xac\x56\x55\x05\x51\x14\xa0\xc2\x1c\xeb\x9f\x61\xa5\x8a\x87\x5b\x4a\xf3\x21\xc0\x35\x37\x16\x74\x32\x08\xbb\x1c\x45\x75\x3b\x51\xc0\x9d\xfb\x4f\x6e\x2e\x31\x6a\x5e\x81\x11\x1b\xd9\xb9\x2f\x8e\x66\xe0\x4f\x3c\xbd\x77\x60\x14\xc7\x11\x87\x8b\x5f\x74\x64\xce\x4e\xfe\x70\x82\x1b\xda\xcc\xaa\x4a\xfd\x02\xe5\x7b\x2d\x10\x88\xf1\xa2\xa5\x34\xc3\x6d\x56\x98\xf5\xb3\xb2\xc4\x47\x85\x12\xd3\x94\xfe\xe5\x6f\xa6\x2f\xcf\x03\xed\x16\xec\x2f\x4a\x3f\x60\xba\x17\xcd\xc5\x04\x6c\x51\x1e\x26\x60\xc1\x73\xe6\xef\x9b\x3a\xe2\x10\xeb\xe1\x26\x07\x64\x12\x0e\x2c\xfd\x4d\x8e\x70\xb8\xdb\x60\x90\x74\x45\x91\x49\xd8\xd6\xda\xc6\xe4\x59\xf6\xe9\x13\x4b\x7f\x54\xc6\xba\xd0\xb1\xcf\x9f\xf3\xb3\xf3\xd7\x6f\xc9\xac\x3b\x4c\x1d\x7c\xba\xc3\xcd\x1e\xda\x15\x46\x18\x2c\x98\x40\xf2\xc9\x93\x47\x04\x84\xb5\x63\x8c\x87\x98\xea\xe2\x7a\xe7\xe2\x3a\x52\x13\x83\xe3\x11\xb6\x58\x09\xc1\xe9\x60\xd9\x5a\x69\x04\x62\xac\x2f\x78\x17\xbf\x9b\xce\x3d\xe0\x5e\x13\x05\xef\xe5\x45\x62\x1c\x72\x82\x42\x5a\x97\xb4\xd5\x12\x36\xc2\x58\xbd\xef\x1c\x91\xb3\x12\xd3\x10\x53\x4e\x07\x42\x5a\xfa\x2a\x98\x9a\x5d\x91\xbf\x9c\x4e\xa7\x13\x8f\x6e\xef\xc8\xd1\x01\xd8\xdc\xbd\x2b\xb0\x4f\xe3\xf9\x7c\x0c\x83\xc8\x97\xc3\x38\x62\xf2\x91\x6c\x14\x26\x3c\x02\xdb\xd9\xcb\xe9\x64\x70\x78\x6c\x8f\x3b\x1d\xf1\xc6\x3d\x10\xd0\x33\xbd\x69\x6b\x94\x36\x1d\xae\xa8\xb6\x4c\x8a\xa8\x89\x48\x58\x86\x51\xcf\x14\x25\x75\x46\x74\x44\x8c\x1d\xd6\x55\x9d\xf1\x5f\x11\xdd\x53\xc7\x1d\x09\x77\xd4\x1e\x70\x1c\x93\x7f\x81\x3e\x60\xc9\x8a\xa3\x0f\xd1\x4b\x81\xc1\x25\xd5\xf9\x01\x43\x0d\xa5\xe0\x89\xdd\x37\xd0\x2b\x69\x1a\x8c\x10\x95\xd1\x6c\x27\xcb\x34\x4a\x2d\x3c\xcf\xaa\x55\xeb\x4c\x18\x5e\xe5\xff\xf2\x5a\x45\xd5\x12\x0c\x39\x78\x40\xc4\x49\x5c\x30\x93\xb5\x0b\xd4\x91\x93\x7c\xe8\xb2\x03\xa4\x3e\x14\xc7\x30\x7e\x85\xb4\x0f\xb6\x5f\xcf\x17\x18\xf0\xb3\xd7\x84\x29\xa7\xbf\x5d\xbe\x42\xf6\x84\x92\x11\x27\xd8\xd3\x14\x3b\x60\xf2\x67\x9a\x62\x0b\x65\xdb\x23\xb5\x67\x3f\x62\x64\xcf\x97\xfe\x6c\xa8\x8d\x09\x30\x6a\x6e\x55\x89\x0f\x4e\xdb\x25\x97\x1b\xd7\xcc\xbc\x88\x68\x77\xed\x0a\xa3\x8a\xd7\x79\x7d\x96\x9e\x13\x46\x66\xa7\xaf\x26\x5e\xa3\xbf\x11\x45\xb4\x87\x84\x1b\xa5\x1a\x97\x4e\x97\xa1\xdc\x49\xe9\x6b\xc6\xa8\x8b\xe4\x45\x01\x8d\x23\x5b\xe4\xba\xc7\xbc\x42\x0c\xfe\x8a\x94\xfa\x63\xcc\x13\x6e\x81\x68\xdd\x6a\x83\x26\xbe\xc2\xc7\x4e\x8e\x1d\xb4\x7e\x95\x52\x12\xfa\x88\x18\xcb\xce\x49\xc3\x93\xbb\xfc\x84\x32\xe1\xa5\x3e\xa9\x75\xa4\xd0\xe7\x71\xf0\xca\xa2\x5d\xe1\x89\x1f\x96\x37\x04\x73\x8d\x46\xe8\x62\x27\x1d\x88\x9f\x10\xee\x51\xcb\xa3\xef\xbc\x8b\xd3\x85\x46\xa5\xda\x0a\x34\xc9\xcb\xf6\x28\xff\x6f\xf6\xb1\xc5\x8a\xec\x50\x51\xfa\x6a\x34\x00\x46\xc8\xd2\x50\xa5\x42\xad\x28\x44\xa9\x1d\xd6\xa4\xa7\x67\x6f\x7c\xac\x2e\xe8\x76\x5b\xd4\xe8\x23\x79\x03\x72\xe3\xba\xb5\xb7\x13\x6a\x2f\x08\x54\xe7\x8b\xa0\xe5\x72\x7e\xb5\x0c\x9a\x42\x41\xcc\x9c\x43\xc2\xd9\x0b\x9a\x67\x7c\xc9\xd7\x50\x6e\x79\xdc\xda\xa9\x9d\x49\x02\x5f\x43\xd8\x3d\xe4\x50\xa4\x7c\x9c\x47\xea\xb0\xaf\xe2\xc6\x80\xfd\x8e\xfe\x3b\xc9\x30\x32\xd8\xfb\x02\xca\x45\xbe\x74\x9d\x12\x97\x36\x9e\xcc\x6a\xb0\x5b\x85\x65\x02\xed\x71\x25\x0d\x13\x55\x5a\x61\xf7\x8b\x80\x31\xc1\x29\xd8\xb9\x0a\x19\x35\xcf\x35\x66\x17\x22\xc4\xbb\x20\x5c\x54\x5c\xd4\x44\xf0\xa5\x09\xcd\xff\x1d\x16\x1f\x78\xfc\xb2\xd1\x33\xf4\x01\x2e\x1d\xc4\xa4\xf3\xf1\xc1\x6c\xfa\xfb\xf4\x76\x94\x0b\xee\x84\x43\xf4\x7b\x66\x20\x22\x83\xa2\xf9\x02\x6a\xec\xff\xe3\xa9\x88\x36\xfa\xb5\x28\x63\x9a\x69\x57\xfd\x8a\xee\x13\xd1\xdc\xba\x5f\x36\xd8\x16\xe0\xe3\x86\xf2\x43\x68\x2c\x63\xce\x56\x0a\xec\x95\xff\x15\x09\x78\xec\x9a\x5f\x7d\x3f\xff\x74\x8b\x34\x40\xec\xd5\xd8\x59\xdd\xa1\x77\x50\x68\xb0\x83\x79\x84\xea\x81\x96\x1a\x22\x76\xad\x26\x35\x0d\xef\x31\xbd\xe7\x57\xe3\x33\x03\x4b\xd7\xa1\x05\xff\xa3\x91\x08\xb7\xbf\xc2\xb1\xac\xa5\xbc\x49\x6b\x51\x68\x65\xd4\xda\x2a\x59\xe1\x55\xb1\x9e\xd5\x98\x97\xdf\xd7\x03\xf7\x38\xa4\x91\x07\x4e\x32\x7a\x5b\x67\x59\x6f\xd8\xc9\x53\xaf\x30\x66\x15\x16\xfe\xff\x37\x93\xc9\xa8\x91\xb9\xa1\xe2\xcc\xa2\x1e\xed\xbf\x09\xb7\x9d\xf6\x6f\xd3\x7b\xfd\xd7\xab\xdb\x43\x6d\x06\x46\x1f\x87\xfa\xad\x77\xfc\x71\xb6\xc1\xe1\x08\x91\xaa\x74\x25\xa8\xab\x62\x81\xec\xe1\xd6\x18\x19\x6f\xfa\x3c\x36\xcf\x57\x7a\xcf\x96\xf8\x94\x36\xe9\x9e\xd7\xee\x95\x93\x5f\x63\x13\x5c\x15\x36\xe6\xde\x6d\x8f\xcc\x78\xf3\xea\x22\xd8\xd1\xe7\xcf\x31\x36\x6c\xb0\x27\x88\x44\xee\xdb\xc3\xa0\x37\x74\xe0\xae\xab\xb8\xa3\x91\x51\x61\x4d\x92\xb8\x4a\xb0\x15\x84\xf4\x60\x08\x41\x80\xae\x9b\xd6\xc2\x9f\x02\xa6\x06\x65\x4b\x3f\x60\xdf\x43\xdd\x54\xdc\xe2\x25\x4f\xfa\x4a\x93\x05\x96\x24\x0c\xe1\x27\xe4\xdd\xa2\xd5\x98\x60\x6e\xde\x2b\xdc\x24\x1d\x40\xbd\x30\xfd\x4e\xe8\x6d\xcc\x34\xcf\xce\x3a\xe2\x0d\xc7\x76\xdd\x2c\xdc\x70\xad\xfc\xe7\x93\x97\x7e\x40\x16\xe5\x58\xee\x74\xda\xfd\x92\xd3\xb7\xdd\x2f\xa3\xdd\x09\x0e\xd6\xd6\x0d\xb6\xbd\x03\x10\x39\x4b\x85\xc8\x2a\xbf\x1a\xe2\x96\xa8\x82\xcc\x70\xef\xc5\x3f\x0f\x4a\xcd\xbb\x4e\x53\x9c\x4d\xa1\xac\xce\x8a\x42\xb5\x71\x15\xab\xb9\xc4\x5e\xbd\xec\x3f\x2e\x24\x5d\x24\xe8\x6f\xfa\x64\x44\xe0\xe5\xf6\x9b\x4a\xed\x69\x11\xbf\xab\x64\xd5\xca\x12\x23\xe4\x9f\x17\xa6\xfc\x0e\x7d\xff\xd3\x68\xe8\xe6\xfe\x58\xd7\x3e\x11\xbd\x9b\x72\xc8\xde\xc0\x1c\x8e\x7f\x22\x41\x3c\x24\x60\xfc\xc7\x80\xae\x1b\x3e\x3a\x8b\x5f\x5c\x1c\x1f\xc5\x8f\xb4\xce\x86\x46\xa7\x6e\x76\xeb\x3f\xc5\xf4\x50\x31\xee\xa2\x03\x7f\xd7\xb3\x3f\x86\x7c\x33\x73\x79\x5d\x89\xcd\xd6\xfa\xcc\xee\x3f\xf4\xdc\x8b\x1a\x30\x42\xe3\x47\xea\x40\xa3\x74\xdf\x33\xc4\xda\xb5\x98\xa1\xb7\x4d\x22\xf3\x8e\xbc\x4d\x12\xea\xfa\x92\xe1\xe3\x46\x6f\xe1\x6f\x8a\x78\xa3\x43\x51\xee\x2b\x50\xd2\xcd\xd4\xdf\x00\x76\x3b\x55\xe1\x6c\x16\x3d\xe0\x3d\x72\x88\x82\x10\xda\xe1\x08\x06\xea\x87\x83\x6f\x7f\xff\x09\x00\x00\xff\xff\xdc\x55\x11\x8a\xed\x16\x00\x00")

func masterEtcOriginMasterMasterConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterConfigYaml,
		"master/etc/origin/master/master-config.yaml",
	)
}

func masterEtcOriginMasterMasterConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x5c\x4b\x92\x53\x9c\x13\xc1\x62\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x5f\xc4\xa8\x2e\x3c\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdCaCrt,
		"master/etc/origin/master/master.etcd-ca.crt",
	)
}

func masterEtcOriginMasterMasterEtcdCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x5c\x4b\x92\x53\x9c\x73\x32\x53\xf3\x4a\xc0\xe2\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\xd7\xd9\x8a\x14\x40\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientCrt,
		"master/etc/origin/master/master.etcd-client.crt",
	)
}

func masterEtcOriginMasterMasterEtcdClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterEtcdClientKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xb9\x96\x24\xa7\x38\xe7\x64\xa6\xe6\x95\xe8\x01\x95\x2a\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xdb\xa0\x53\xc8\x45\x00\x00\x00")

func masterEtcOriginMasterMasterEtcdClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterEtcdClientKey,
		"master/etc/origin/master/master.etcd-client.key",
	)
}

func masterEtcOriginMasterMasterEtcdClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterEtcdClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.etcd-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x7c\x13\x8b\x4b\x52\x8b\xbc\x4b\x93\x52\x73\x52\x4b\x9c\x73\x32\x53\xf3\x4a\xc0\x0a\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x76\x15\x36\xec\x49\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientCrt,
		"master/etc/origin/master/master.kubelet-client.crt",
	)
}

func masterEtcOriginMasterMasterKubeletClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterKubeletClientKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xf9\x26\x16\x97\xa4\x16\x79\x97\x26\xa5\xe6\xa4\x96\x38\xe7\x64\xa6\xe6\x95\xe8\x01\xf5\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x70\x31\x06\x09\x4e\x00\x00\x00")

func masterEtcOriginMasterMasterKubeletClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterKubeletClientKey,
		"master/etc/origin/master/master.kubelet-client.key",
	)
}

func masterEtcOriginMasterMasterKubeletClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterKubeletClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.kubelet-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x7c\x13\x8b\x4b\x52\x8b\x02\x8a\xf2\x2b\x2a\x9d\x73\x32\x53\xf3\x4a\xc0\xd2\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\xcd\x84\x18\xcc\x47\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientCrt,
		"master/etc/origin/master/master.proxy-client.crt",
	)
}

func masterEtcOriginMasterMasterProxyClientCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterProxyClientKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\x14\xe5\x57\x54\x3a\xe7\x64\xa6\xe6\x95\xe8\x01\x75\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x0a\x50\x1a\x77\x4c\x00\x00\x00")

func masterEtcOriginMasterMasterProxyClientKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterProxyClientKey,
		"master/etc/origin/master/master.proxy-client.key",
	)
}

func masterEtcOriginMasterMasterProxyClientKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterProxyClientKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.proxy-client.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x7c\x13\x8b\x4b\x52\x8b\x82\x53\x8b\xca\x52\x8b\xc0\x32\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x8a\xfd\x0a\x5a\x42\x00\x00\x00")

func masterEtcOriginMasterMasterServerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerCrt,
		"master/etc/origin/master/master.server.crt",
	)
}

func masterEtcOriginMasterMasterServerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterMasterServerKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xf9\x26\x16\x97\xa4\x16\x05\xa7\x16\x95\xa5\x16\xe9\x01\x15\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x63\x22\xe7\x8b\x47\x00\x00\x00")

func masterEtcOriginMasterMasterServerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterMasterServerKey,
		"master/etc/origin/master/master.server.key",
	)
}

func masterEtcOriginMasterMasterServerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterMasterServerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/master.server.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\xce\x48\xcc\xcc\x73\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x49\x64\xa6\x65\x26\x27\x02\x05\xf5\xfc\x0b\x52\xf3\x82\x33\x32\xd3\x4a\x80\x92\xc5\xf9\x39\xa9\x60\xd9\x62\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\xfc\x0f\x86\x36\x4c\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleCrt,
		"master/etc/origin/master/named/console.crt",
	)
}

func masterEtcOriginMasterNamedConsoleCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterNamedConsoleKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xf9\x17\xa4\xe6\x05\x67\x64\xa6\x95\x00\x25\x8b\xf3\x73\x52\xf5\x80\x1a\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x8f\x6b\xf9\x3e\x4b\x00\x00\x00")

func masterEtcOriginMasterNamedConsoleKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterNamedConsoleKey,
		"master/etc/origin/master/named/console.key",
	)
}

func masterEtcOriginMasterNamedConsoleKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterNamedConsoleKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/named/console.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterOpenshiftMasterKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\x4d\x2c\x2e\x49\x2d\xf2\x2e\x4d\x4a\x4d\x06\x0b\x28\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\x8a\x34\xa7\x53\x34\x00\x00\x00")

func masterEtcOriginMasterOpenshiftMasterKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterOpenshiftMasterKubeconfig,
		"master/etc/origin/master/openshift-master.kubeconfig",
	)
}

func masterEtcOriginMasterOpenshiftMasterKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginMasterOpenshiftMasterKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/openshift-master.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSchedulerJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x94\xc1\x8e\xe2\x30\x0c\x86\xef\x3c\x45\xd5\x33\x87\x65\x8f\xdc\xa0\x20\xb4\xd2\x82\x2a\x40\x1c\x76\xc5\x21\xdb\xba\xc5\x22\xc4\x6c\x92\x32\x03\x88\x77\x1f\x87\x42\xa7\x1d\xcd\x40\x0b\xd3\x0b\xc5\xf1\xe7\x3a\xce\xff\xe7\xd8\xf2\xf8\xf1\xc5\x16\x17\xa0\x0d\x92\xf2\xbb\x9e\xbf\xeb\xf8\xed\x3c\xbe\x46\x15\xbb\x48\x48\x12\xa3\xfd\x35\xba\xd5\x10\x63\x24\x2c\x18\x5e\xfb\x7b\x8e\x79\xde\xf1\xf2\xcb\xeb\x4a\x6c\xc0\x51\x13\x5a\x90\xcc\x36\xf0\x87\x14\x04\xa4\x12\xae\x61\xfd\x4b\xda\xa9\xfd\x35\x37\x16\xaf\xc3\xfe\x2c\x67\x03\xca\x54\x5d\x68\x14\x0c\xc3\x41\x73\xac\x77\xc8\x34\x0c\xd0\xac\x1b\xa3\x36\x5a\xfd\x52\x16\x74\x48\x71\x2f\x49\x50\xa1\xdd\xd7\x01\x27\xe4\xbe\xd6\x64\x22\x23\x50\xa0\x85\x0c\xdf\x07\x5f\x03\xe2\xae\xe6\x24\x99\xe3\xfc\x09\xc5\x30\x17\xa8\x6c\x2d\x32\x58\x41\xb4\x76\xc8\x18\x36\xa4\xf7\xfc\x59\x63\x78\x46\x8d\x50\xb7\xc5\xc6\x60\x7e\x02\x7d\x56\x1d\xaa\xf4\x16\x25\x74\xca\x89\x7c\x4e\xdd\x52\x94\xe3\x06\xf4\x0e\x23\x28\x4e\xa3\xba\xcc\x09\x52\xfc\x03\x59\xd6\x6d\xb1\xa2\x21\x75\xfa\xaf\x84\x97\xa5\x7f\xa7\xe2\xbd\x68\xa8\xd4\xfe\xb4\x42\xe7\xb9\xcb\xc2\x2f\x48\x1a\x2d\xde\xf3\xcb\x0c\x24\x44\x96\xf4\x8c\x0d\x26\xe2\x30\xa7\xae\xae\x3b\x67\xbe\x00\xa6\x2b\xb7\xe9\x4e\x8d\x89\x7e\x94\xe6\xd3\x05\x7f\x83\x30\x76\x0a\xff\x33\x30\x16\x9e\xef\xaf\x2f\xa4\x50\x11\xc4\x53\x30\x94\x69\x3e\x34\x29\x89\xc5\xed\xc6\xf8\x68\x49\x27\x3c\x16\x5d\x02\xba\xb7\x23\x8c\x79\xf3\xe6\x76\x9b\x3f\xf8\xa9\x59\xf7\xdb\xc6\x78\xf6\xe1\xc5\x99\xbc\xd9\x87\xeb\xdd\xf3\x80\xb2\x78\xc7\x07\xae\x9b\x03\x5f\xce\x7e\x6d\x99\xbb\xab\xfc\xd3\x46\x7f\x56\x95\xdf\x72\x6f\x6f\x01\x00\x00\xff\xff\xfa\x08\x50\xa9\x5d\x06\x00\x00")

func masterEtcOriginMasterSchedulerJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSchedulerJson,
		"master/etc/origin/master/scheduler.json",
	)
}

func masterEtcOriginMasterSchedulerJson() (*asset, error) {
	bytes, err := masterEtcOriginMasterSchedulerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/scheduler.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x82\x53\x8b\xca\x32\x93\x53\x83\x33\xd3\xf3\x32\xf3\xd2\x9d\x13\xc1\xb2\x0a\x35\x0a\xc1\x25\x45\x40\xbe\x42\x6d\x2d\x17\x20\x00\x00\xff\xff\xde\x4a\x25\x1f\x46\x00\x00\x00")

func masterEtcOriginMasterServiceSignerCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerCrt,
		"master/etc/origin/master/service-signer.crt",
	)
}

func masterEtcOriginMasterServiceSignerCrt() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceSignerKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\x05\xa7\x16\x95\x65\x26\xa7\x06\x67\xa6\xe7\x65\xe6\xa5\x3b\x27\xea\x01\x35\x28\xd4\x28\x04\x97\x14\x01\xb9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x0d\x26\x0d\x6c\x4b\x00\x00\x00")

func masterEtcOriginMasterServiceSignerKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceSignerKey,
		"master/etc/origin/master/service-signer.key",
	)
}

func masterEtcOriginMasterServiceSignerKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceSignerKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/service-signer.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPrivateKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\x01\x2a\x50\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x7d\xdb\xc4\x1f\x3b\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPrivateKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPrivateKey,
		"master/etc/origin/master/serviceaccounts.private.key",
	)
}

func masterEtcOriginMasterServiceaccountsPrivateKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPrivateKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.private.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterServiceaccountsPublicKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\x4d\xca\xc9\x4c\xf6\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\x01\x2a\xd0\x83\x2b\x55\xa8\x51\x08\x2e\x29\xca\xcc\x4b\x57\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x4a\xfb\x2a\x35\x44\x00\x00\x00")

func masterEtcOriginMasterServiceaccountsPublicKeyBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterServiceaccountsPublicKey,
		"master/etc/origin/master/serviceaccounts.public.key",
	)
}

func masterEtcOriginMasterServiceaccountsPublicKey() (*asset, error) {
	bytes, err := masterEtcOriginMasterServiceaccountsPublicKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/serviceaccounts.public.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginMasterSessionSecretsYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x06\x89\x04\xa7\x26\x17\xa5\x96\x14\x73\x15\x43\x68\x2b\x2e\x5d\x85\xc4\xd2\x92\x8c\xd4\xbc\x92\xcc\xe4\xc4\x12\xb0\x96\xea\x6a\x05\x3d\xe7\xfc\xbc\xb4\xcc\x74\x3d\x14\x4d\x8e\x40\x75\x0a\x35\x0a\x4e\x89\xc5\xa9\x66\x26\xae\x79\xc9\xf9\x29\xa9\x40\x6e\x61\x69\x7e\x49\xaa\x42\x6d\x2d\x97\x82\x42\x6a\x5e\x72\x51\x65\x01\x7e\x43\x80\xfa\xf0\x98\x01\x08\x00\x00\xff\xff\x8b\x6b\x70\xac\xba\x00\x00\x00")

func masterEtcOriginMasterSessionSecretsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginMasterSessionSecretsYaml,
		"master/etc/origin/master/session-secrets.yaml",
	)
}

func masterEtcOriginMasterSessionSecretsYaml() (*asset, error) {
	bytes, err := masterEtcOriginMasterSessionSecretsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/master/session-secrets.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x9c\x13\xc1\x7c\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeCaCrt,
		"master/etc/origin/node/ca.crt",
	)
}

func masterEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeClientCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x9c\x13\xc1\x7c\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcOriginNodeClientCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeClientCaCrt,
		"master/etc/origin/node/client-ca.crt",
	)
}

func masterEtcOriginNodeClientCaCrt() (*asset, error) {
	bytes, err := masterEtcOriginNodeClientCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/client-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x55\x4b\x73\xdb\x36\x17\xdd\xf3\x57\x70\xbc\x0e\x48\x4a\xb1\xbe\xaf\xc3\x99\x2c\x5c\x7b\xd2\x7a\xda\x71\x5d\xc9\xed\x1e\x02\xaf\x24\xd4\x20\x40\x03\x20\x63\x39\xcd\x7f\xef\xb9\x20\xf5\x70\x1a\x67\x3a\x5e\x58\xe0\x39\xf7\x81\x73\x1f\x90\x9d\xfe\x93\x7c\xd0\xce\xd6\xf9\x30\xcb\x64\x1f\x77\xd7\xce\x6e\xf4\xb6\xce\xf2\x9c\x4f\x64\xa3\x56\x32\x82\x70\x2d\xd5\x8e\x56\xfa\x85\xea\x7c\x56\x55\xd5\xb7\xf1\x87\x87\x5f\xeb\x7c\xd1\x4e\xa0\xf3\xfa\xe5\x3b\xb6\xaf\xe1\x83\x69\x63\xc3\x8f\xda\x36\x57\x4d\xe3\x29\x04\x18\xcc\xff\x5f\x54\xf8\x9b\xd5\x8b\xf7\x0c\xde\xb8\x56\x6a\xa4\xab\x4c\x1f\x22\xf9\xc2\x38\x25\x0d\x03\xb7\xf7\x75\x5e\x25\x6a\xc5\xc7\x25\xa9\x1e\x37\x1b\x68\x49\xc1\x99\x81\xaf\x55\xe7\x25\x45\x55\x22\xee\x56\xdb\xd2\xba\x86\x4a\x9f\xc0\x42\x01\xcd\x1a\xa7\x1e\xc9\x9f\xee\x3f\x9e\x57\x3b\xdd\x2e\x9d\x8b\x37\xda\x93\x8a\xce\xef\xe1\x65\x90\xbe\x34\x7a\x5d\x8e\x8c\x00\xc6\x2b\xfa\x8a\x7f\xc5\x89\xe7\x7b\x7b\xc6\x2b\x02\x7e\x82\x4c\xcf\xa4\x7e\x96\xb6\x31\xe4\xef\x64\x0b\x5d\x2c\x94\x18\x28\x23\x2b\xd7\x86\xfe\xb0\xba\x31\xda\x6e\xeb\x3c\xfa\x9e\x32\xdd\xca\x2d\x9d\xf2\xda\x38\xdf\x4a\xb8\xff\xfc\x39\x2f\xc6\xaf\xc5\x2d\x33\x42\xf1\x31\x21\xf9\xdf\xf9\x53\xef\x22\xe5\x5f\xbe\x80\x6d\x64\xa4\x00\xf6\x46\x9a\x00\x57\x5d\xe4\x00\x61\xb5\xb7\xea\x9e\xbc\x76\x4d\x9d\xbf\xaf\x42\xf6\x08\xc9\xeb\xfc\x0e\x92\x8c\x1e\xb3\xc7\x7e\x4d\x86\xe2\x95\xdf\xf6\x2d\x8a\x1c\x38\xf0\x1a\x32\x84\xe8\x65\x27\x18\x55\xc7\x84\xc4\xbf\x75\x3d\x52\x8b\x13\x15\x4c\x45\x3e\x8a\x46\xfb\x37\xac\x18\xd6\x1b\x6e\x28\x0a\xcc\x36\xae\x6f\xc4\x5b\x71\x12\xda\x79\x37\xe8\x86\x7c\x29\x5f\x7a\x4f\x63\x1d\x0f\x86\x07\x6c\x34\x4d\x04\x56\x3e\x29\xcc\x5e\xa3\x77\x06\xfa\x0b\x19\x23\x1a\x50\x34\xc4\xff\x46\xf2\x05\xeb\x7e\xc1\x5a\x93\x8c\xb0\x13\x5b\x4e\x69\xc4\x96\x2e\xe2\xf0\xcb\xa8\xcf\xb5\xd1\x50\xe7\xfa\x94\xf7\x07\xb6\x7c\xf7\x8a\xb3\x22\x3f\xa0\xaf\xbe\xe2\xc0\x57\x2b\x9f\x45\xe7\x9a\xc9\xef\xc5\xa2\xe2\x88\xa9\xd8\x62\xab\x84\x71\x9f\x44\xdc\xa1\x41\x77\xce\xa0\x36\x23\xe7\x7f\x89\x03\x43\xdd\xf6\x2d\x52\x96\x49\x9f\x88\x89\x40\x7f\x4d\x7e\xe6\x8b\xef\x91\x44\x87\x2b\x1f\x8f\x07\x93\x64\xa0\x6d\x32\x38\x82\x22\x46\x23\x9a\xde\xa7\x21\x3d\x24\xd9\x32\x95\xab\x25\x8c\xc4\xf5\xa6\xa0\xe9\x03\xf4\xa4\x54\x6f\x6f\x09\x72\x15\xda\x95\xdc\xa3\x4b\x7c\x46\x2f\x1e\x6e\x2d\x72\xd7\x91\xc5\x30\x6c\xa2\xd0\x76\xe3\xe5\x07\x6c\xa1\x90\x34\x02\x0a\x3d\x44\x2b\xad\xde\xa0\x69\x45\x27\xe3\xee\x8d\x56\x61\xdd\x80\xf8\x24\xb4\x38\x6f\x9c\xaf\x2a\x88\xf9\x8b\xba\x45\x72\xf4\xd4\xb3\x4f\x3e\xb8\x3e\x8e\xac\x59\xc5\x93\x8b\xe0\x5a\x1a\xac\x27\x31\x8a\xdf\xf5\xe6\x70\xaf\x8b\x34\x36\xec\x27\xec\xb1\x6e\x5a\xb8\x49\xa9\x36\x23\xcc\xd7\xbb\x81\x35\x3e\x14\xab\x44\x58\x4e\x78\x1a\xcd\x51\x46\xae\xbf\x56\x34\x09\x71\x36\x9c\xad\xe4\x0d\x36\xb5\x90\xb3\x16\xfb\x05\x42\xff\x06\x21\x3c\xfa\x36\x65\x20\x95\xa2\x8e\xc1\x08\xce\xc3\xbe\xc3\xd7\x5c\x76\x9d\x99\x96\x6e\x39\xd8\xe6\x5c\x71\xb4\x7c\x74\xeb\x7e\xf3\xee\x9c\xf3\x57\x70\x96\xa7\x17\xeb\x10\x7b\xe0\x92\xd7\xaf\x3a\x39\xfc\x4f\xfe\x60\xf2\xd4\x21\xf4\xbc\x9a\x92\xe6\xd6\x9e\x36\x52\xaa\xfd\xf9\x98\xc3\xf4\x93\xf3\x8f\xa7\x85\xd5\xc6\x1e\x7b\xfc\x72\xc1\x91\x27\xf0\xde\xf4\x28\xe5\xb8\xfa\x3c\x35\x3b\x19\xcb\x53\x57\xb8\x21\x88\x89\xd7\x39\xa4\xb6\xcf\x90\xc7\xf3\xfe\xd5\x2e\x9a\xd6\xbf\x50\xba\xf1\x87\x5a\x16\xb3\xf9\x0f\xbc\xfe\xcb\xd9\x65\xc6\x55\xc0\x06\xbd\xb5\x1b\x97\x56\xd7\xf9\x93\x32\xbd\x12\xf5\xac\x9a\xa7\x9c\x18\xbc\x1b\xe3\x61\xe3\xaa\xee\x32\xf9\x4f\x55\xb9\xc2\x43\x23\x0b\xe5\x63\x36\x38\x83\xe8\xa7\x4b\xa5\x77\xe7\x77\x94\x52\xf2\x09\x8d\x4b\xfe\xe3\xea\x27\xef\xfa\x0e\x8a\xa0\x81\x26\x83\x6f\x3d\x1b\x53\x1f\x1f\x2f\x3c\xbe\x61\xc5\x68\x10\xb2\x7f\x02\x00\x00\xff\xff\xc6\x5a\x77\x87\x95\x07\x00\x00")

func masterEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeConfigYaml,
		"master/etc/origin/node/node-config.yaml",
	)
}

func masterEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeNodeKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterEtcOriginNodeNodeKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeNodeKubeconfig,
		"master/etc/origin/node/node.kubeconfig",
	)
}

func masterEtcOriginNodeNodeKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeNodeKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/node.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsApiserverYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x54\x4d\x6f\xd4\x30\x10\xbd\xef\xaf\xb0\x7a\x29\x1c\xbc\x4b\x45\xb9\xac\xd4\x43\xd5\x4a\x50\xa9\x94\x48\xad\xb8\xcf\x26\xd3\xc4\x5a\xc7\x63\xec\x49\x4a\x28\xfd\xef\xd8\x89\xb3\xb4\xdd\x64\x01\x89\x53\x32\x5f\x6f\x9e\xe7\x8d\x0d\x56\x7d\x45\xe7\x15\x99\xb5\x68\x4f\x16\x5b\x65\x8a\xb5\xc8\xa8\x58\xd4\xc8\x50\x00\xc3\x7a\x21\x04\x18\x43\x0c\x1c\x92\x7c\x34\x85\xf0\x79\x85\x45\xa3\xd1\x2d\x41\xdb\x0a\x96\xdb\x66\x83\xce\x20\xa3\x5f\x2a\x5a\xe5\x4e\xb1\xca\x41\x4b\x4b\x01\xec\xf8\x38\x94\x68\xd8\xa0\x4e\xc5\x64\xd1\xf8\x4a\xdd\x73\x9f\x4b\xb5\x25\x83\x86\xd7\x22\x50\x99\x8a\x1b\x76\x14\xa0\x34\x18\x0c\x60\xec\x1a\x8c\x80\x06\xea\x60\xd6\xe0\x19\x9d\x1c\x2a\xa3\xcb\x5b\xc8\x83\x3f\xf2\x91\xbe\x0b\xc1\x7a\xe1\x2d\xe6\xb1\x71\x44\x02\x65\xc2\x61\xa3\x25\x05\xb8\x32\x11\x92\xc2\x33\x38\x4e\xff\x03\x66\x32\x46\x4e\x52\x48\x19\x00\xee\x55\x79\xb6\x42\xce\x57\xe4\x54\xa9\xcc\x6a\xc8\x4d\x9f\x94\xb0\xec\xa0\xd6\xa9\xe8\xf1\x51\x58\xa7\x0c\x8b\x23\x29\x35\x95\x1a\x5b\xd4\x67\x47\xe2\xcd\x25\x3a\xbc\x17\xcb\x8b\xa1\xe0\x62\x9c\xc1\x35\x95\xd7\x31\x65\x79\x9e\x5d\xdd\xa2\x6b\xd1\xbd\x15\x3f\xc5\xb7\x86\x18\xc5\xd3\x53\x8f\x19\xe6\x55\x43\xd0\x28\x35\xd8\xcd\xaa\xb7\x55\x0d\x65\x38\x7d\xe8\x3a\x42\x5f\x45\x8f\x8f\x56\x9c\x62\x16\x87\xf8\x1a\xb1\x2f\xca\x1a\xad\x33\xd2\x2a\xef\xd6\xe2\x5c\x3f\x40\xe7\xfb\x98\x56\x2d\x1a\xf4\x3e\x73\xb4\xc1\xa1\xa7\x10\x15\xb3\xfd\x88\x3c\x9a\x42\x58\xe0\x6a\x2d\x2a\x04\xcd\xd5\x8f\xdf\x5e\x72\x41\xd4\xd3\xd3\xf7\x3b\x4f\xdc\x9a\xa8\xda\xa7\xbb\xbb\xec\x36\x79\x95\x09\xbb\x02\xfa\x12\x35\x74\xb7\x18\x26\x58\xf8\x50\xf4\x21\x45\x59\xd5\x48\x0d\xef\x02\x27\xef\xfa\xc0\x20\xfe\xa8\x8d\x43\x28\xd4\x3f\xb2\x5c\xc5\xa2\xee\x7f\x70\x4d\x94\x66\xb9\x7a\xcc\x9b\x70\x1f\xba\x28\x01\x7e\xdf\xf1\x09\x6b\xd1\x2a\x8d\x25\x86\x1b\x12\x77\xba\x77\xb7\xa4\x9b\x1a\x3f\x53\x63\x78\xb7\x9a\x75\xb4\xb2\x9e\xfb\xfe\xe6\x25\xb0\x17\x97\x61\xd8\xc2\x14\x89\xc7\xfc\x62\x74\xf7\xac\xc9\x2c\x64\xae\xa9\x29\xac\xa3\x56\x15\x33\xc8\x31\x41\xbe\xca\xf8\x63\x87\x16\xdc\x4a\xab\xcd\xd8\x65\x0a\x38\xbe\x33\x33\xdc\xec\x56\x4d\x55\x8c\xee\x89\x56\x54\x4e\x15\x0c\xee\x8a\x3c\xdf\x20\x3f\x90\xdb\xee\xf8\x06\x25\xa8\x17\x48\x83\xf7\x37\x7d\xcd\xf0\x72\x48\x43\x05\xca\xf1\x31\x5b\x8c\xf2\xa4\xe7\x23\x42\xf5\x6d\x17\xcf\xd7\x6b\x46\xa2\x69\x81\xfe\x06\x64\x5f\x94\xc3\x92\xcc\x62\xbe\x94\x61\x1f\x29\x69\x70\x90\xd3\x38\xf5\x09\x29\x0e\xf7\x4d\x9a\xec\x29\xf2\x2b\x00\x00\xff\xff\xb2\xe2\x07\x25\x7e\x06\x00\x00")

func masterEtcOriginNodePodsApiserverYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsApiserverYaml,
		"master/etc/origin/node/pods/apiserver.yaml",
	)
}

func masterEtcOriginNodePodsApiserverYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsApiserverYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/apiserver.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsControllersYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x84\x9c\xb6\x83\xed\x0d\xe8\x61\x30\xd0\x43\xd7\x0c\xeb\xb0\xa6\x33\xd0\xae\xd8\xad\x60\x64\xd6\x16\x22\x4b\x9e\x24\xbb\xcd\xba\xfe\xfb\x28\x59\x71\x97\xd4\x09\xb6\xf6\x10\x4b\x7c\x7c\x7c\xe2\xa3\x04\xad\xb8\x45\x63\x85\x56\x39\xeb\xdf\xcf\xd6\x42\x95\x39\x2b\x74\x39\x6b\xd0\x41\x09\x0e\xf2\x19\x63\x0a\x1a\xcc\x19\xd7\xca\x19\x2d\x25\xc1\xe3\x9e\x6d\x81\x53\x60\xdd\xad\x30\xb1\x1b\xeb\xb0\xa1\x80\x84\x15\x4a\xeb\xd3\x18\xd3\x2d\x2a\x5b\x8b\x7b\x97\x0a\x9d\x71\xdd\xb4\x5a\xa1\x72\xfb\x54\xaf\x70\x21\x98\xb4\x12\x14\xb1\xcf\x9d\xe9\x70\x3e\xb3\x2d\x72\x4f\xea\xa3\x20\x14\x65\xfa\x55\xc2\xc0\x54\xb1\x58\xc2\xac\x03\xe3\xe2\x77\x03\xa4\xc7\xc4\xc5\x7e\xbd\x84\x25\x09\xed\xdd\x8b\xea\x34\x43\xc7\x33\x6d\x44\x25\x54\x36\xe4\xc4\x9f\x08\x48\x37\xd0\xc8\x31\x49\x0a\x0a\xa9\xd3\xda\xb9\xd6\xe6\x59\xf6\x2e\x0d\xff\xf9\x87\x93\x93\x93\x88\x79\x7a\x62\xad\x11\xca\xb1\x39\xa1\x75\x25\xb1\x47\x79\x3a\x67\x6f\x16\x68\xf0\x9e\xa5\xe7\x03\xe9\xf9\xb6\x17\x97\xba\xba\xf4\x10\x1f\x88\x12\x97\xa0\xa0\x42\xf3\x96\xfd\x66\x3f\x3b\xed\x90\x3d\x3f\x07\x6e\xea\x5f\x03\x64\x4f\x2c\x34\xf6\x2c\xac\x51\xf5\xdb\xc0\xe0\xd6\xd7\xef\x1f\x3f\xdd\x2d\xcf\x7e\xdc\x15\x8b\xbb\xdb\x6f\x97\xd7\x21\xc8\x58\x0f\xb2\xa3\x28\xa9\x4c\x49\x91\xe8\xb1\x4c\x97\xf0\xb8\x20\xa3\x17\xc2\xae\x6d\x81\xe6\x76\x19\x54\x0e\x4d\xbe\x46\xd3\x0b\x8e\xfb\x52\x44\x43\x0a\x07\x96\x78\xa0\x2f\x7e\xc7\x6e\x4f\x51\x78\xeb\x26\x93\x8a\x4e\xca\x42\x4b\xc1\x37\x39\x3b\x93\x0f\xb0\x19\x0c\x91\xa4\x44\xa1\xb5\x85\xd1\x2b\xcc\xa3\x56\xdf\xe5\xcf\xe8\xb6\x4b\xc6\x5a\x70\x75\xce\x6a\x04\xe9\xea\x5f\x2f\xbb\xda\xd0\x48\x8d\x16\xf8\x3f\xcb\x6b\xf4\x4d\xb8\xb8\xb9\x29\x86\x93\x4f\x8d\x30\xe1\x90\x77\x46\xb8\x8d\x97\x8d\x8f\x63\x25\x32\xb0\x17\x12\x2b\xa4\xbb\xe0\xa7\x2f\x6c\xf7\x5a\x76\x0d\x2e\x75\xa7\xdc\x38\x70\x8d\x5f\x15\x41\xd5\xc4\x1c\x45\xb6\xa1\xf4\xce\x50\x1d\x4f\xe7\x52\x77\x65\x6b\x74\x2f\xca\x43\x2c\x1e\x91\x6c\x21\x07\xd8\x5e\x6e\x4a\x66\xb0\xa2\xc1\x35\x82\x1c\x2a\x77\x09\xad\xa8\x14\xb8\xce\x60\x22\x1a\xdf\xc8\x09\xae\xce\x9a\x4c\x8a\x15\x3e\x22\xcf\xfc\x55\x37\x0a\x1d\xda\xf0\x29\xd1\xd1\x35\xed\x48\xb4\x8d\xac\x43\xa2\xd1\x2d\x54\xe0\xc2\xab\x72\xa1\xad\xbb\xd1\xe3\x44\xed\x54\x7f\xcd\x51\x13\xfa\x0a\xdd\x83\x36\xeb\xb1\xf7\x64\x87\x0e\x2e\x49\xb0\xf6\x6a\x90\x1d\x5e\x9b\x44\xe9\x12\x13\x4e\x31\xc1\xc1\x5f\xd2\xc1\xa3\xf8\x32\x78\xaa\x70\x84\xd9\xdf\xd3\x73\xc8\xa7\x69\x97\xfe\x85\x65\xc7\xae\x09\xae\x7d\xaf\x8e\x72\x1e\x30\x6d\x76\xd4\xb1\x83\x8c\xff\x61\xdd\xb4\x21\x7f\x02\x00\x00\xff\xff\xe0\x81\x84\xe8\x1f\x06\x00\x00")

func masterEtcOriginNodePodsControllersYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsControllersYaml,
		"master/etc/origin/node/pods/controllers.yaml",
	)
}

func masterEtcOriginNodePodsControllersYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsControllersYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/controllers.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsEtcdYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x54\x5f\x4f\xdb\x30\x10\x7f\xef\xa7\xb0\xfa\xc2\x93\x13\x15\x36\x36\xf2\x86\x28\xd2\x90\x46\x17\x69\x68\xaf\xd3\xd5\x39\x1a\x0b\xc7\xce\x6c\x27\x10\x01\xdf\x7d\x67\xc7\xa1\x01\xda\x87\x36\xb9\x7f\xbf\xbb\xfb\xdd\x5d\xa0\x95\x7f\xd0\x3a\x69\x74\xc1\xfa\xd5\xe2\x41\xea\xaa\x60\xa5\xa9\x16\x0d\x7a\xa8\xc0\x43\xb1\x60\x0c\xb4\x36\x1e\x3c\x39\xb9\x20\x32\xe6\x44\x8d\x55\xa7\xd0\x66\xa0\xda\x1a\xb2\x87\x6e\x8b\x56\xa3\x47\x97\x49\x93\x0b\x2b\xbd\x14\xa0\x78\x6b\x08\xec\xe4\x84\x42\x14\x6c\x51\xa5\x60\xd3\xa2\x76\xb5\xbc\xf7\xd1\xd7\x34\xad\xd1\xa8\x7d\xc1\xd0\x8b\xea\x90\x83\xf6\xd6\x10\x96\x02\x8d\x84\xe6\x6d\x87\x01\x51\x43\x43\x62\x03\xce\xa3\xe5\x29\x34\xe8\x5c\x0b\x82\x0c\xa1\x22\xee\x06\xb2\x36\x0b\xd7\xa2\x08\xa9\x03\x14\x48\x4d\xed\x06\x89\x33\xb0\xbb\x54\x12\x67\x2f\xf1\x49\x9d\xa1\x67\x1c\x92\x90\xb1\x9c\x90\xc3\xaf\x8a\x7f\x19\x21\xdc\x27\x1b\x3e\xa1\xd8\x97\x4c\x6d\x34\x40\xd4\x25\xb4\x7c\x2b\x75\xee\xea\x24\x71\x11\x5f\x50\xf7\x93\x7d\x2c\xfe\xfa\xee\x6a\x7d\x75\xf7\xf3\xef\x65\x79\x93\x40\x7b\x50\x1d\x19\x96\x67\xcb\xa8\x90\x0d\xec\x48\x7c\x7e\x66\xd9\x15\x65\x96\xbb\xec\x26\x68\x5c\x76\x1b\xdb\xbe\xa6\xec\xec\x85\xfd\xeb\x8c\x47\xf6\xfa\xba\x0f\x29\x3b\xa5\x4a\xa3\xa4\x18\x0a\x76\xa9\x1e\x61\x70\xd1\xa6\x64\x8f\x1a\x9d\x2b\xad\xd9\x62\x31\xeb\x63\x7a\xff\xd0\xc7\x58\x6b\xe8\x51\x78\x35\xd3\x70\x2e\x88\x63\xeb\x67\xaa\x3d\x4f\x02\x32\xf1\xce\x44\xde\xc7\x7c\x5b\xa4\x0d\xfa\xe8\xfd\x80\xc3\x71\xe7\xf7\x46\xce\x51\x57\xad\x91\xda\xbb\x99\xb6\xf6\xbe\x75\x45\x9e\x07\xda\x7e\x18\xe7\x03\xd9\x44\x4f\x71\x7a\xf6\xed\x62\xde\x57\x0a\x9d\x47\x22\x28\x5f\x27\x85\xd4\xb4\xc5\xa0\xd6\xa8\x60\xf8\x8d\x34\xf9\xca\x15\xec\xcb\xd7\x68\x1d\xe7\xf7\x36\x7d\x87\xa2\xa3\x9d\x1f\x68\x48\x1e\x9f\xfc\xc4\x5e\x6b\x65\x2f\x15\xee\x90\xae\x20\xac\x6d\x54\xf7\x46\x75\x0d\xde\x9a\x8e\x8a\x9e\xd6\xa1\x09\x52\x09\xbe\x2e\xf6\xfd\x26\x8c\x7d\x26\x2e\xe2\x0a\x24\xbd\x45\xa8\x7e\x69\x35\xcc\x90\xdf\xe3\xf4\x60\x73\x25\xb7\x47\xb0\xc2\x65\x47\xed\xa3\xb1\x74\xf3\xbb\xb5\xb4\x9f\x63\x6a\x22\x6f\x83\x3e\xb8\xbc\xa5\xa9\xb4\x9b\x36\x6b\xb9\xa1\xc3\x5d\x8e\xba\x71\x3d\x8b\x37\x72\x1c\xda\x3e\xdd\xd9\x58\xda\xea\xfc\x7b\x76\x7e\x96\xad\x4e\x2f\xb2\xd5\x79\x22\x0d\x2c\x7d\x46\x66\x3e\x61\x60\x6b\xd3\xd0\x89\x6e\xc6\x91\x2d\x22\x87\x26\x52\xab\xc0\xb9\x4d\x6c\x60\xbc\x6a\xae\x4d\x85\x7c\xfa\xd4\x2c\x26\x62\xd3\x69\x87\xd2\x23\x11\xd3\x28\x0e\x90\x7b\x88\xda\xa3\x91\x9f\xe8\xfc\x48\xe6\xff\x00\x00\x00\xff\xff\x8d\x7b\x37\x76\x49\x05\x00\x00")

func masterEtcOriginNodePodsEtcdYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsEtcdYaml,
		"master/etc/origin/node/pods/etcd.yaml",
	)
}

func masterEtcOriginNodePodsEtcdYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsEtcdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/etcd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xeb\x86\x64\x03\x26\x29\xce\x1a\x04\x55\xd0\x0e\xc5\x36\x0c\x79\xc8\x0f\xc4\x5b\x5f\x8a\x22\xa5\xa9\xb3\xc5\x99\x22\x59\x1e\x65\xd7\x4b\xfb\xbf\xef\x48\x4b\x8a\xdd\x38\x5d\xd1\x3e\x59\x3c\xde\x7d\xe4\x7d\xf7\xdd\xd1\xc2\xa9\x57\xe8\x49\x59\x53\xc2\x72\x3c\x5a\x28\x53\x95\x70\x6d\xab\x51\x83\x41\x54\x22\x88\x72\x04\x20\x8c\xb1\x41\x04\x76\xa2\xb8\x04\x20\x59\x63\xd5\x6a\xf4\xb9\xd0\xae\x16\xf9\xa2\x9d\xa2\x37\x18\x90\x72\x65\x0b\xe9\x55\x50\x52\xe8\xcc\x59\x06\x3b\x3c\xe4\x10\x2d\xa6\xa8\xbb\x60\xe1\x5c\x09\x76\x49\x69\x21\x6d\xe3\xac\x41\x13\x4a\xe0\xf8\x95\xf5\x8b\x64\xb6\x0e\x0d\xd5\x6a\x16\x12\xde\x7e\x9f\xb0\x76\x58\x82\x32\x33\x2f\x78\x6d\x44\x83\x3d\x6c\xfc\x26\x27\x64\x34\xf4\x40\x19\x55\x66\x44\x0e\x65\xbc\x84\xb4\x26\x08\x65\x38\xf1\xb8\xca\xe2\x2d\x1a\xc1\x99\x27\xdc\x0c\x8a\xa9\x32\xc5\x54\x50\xdd\xad\x33\xd9\x7d\x7c\x48\xbf\x00\xdf\x7f\xb7\xeb\xc2\x8c\x60\x80\x0c\x5b\x0b\x4e\x39\x9c\x09\xa5\x47\xbd\x2b\xa8\x19\x13\x68\x43\x8d\x1e\x9c\xb7\x12\x89\x40\x11\x68\x45\x01\x8d\x32\x73\xb0\x06\x78\x13\xa4\x51\x19\xa1\x5f\xb2\x1b\x59\xb9\xc0\xf0\x33\xac\x84\x0a\xd0\x9a\xa0\x34\xf0\x07\xbe\x57\x81\x3a\xd4\xe0\x85\x83\xc3\x85\xd2\x1a\x7e\xf8\xf1\x1f\x3b\x25\xc8\xdc\x4f\x67\xc9\x05\x8e\x0e\xe1\xaf\x3f\x6e\x2e\x3a\xcf\x55\xad\x34\xb2\x7f\x8b\x67\x50\xd9\xce\x08\xf1\x52\x45\x4b\xbe\xa0\x5a\x78\x2c\x22\x4b\x4b\x5a\xa9\x20\xeb\x82\xb8\x7c\x2e\x50\xc1\x54\x66\x32\x68\x20\xae\x7c\x4b\x70\xf0\xa2\xa8\x70\x59\x98\x56\xeb\xb3\x78\x5f\x33\x40\x01\xa0\xac\x2d\x3c\x59\x09\x1f\xf3\x29\xe1\xe5\xc3\x6c\x65\xeb\x3d\x17\x50\xaf\x81\x79\x16\xf3\x98\xf6\xd5\xab\xc9\x26\xc3\xb8\x38\x21\xc8\xf3\xfc\x09\x1c\xbf\x38\x18\x6f\x01\x93\x46\x74\x70\x02\x07\xc9\x71\xd8\x60\x29\xe1\x96\xd7\xd4\xa3\x58\x0c\xeb\x99\xea\x3e\x2b\xd6\xcc\x7d\x15\xb4\x68\x8d\xac\xe3\xa9\x9d\x69\xc6\xeb\x28\x69\x78\xd7\x32\x69\x77\x5b\x78\x5f\x4c\x8c\x75\xdb\x24\x24\xee\x3b\xc3\xc7\xed\x3a\xa5\x03\x26\xe7\x7f\x6e\x55\xe5\xcb\xb9\xf7\xac\xab\xcc\xd8\x2c\x9a\x3a\xb7\x8a\x2d\xb4\x66\xf9\x34\x99\xaa\x9e\x7b\x16\xae\x6d\xee\x13\xbd\x41\x0a\x5e\xc9\x90\x44\x65\xda\x86\x3b\x13\xec\x0c\x5c\xa8\x99\xa6\x8a\x60\x07\x48\xb2\x8d\xbb\x16\x82\x05\xcf\x1d\x2d\x31\x46\x0d\x50\xa2\xb1\xac\xbe\x18\x7d\x33\x99\x44\x09\xb6\xc4\xbe\x4c\x59\x6d\x29\x10\x30\x46\x1d\xeb\xb9\xe6\xfe\xf1\x48\x43\x58\x1d\x82\xa3\xb2\x28\xa6\xed\xfc\x5f\x56\xa8\xc8\x19\xba\x16\x21\xe7\x2e\xe3\x9c\xed\xea\x96\x37\x72\x39\x57\xbf\xf2\xed\xc7\x27\xa7\xe3\x5f\x4e\x9f\x7d\x6d\xec\xf1\xe9\xb3\xd3\xd1\xa0\xe8\xd7\xaf\xe1\xad\x89\xaa\x7b\x0b\xd9\x3c\xc0\xf8\x18\xde\xbc\x79\x20\xd6\x4d\xfe\x91\xdd\xc4\x6b\xea\xb1\xd8\xbd\x57\x5c\x87\xdb\xe5\x24\x11\x03\x39\x24\x09\xdf\xf2\xa0\x98\xa9\x79\x69\x32\x8f\x4b\xa1\x15\x0f\x44\xeb\xb3\x8e\xc9\xe7\x4f\xbf\x19\xb5\xe6\xda\xf1\x14\x1d\x10\xc7\xbd\x7e\x06\x11\x7f\x95\x50\xaa\x69\x3f\x49\xf6\x08\x65\x83\xbb\x3b\x16\xfa\x46\x3b\xdb\x34\x4d\xa2\xb3\x11\x73\x9e\x9f\x77\x77\x90\xff\x96\xae\x9b\x9f\x47\x0b\xe5\x97\xb6\x42\xf8\xc0\xa2\xb6\x01\xe1\xe3\x46\xe8\xdd\xf0\xbd\xbf\x60\xb2\xb2\x26\x6c\xeb\x79\x04\x94\xdd\xa1\x5a\x35\x3c\xc2\xca\x81\x36\xe9\xda\x12\x8e\x8f\x8e\x9a\xc1\xd2\x60\x63\xfd\xba\x84\xa7\x47\x47\x17\x3d\x05\x1e\xdf\xb5\xac\xe9\x4f\xe3\xc6\x7b\xc2\xc6\x43\x18\x21\x8f\x1c\x15\xd6\x7c\xf7\x80\xef\x43\x1f\xeb\xbc\x5a\x72\xe2\x73\xe4\x87\x29\x26\xdf\x1f\xd1\x9a\x97\xf4\x37\x73\x56\x76\x1d\xbc\xb4\xba\x6d\xf0\x22\xca\x9f\xfa\x57\x21\x35\xc3\xb5\x08\x75\x09\x85\x56\xd3\xa2\xb1\xf1\x09\xec\x65\xbf\xa1\x20\x36\x46\xb6\xbb\x11\x2b\x7b\x65\xf4\x7a\xeb\xc0\x5d\x2c\x3e\xbc\xf8\x94\xba\x1d\x3c\x76\xc8\xfa\xf7\x72\x37\x74\x29\xfc\xb7\x84\xb3\x36\x1e\xba\xdf\x1b\xff\xf7\xe6\x18\xe4\xe7\x8f\xde\x08\x3d\xdb\xf5\x89\x3b\x97\x9b\x77\x7c\x40\x8e\xb6\xeb\xf3\xdf\x87\x35\xd7\xc9\xa6\xf2\x69\x41\x74\x99\x00\x3b\x21\x1b\x96\x5f\xd6\xff\xc3\x18\xf5\x95\xea\xde\xf1\x04\x13\xef\xd6\x97\x7b\x7f\xb5\xf6\xd6\xea\xd1\xe8\x7d\x04\xef\xa5\xf7\x51\x84\x9e\xd2\x07\x2c\x3f\x1a\x91\x98\xf5\x8a\x1f\xca\xcf\x1d\xbd\x87\xde\xff\x02\x00\x00\xff\xff\x41\x1c\xe0\x81\xd0\x09\x00\x00")

func masterEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsOvsYaml,
		"master/etc/origin/node/pods/ovs.yaml",
	)
}

func masterEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x6d\x4f\xe3\x46\x10\xfe\x9e\x5f\x31\xa5\xa7\xa3\xad\x6a\x1b\x90\xa8\x2a\xa3\x3b\x89\x42\x7a\x8d\x04\x01\xdd\xc1\xa9\xd2\xe9\x84\x36\xf6\x24\xde\x66\xbd\xeb\xdb\x5d\x07\x52\xb8\xff\xde\xd9\xf5\x4b\x12\x8c\x03\xf4\x0b\xec\xce\xcb\x33\x2f\x3b\xcf\xc4\xac\xe0\x9f\x51\x1b\xae\x64\x0c\x8b\xfd\xc1\x9c\xcb\x34\x86\x4b\x95\x0e\x72\xb4\x2c\x65\x96\xc5\x03\x00\x26\xa5\xb2\xcc\x92\x91\x71\x57\x00\x93\x64\x98\x96\x02\x75\xc8\x44\x91\xb1\x70\x5e\x4e\x50\x4b\xb4\x68\x42\xae\xa2\x44\x73\xcb\x13\x26\x82\x42\x11\xd8\xce\x0e\xb9\x08\x36\x41\x51\x3b\xb3\xa2\x88\xc1\xa4\xd2\x5f\x12\x95\x17\x4a\xa2\xb4\x31\x90\xff\xad\xd2\x73\x2f\x56\x05\x4a\x93\xf1\xa9\xf5\x78\x4f\xdb\xd8\x65\x81\x31\x70\x39\xd5\x8c\xee\x92\xe5\xd8\xc0\xba\xb3\x29\x58\x42\x82\x16\x28\x70\x2a\x53\x60\xe2\x92\x48\x94\xb4\x8c\x4b\x2a\xdc\xdd\x02\x97\x45\xce\xa8\x72\x8f\x1b\x40\x34\xe1\x32\x9a\x30\x93\xd5\xf7\x20\xa9\x0f\x0f\xfe\x3f\xc0\x8f\x3f\x6c\x9a\x50\x47\xd0\x42\x80\xa5\x82\x82\x17\x38\x65\x5c\x0c\x1a\x53\xe0\x53\x6a\xa0\xb2\x19\x6a\x28\xb4\x4a\xd0\x18\xe0\x06\x04\x37\x16\x25\x97\x33\x50\x12\x48\x09\x89\xe4\x81\x41\xbd\x20\x33\xa3\x92\x39\xda\x5f\xe1\x96\x71\x0b\xa5\xb4\x5c\x00\x1d\xf0\x8e\x5b\x53\xa3\x5a\xcd\x0a\xd8\x9d\x73\x21\xe0\xcd\x4f\xff\xa8\x89\x81\xa0\xf8\xf9\xc8\x9b\xc0\xde\x2e\x5c\x0d\x3f\x9e\xd7\x96\xb7\x19\x17\x48\xf6\x25\x1e\x41\xaa\x6a\x21\xb8\xa4\x30\xc9\x14\xec\xd2\x9b\xd9\x5d\x78\x70\x31\x19\x95\x00\xd7\xe3\xd1\xdf\xc1\xc9\xc5\x78\x3c\x3c\xb9\x8a\xa3\x05\xd3\x91\x2e\x65\xb4\xd1\xc6\x68\x95\x6a\xe8\x52\x85\xf7\x51\x8a\x8b\x48\x96\x42\x1c\xb9\x52\x64\x1b\x05\xaa\x20\x3b\xb7\x4c\xbb\x52\x63\x38\xee\x36\x22\x29\xb5\xa6\xb7\x15\xcb\x6e\x4b\x4e\xc6\xa3\x8d\x5e\x38\xd5\xa1\x81\x30\x0c\x77\xe0\xe0\xfd\xdb\xfd\xb5\x38\x46\x20\x16\x70\x08\x6f\xbd\x61\xab\xa0\xa1\xc3\x35\xab\x89\x46\x36\x6f\xef\x53\x5e\x1f\x53\x9a\xae\xd5\x7b\x5d\xb1\x39\x82\x72\xef\x50\x4f\x1b\x4c\x4b\x99\xf8\xe9\x6f\x12\x93\x2a\x6d\x60\x75\x0e\xc1\xc7\x29\x44\x68\x13\xd7\x97\x88\x7c\xc2\x34\xfa\x7d\x2f\x58\xb5\xac\x86\x09\x69\xea\xa6\xb5\x57\x52\x54\x5e\xaa\xb0\xde\xcb\x4d\xd3\x2f\x10\x65\xca\xd8\x0d\x59\x93\x15\x3d\xd7\x97\x2f\x10\xd4\x71\xcc\xd2\x38\x2c\x3e\x8b\x94\xe6\x33\x2e\x03\x97\x0f\x7c\xfd\xfa\xa8\xfb\x7e\x26\x15\x30\x21\xf0\xae\x50\x7a\xd5\x15\xa3\x4a\x9d\xe0\x16\xac\x41\xdb\xa0\xfa\x84\x77\x98\xac\xb8\x04\xc6\x32\x6d\xdb\xf6\x04\x41\x85\xf0\xce\x03\x56\x30\x91\x83\xf1\x7f\x6a\x65\xb8\x64\xb9\x20\x53\xb7\x2a\xfa\xcc\x69\xb6\xc2\x95\x9e\x8c\x85\x9a\x09\x5c\xa0\x78\xf7\xe6\xfe\x74\xf8\xc7\xf5\x87\x9b\xb3\x8b\x0f\x67\xc3\xcf\xc3\xb3\x38\x38\xf8\xee\x53\x43\xb9\x68\x58\x5b\x6d\x80\x8b\xcb\xe1\xf8\xd3\x5f\xa3\x3f\xaf\x6e\x4e\xc7\x9f\x6e\x4e\x2f\xce\x8f\x47\xe3\xba\x88\x05\x13\x25\x59\x24\xa2\xa4\x39\xd3\xa1\xa0\x89\x17\x5e\xc5\x73\x36\x23\xc5\xfd\x3d\x84\x27\x55\xb2\x23\x27\x31\xe1\xd8\xf5\xf5\x01\xbe\x95\xca\x22\x7c\xaf\x22\xae\x2f\x1a\x00\xd7\x57\xd3\x64\xd0\xae\x95\x4b\x92\xc6\xb0\xbf\x77\x70\xf8\x5b\x1d\xdb\xbd\x6c\x57\x5a\x61\x65\xc8\x84\xcd\xfe\xf5\x32\x8d\xd5\xe3\xd4\x98\x4e\xf0\xad\x24\x8a\xb6\x77\x37\x3b\xa5\x43\xc9\x5b\x41\x8e\xb9\xd2\x4b\x27\xdb\x3b\xaf\x46\xda\x20\xb1\x8a\xdb\x25\x55\x63\xf1\xce\x36\xbe\x85\xe6\x0b\xda\x06\x33\xa4\xb5\xec\x36\x42\x13\xa2\x94\xc7\xe6\x9a\x08\x1d\xc3\x9e\x17\x2d\x94\x28\x73\x3c\x57\xb4\x7a\xda\xda\x72\x77\xbb\x64\x36\x8b\xa1\xf3\x6e\x9b\xd5\x50\xa5\xf5\x9b\xb7\x25\xb0\xf4\x42\x8a\xe5\x5a\xd0\x2e\xde\xb6\x39\x5c\x03\x6e\xcd\xd6\xf5\xcf\x06\xa8\xd7\x58\x17\x8e\x14\x41\xa3\x78\xd2\x25\x4a\x27\xa5\x79\xa2\xc0\xda\x31\x70\xea\x57\x66\xe1\x97\xe9\xc2\xdc\x72\x9b\x64\x5b\x90\xd5\xe2\xd5\xc0\xab\x9f\xe1\x2d\xb8\x2b\xa3\xff\x93\xf7\xea\xb7\xb4\x3f\xf1\x8e\xd9\x26\xdc\xe3\x25\xd7\x45\x22\x65\xe0\x7e\x63\x1a\x65\x77\x5a\xda\x4d\xdb\x75\x26\xb5\x77\x26\x75\xda\x53\x8c\xe0\x93\x06\xc1\x2d\x30\xf3\x92\xca\xc8\xa7\x81\xf5\x3e\x9d\x32\x9d\xe5\xb8\x52\xb6\x9d\xf4\xac\x1f\x9d\xb6\x77\x22\xa0\xf2\xbc\x14\xcc\x98\x71\xb5\x48\x96\xb4\x8c\xf2\xa0\xda\x94\xf5\x87\xd3\xa0\xa1\x60\xfd\x79\xe2\x61\x5c\xfa\x0d\x8f\x9f\xa4\xe1\xa0\x8f\x83\x5b\x01\xfa\x79\xb7\x8d\x75\xbd\x90\xae\xb5\xb9\x72\xdf\x86\xe6\x31\xc8\x4a\xdc\xeb\xbd\xce\xd3\x27\x59\xfa\x9c\x67\xd4\xf2\xb1\x9f\xab\xcf\x62\xac\xf1\xb3\x0f\xaa\x22\xe7\xb3\x48\x8f\xb8\xf6\x1c\x1b\x5f\x94\xd9\xe6\x9c\xbe\x80\x7f\xbd\xa8\x8f\x39\xd8\xcb\xc0\xad\x03\xb4\x49\xc5\x7e\x22\x6e\x2d\xee\x05\x8c\x7c\x1d\x1f\xff\x0b\x00\x00\xff\xff\x7b\x9a\x32\x52\xd8\x0c\x00\x00")

func masterEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodePodsSdnYaml,
		"master/etc/origin/node/pods/sdn.yaml",
	)
}

func masterEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := masterEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func masterEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeResolvConf,
		"master/etc/origin/node/resolv.conf",
	)
}

func masterEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := masterEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func masterEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcOriginNodeSdnKubeconfig,
		"master/etc/origin/node/sdn.kubeconfig",
	)
}

func masterEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := masterEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x9c\x13\xc1\x7c\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x1c\xcc\xb1\xae\x82\x30\x14\x80\xe1\xbd\x4f\xc1\x13\xb4\x21\x77\xee\x70\x81\x63\x43\xac\xd4\x88\xb0\x12\xc1\x43\xd3\xa8\x3d\xa4\x56\x16\xc2\xbb\xdb\x38\xfd\xd3\xff\x99\xf3\xb5\x36\x4d\x2b\x59\x05\x45\xa7\x06\x6d\x94\x86\x1e\xb4\xdc\xb6\xac\xc2\x80\x73\xc6\x4b\xf2\xb3\xb3\x29\xaf\x85\x3c\xfa\xa8\xc9\x6a\x5c\xf1\xc9\x1b\xba\x63\xb6\xef\xac\x3e\xfd\x2b\x18\x7a\xb8\xb4\x49\x92\xeb\x1f\xcf\x73\x76\xec\x0a\x28\x4d\x73\xa8\x95\x14\x18\x27\x41\xc1\x59\xe7\x85\x4f\x8b\x18\x89\xe2\x3b\x86\xdb\xc2\x1f\x9f\x11\xa7\x1f\xcf\xbe\x01\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func masterEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_masterEtcSysconfigAtomicOpenshiftNode,
		"master/etc/sysconfig/atomic-openshift-node",
	)
}

func masterEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := masterEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterRootKubeConfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4c\xc9\xcd\xcc\xf3\x2e\x4d\x4a\x4d\x06\xf3\x15\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\x6c\x47\x07\x4b\x33\x00\x00\x00")

func masterRootKubeConfigBytes() ([]byte, error) {
	return bindataRead(
		_masterRootKubeConfig,
		"master/root/.kube/config",
	)
}

func masterRootKubeConfig() (*asset, error) {
	bytes, err := masterRootKubeConfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/root/.kube/config", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _masterVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func masterVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_masterVarLibOriginDockerConfigJson,
		"master/var/lib/origin/.docker/config.json",
	)
}

func masterVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := masterVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginCloudproviderAzureConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\xd0\x73\x49\x2d\xca\x2c\x4b\x4d\xd1\x0b\xcf\x2f\xca\x4e\x2d\x72\xce\xc9\x2f\x4d\x09\x28\xca\x2f\xcb\x4c\x01\x72\xf2\xf3\xd2\x14\xf4\x80\x64\x49\x62\x66\x5e\x6a\x51\x70\x6a\x51\x59\x66\x72\xaa\x42\x8d\x42\x70\x49\x51\x66\x5e\xba\x42\x6d\x2d\x17\x20\x00\x00\xff\xff\x73\xa7\x88\x79\x42\x00\x00\x00")

func workerEtcOriginCloudproviderAzureConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginCloudproviderAzureConf,
		"worker/etc/origin/cloudprovider/azure.conf",
	)
}

func workerEtcOriginCloudproviderAzureConf() (*asset, error) {
	bytes, err := workerEtcOriginCloudproviderAzureConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/cloudprovider/azure.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeBootstrapKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcb\x4f\x49\x75\xca\xcf\x2f\x29\x2e\x29\x4a\x2c\xf0\x2e\x4d\x4a\x4d\x06\x8b\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xc9\x1b\x98\x7a\x3b\x00\x00\x00")

func workerEtcOriginNodeBootstrapKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeBootstrapKubeconfig,
		"worker/etc/origin/node/bootstrap.kubeconfig",
	)
}

func workerEtcOriginNodeBootstrapKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeBootstrapKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/bootstrap.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x9c\x13\xc1\x7c\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcOriginNodeCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeCaCrt,
		"worker/etc/origin/node/ca.crt",
	)
}

func workerEtcOriginNodeCaCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\xfc\xf2\x53\x52\x9d\xf2\xf3\x4b\x8a\x4b\x8a\x12\x0b\xc0\x52\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\xb5\x29\x12\x85\x43\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperCrt,
		"worker/etc/origin/node/node-bootstrapper.crt",
	)
}

func workerEtcOriginNodeNodeBootstrapperCrt() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeBootstrapperKey = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x08\x28\xca\x2c\x4b\x2c\x49\xf5\x4e\xad\x74\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x73\x4e\x2d\x2a\xc9\x4c\xcb\x4c\x06\xca\x16\xeb\xf9\xe5\xa7\xa4\x3a\xe5\xe7\x97\x14\x97\x14\x25\x16\xe8\x01\x55\x2b\xd4\x28\x04\x97\x14\x65\xe6\xa5\x2b\xd4\xd6\x72\x01\x02\x00\x00\xff\xff\xe3\x74\x32\xfb\x48\x00\x00\x00")

func workerEtcOriginNodeNodeBootstrapperKeyBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeBootstrapperKey,
		"worker/etc/origin/node/node-bootstrapper.key",
	)
}

func workerEtcOriginNodeNodeBootstrapperKey() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeBootstrapperKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-bootstrapper.key", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeNodeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x55\x4d\x53\xe4\x36\x10\xbd\xfb\x57\xb8\xe6\xbc\xb2\x3d\x2c\x24\x29\x57\xe5\x40\xa0\x76\x43\x25\x45\xc8\x0c\xc9\x5d\xc8\x3d\x33\x0a\xb2\x64\x24\xd9\xcb\xb0\xd9\xff\x9e\xd7\xb2\xe7\x6b\xb3\x50\x49\x71\x60\xe4\xf7\xfa\xeb\x75\xab\x25\x3b\xfd\x27\xf9\xa0\x9d\xad\xf3\x61\x9e\xc9\x3e\x6e\xae\x9c\x5d\xe9\x75\x9d\xe5\x39\x9f\xc8\x46\xad\x64\x04\xe1\x4a\xaa\x0d\x2d\xf5\x0b\xd5\xf9\xbc\xaa\xaa\x6f\xe3\xf7\xf7\xbf\xd6\xf9\x45\x3b\x81\xce\xeb\x97\x37\x6c\x4f\xe1\x9d\x69\x63\xc3\x4f\xda\x36\x97\x4d\xe3\x29\x04\x18\x9c\x7d\x5f\x54\xf8\x9b\xd7\x17\xef\x19\xbc\x76\xad\xd4\x48\x57\x99\x3e\x44\xf2\x85\x71\x4a\x1a\x06\x6e\xee\xea\xbc\x4a\xd4\x8a\x8f\x0b\x52\x3d\x2a\x1b\x68\x41\xc1\x99\x81\xcb\xaa\xf3\x92\xa2\x2a\x11\x77\xad\x6d\x69\x5d\x43\xa5\x4f\x60\xa1\x80\x66\x8d\x53\x8f\xe4\x0f\xf5\x8f\xe7\xe5\x46\xb7\x0b\xe7\xe2\xb5\xf6\xa4\xa2\xf3\x5b\x78\x19\xa4\x2f\x8d\x7e\x28\x47\x46\x00\xe3\x84\xbe\xe4\x5f\x71\xe2\xf9\xde\x1e\xf1\x8a\x80\x9f\x20\xd3\x33\xa9\x9f\xa5\x6d\x0c\xf9\x5b\xd9\x42\x17\x0b\x25\x06\xca\xc8\xca\x07\x43\x7f\x58\xdd\x18\x6d\xd7\x75\x1e\x7d\x4f\x99\x6e\xe5\x9a\x0e\x79\xad\x9c\x6f\x25\xdc\x7f\xfe\x9c\x17\xe3\xd7\xe2\x86\x19\xa1\xf8\x90\x90\xfc\xef\xfc\xa9\x77\x91\xf2\x2f\x5f\xc0\x36\x32\x52\x00\x7b\x25\x4d\x80\xab\x2e\x72\x80\xb0\xdc\x5a\x75\x47\x5e\xbb\xa6\xce\xdf\x57\x21\x7b\x84\xe4\x75\x7e\x0b\x49\x46\x8f\xd9\x63\xff\x40\x86\xe2\xa5\x5f\xf7\x2d\x9a\x1c\x38\xf0\x03\x64\x08\xd1\xcb\x4e\x30\xaa\xf6\x09\x89\x7f\xeb\xba\xa7\x16\x07\x2a\x98\x8a\x7c\x14\x8d\xf6\xaf\x58\x31\xac\x57\x3c\x50\x14\x98\x6d\x5c\xdf\x88\xd7\xe2\x24\xb4\xf3\x6e\xd0\x0d\xf9\x52\xbe\xf4\x9e\xc6\x3e\xee\x0c\x77\xd8\x68\x9a\x08\xac\x7c\x52\x98\xbd\x46\xef\x0c\xf4\x17\x32\x46\x0c\xa0\x68\x88\xff\x8d\xe4\x19\xeb\x3e\x63\xad\x49\x46\xd8\x89\x35\xa7\x34\x62\x0b\x17\x71\xf8\x65\xd4\xe7\xca\x68\xa8\x73\x75\xc8\xfb\x47\xb6\x7c\x77\xc2\x59\x92\x1f\x30\x57\x5f\x71\xe0\xab\x95\xcf\xa2\x73\xcd\xe4\x77\x76\x51\x71\xc4\xd4\x6c\xb1\x56\xc2\xb8\x4f\x22\x6e\x30\xa0\x1b\x67\xd0\x9b\x91\xf3\x5d\xe2\xc0\x50\xb7\x7d\x8b\x94\x65\xd2\x27\xe2\x46\x60\xbe\x26\x3f\x67\x17\x6f\x91\x44\x87\x92\xf7\xc7\x9d\x49\x32\xd0\x36\x19\xec\x41\x11\xa3\x11\x4d\xef\xd3\x25\xdd\x25\xd9\x32\x95\xbb\x25\x8c\x44\x79\x53\x50\xcc\x62\xe7\xb5\x8d\xf9\x2c\x41\x50\x96\x52\xe7\xbd\x25\x08\x57\x68\x57\xce\xf2\x62\x81\xaf\xf9\x2c\x55\x3f\x3b\x1d\x52\xa8\x20\x5a\x69\xf5\x0a\xa3\x2a\x3a\x19\x37\xaf\x0c\x08\xab\x05\xc4\x27\x79\xc5\xf1\xb8\x7c\xd5\x37\xdc\xba\xa8\x5b\x24\x42\x4f\x3d\xfb\xe4\x83\xeb\xe3\xc8\x9a\x57\x7c\x5f\x39\x3d\xe0\x81\xbb\xd3\xec\xab\x28\xae\x71\x2b\xf0\xa1\xe0\xe6\x2d\x26\x34\xdd\xb3\x51\x13\x6e\xa6\x56\x34\x15\x73\x52\x04\xb8\x5a\x1a\x6c\x39\x31\xf6\xb0\xeb\xcd\x4e\x9e\x59\xba\x7d\x9c\x58\xd8\x62\x6b\xb5\x6f\xc4\x5d\x26\xc2\xff\x89\xdc\x4a\x5e\x84\xd3\x24\x3a\x6b\xb1\xa6\xd0\xaf\xdf\x30\x73\x1e\xe3\x9f\x32\x90\x4a\x51\xc7\x60\x04\xe7\x7e\xdb\xe1\x6b\x2e\xbb\xce\x4c\xbb\xbb\x1c\x6c\x73\xdc\x2e\xdc\x9c\xe8\x1e\xfa\xd5\xbb\x63\xce\x5f\xc1\x59\x5e\x02\xd8\xaa\x58\x27\xe7\xbc\xc5\xd5\xc1\xe1\x7f\xf2\x07\x93\xa7\x0e\xa1\xcf\xaa\x29\x69\x16\x79\x5a\x6c\x69\xa6\x8e\xb7\x05\x4c\x3f\x39\xff\x78\xd8\x7b\x6d\xec\xf1\x1c\x9c\x5f\x70\xe4\x09\xbc\x33\x3d\x66\x63\xdc\xa0\x9e\x9a\x8d\x8c\xa5\xeb\xc8\x62\xd3\xae\xa2\x70\x43\x10\x13\xaf\x73\x48\x6d\x9b\x21\x8f\xe7\xed\xc9\x4a\x9b\x5e\x11\xa1\x74\xe3\x77\xc3\x51\xcc\xcf\x7e\xe0\x57\xa4\x9c\x9f\x67\xdc\x05\x2c\xe2\x1b\xbb\x72\x69\x03\x1e\xbf\x4c\xd3\x63\x53\xcf\xab\xb3\x94\x13\x83\xb7\x63\x3c\x2c\x6e\xd5\x9d\x27\xff\xa9\x2b\x97\x78\xaf\x64\xa1\x7c\xcc\x06\x67\x10\xfd\x50\x54\x7a\xbe\x7e\x47\x2b\x25\x9f\x70\x13\xc8\x7f\x58\x7e\xf4\xae\xef\x50\xeb\x47\x3d\xf1\xbf\xf5\xf8\x4c\xf7\x62\x5f\xef\xf8\x12\x16\xa3\x41\xc8\xfe\x09\x00\x00\xff\xff\x95\x0d\x0f\xbb\xdb\x07\x00\x00")

func workerEtcOriginNodeNodeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeNodeConfigYaml,
		"worker/etc/origin/node/node-config.yaml",
	)
}

func workerEtcOriginNodeNodeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeNodeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/node-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsOvsYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\xeb\x86\x64\x03\x26\x29\xce\x1a\x04\x55\xd0\x0e\xc5\x36\x0c\x79\xc8\x0f\xc4\x5b\x5f\x8a\x22\xa5\xa9\xb3\xc5\x99\x22\x59\x1e\x65\xd7\x4b\xfb\xbf\xef\x48\x4b\x8a\xdd\x38\x5d\xd1\x3e\x59\x3c\xde\x7d\xe4\x7d\xf7\xdd\xd1\xc2\xa9\x57\xe8\x49\x59\x53\xc2\x72\x3c\x5a\x28\x53\x95\x70\x6d\xab\x51\x83\x41\x54\x22\x88\x72\x04\x20\x8c\xb1\x41\x04\x76\xa2\xb8\x04\x20\x59\x63\xd5\x6a\xf4\xb9\xd0\xae\x16\xf9\xa2\x9d\xa2\x37\x18\x90\x72\x65\x0b\xe9\x55\x50\x52\xe8\xcc\x59\x06\x3b\x3c\xe4\x10\x2d\xa6\xa8\xbb\x60\xe1\x5c\x09\x76\x49\x69\x21\x6d\xe3\xac\x41\x13\x4a\xe0\xf8\x95\xf5\x8b\x64\xb6\x0e\x0d\xd5\x6a\x16\x12\xde\x7e\x9f\xb0\x76\x58\x82\x32\x33\x2f\x78\x6d\x44\x83\x3d\x6c\xfc\x26\x27\x64\x34\xf4\x40\x19\x55\x66\x44\x0e\x65\xbc\x84\xb4\x26\x08\x65\x38\xf1\xb8\xca\xe2\x2d\x1a\xc1\x99\x27\xdc\x0c\x8a\xa9\x32\xc5\x54\x50\xdd\xad\x33\xd9\x7d\x7c\x48\xbf\x00\xdf\x7f\xb7\xeb\xc2\x8c\x60\x80\x0c\x5b\x0b\x4e\x39\x9c\x09\xa5\x47\xbd\x2b\xa8\x19\x13\x68\x43\x8d\x1e\x9c\xb7\x12\x89\x40\x11\x68\x45\x01\x8d\x32\x73\xb0\x06\x78\x13\xa4\x51\x19\xa1\x5f\xb2\x1b\x59\xb9\xc0\xf0\x33\xac\x84\x0a\xd0\x9a\xa0\x34\xf0\x07\xbe\x57\x81\x3a\xd4\xe0\x85\x83\xc3\x85\xd2\x1a\x7e\xf8\xf1\x1f\x3b\x25\xc8\xdc\x4f\x67\xc9\x05\x8e\x0e\xe1\xaf\x3f\x6e\x2e\x3a\xcf\x55\xad\x34\xb2\x7f\x8b\x67\x50\xd9\xce\x08\xf1\x52\x45\x4b\xbe\xa0\x5a\x78\x2c\x22\x4b\x4b\x5a\xa9\x20\xeb\x82\xb8\x7c\x2e\x50\xc1\x54\x66\x32\x68\x20\xae\x7c\x4b\x70\xf0\xa2\xa8\x70\x59\x98\x56\xeb\xb3\x78\x5f\x33\x40\x01\xa0\xac\x2d\x3c\x59\x09\x1f\xf3\x29\xe1\xe5\xc3\x6c\x65\xeb\x3d\x17\x50\xaf\x81\x79\x16\xf3\x98\xf6\xd5\xab\xc9\x26\xc3\xb8\x38\x21\xc8\xf3\xfc\x09\x1c\xbf\x38\x18\x6f\x01\x93\x46\x74\x70\x02\x07\xc9\x71\xd8\x60\x29\xe1\x96\xd7\xd4\xa3\x58\x0c\xeb\x99\xea\x3e\x2b\xd6\xcc\x7d\x15\xb4\x68\x8d\xac\xe3\xa9\x9d\x69\xc6\xeb\x28\x69\x78\xd7\x32\x69\x77\x5b\x78\x5f\x4c\x8c\x75\xdb\x24\x24\xee\x3b\xc3\xc7\xed\x3a\xa5\x03\x26\xe7\x7f\x6e\x55\xe5\xcb\xb9\xf7\xac\xab\xcc\xd8\x2c\x9a\x3a\xb7\x8a\x2d\xb4\x66\xf9\x34\x99\xaa\x9e\x7b\x16\xae\x6d\xee\x13\xbd\x41\x0a\x5e\xc9\x90\x44\x65\xda\x86\x3b\x13\xec\x0c\x5c\xa8\x99\xa6\x8a\x60\x07\x48\xb2\x8d\xbb\x16\x82\x05\xcf\x1d\x2d\x31\x46\x0d\x50\xa2\xb1\xac\xbe\x18\x7d\x33\x99\x44\x09\xb6\xc4\xbe\x4c\x59\x6d\x29\x10\x30\x46\x1d\xeb\xb9\xe6\xfe\xf1\x48\x43\x58\x1d\x82\xa3\xb2\x28\xa6\xed\xfc\x5f\x56\xa8\xc8\x19\xba\x16\x21\xe7\x2e\xe3\x9c\xed\xea\x96\x37\x72\x39\x57\xbf\xf2\xed\xc7\x27\xa7\xe3\x5f\x4e\x9f\x7d\x6d\xec\xf1\xe9\xb3\xd3\xd1\xa0\xe8\xd7\xaf\xe1\xad\x89\xaa\x7b\x0b\xd9\x3c\xc0\xf8\x18\xde\xbc\x79\x20\xd6\x4d\xfe\x91\xdd\xc4\x6b\xea\xb1\xd8\xbd\x57\x5c\x87\xdb\xe5\x24\x11\x03\x39\x24\x09\xdf\xf2\xa0\x98\xa9\x79\x69\x32\x8f\x4b\xa1\x15\x0f\x44\xeb\xb3\x8e\xc9\xe7\x4f\xbf\x19\xb5\xe6\xda\xf1\x14\x1d\x10\xc7\xbd\x7e\x06\x11\x7f\x95\x50\xaa\x69\x3f\x49\xf6\x08\x65\x83\xbb\x3b\x16\xfa\x46\x3b\xdb\x34\x4d\xa2\xb3\x11\x73\x9e\x9f\x77\x77\x90\xff\x96\xae\x9b\x9f\x47\x0b\xe5\x97\xb6\x42\xf8\xc0\xa2\xb6\x01\xe1\xe3\x46\xe8\xdd\xf0\xbd\xbf\x60\xb2\xb2\x26\x6c\xeb\x79\x04\x94\xdd\xa1\x5a\x35\x3c\xc2\xca\x81\x36\xe9\xda\x12\x8e\x8f\x8e\x9a\xc1\xd2\x60\x63\xfd\xba\x84\xa7\x47\x47\x17\x3d\x05\x1e\xdf\xb5\xac\xe9\x4f\xe3\xc6\x7b\xc2\xc6\x43\x18\x21\x8f\x1c\x15\xd6\x7c\xf7\x80\xef\x43\x1f\xeb\xbc\x5a\x72\xe2\x73\xe4\x87\x29\x26\xdf\x1f\xd1\x9a\x97\xf4\x37\x73\x56\x76\x1d\xbc\xb4\xba\x6d\xf0\x22\xca\x9f\xfa\x57\x21\x35\xc3\xb5\x08\x75\x09\x85\x56\xd3\xa2\xb1\xf1\x09\xec\x65\xbf\xa1\x20\x36\x46\xb6\xbb\x11\x2b\x7b\x65\xf4\x7a\xeb\xc0\x5d\x2c\x3e\xbc\xf8\x94\xba\x1d\x3c\x76\xc8\xfa\xf7\x72\x37\x74\x29\xfc\xb7\x84\xb3\x36\x1e\xba\xdf\x1b\xff\xf7\xe6\x18\xe4\xe7\x8f\xde\x08\x3d\xdb\xf5\x89\x3b\x97\x9b\x77\x7c\x40\x8e\xb6\xeb\xf3\xdf\x87\x35\xd7\xc9\xa6\xf2\x69\x41\x74\x99\x00\x3b\x21\x1b\x96\x5f\xd6\xff\xc3\x18\xf5\x95\xea\xde\xf1\x04\x13\xef\xd6\x97\x7b\x7f\xb5\xf6\xd6\xea\xd1\xe8\x7d\x04\xef\xa5\xf7\x51\x84\x9e\xd2\x07\x2c\x3f\x1a\x91\x98\xf5\x8a\x1f\xca\xcf\x1d\xbd\x87\xde\xff\x02\x00\x00\xff\xff\x41\x1c\xe0\x81\xd0\x09\x00\x00")

func workerEtcOriginNodePodsOvsYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsOvsYaml,
		"worker/etc/origin/node/pods/ovs.yaml",
	)
}

func workerEtcOriginNodePodsOvsYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsOvsYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/ovs.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodePodsSdnYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x56\x6d\x4f\xe3\x46\x10\xfe\x9e\x5f\x31\xa5\xa7\xa3\xad\x6a\x1b\x90\xa8\x2a\xa3\x3b\x89\x42\x7a\x8d\x04\x01\xdd\xc1\xa9\xd2\xe9\x84\x36\xf6\x24\xde\x66\xbd\xeb\xdb\x5d\x07\x52\xb8\xff\xde\xd9\xf5\x4b\x12\x8c\x03\xf4\x0b\xec\xce\xcb\x33\x2f\x3b\xcf\xc4\xac\xe0\x9f\x51\x1b\xae\x64\x0c\x8b\xfd\xc1\x9c\xcb\x34\x86\x4b\x95\x0e\x72\xb4\x2c\x65\x96\xc5\x03\x00\x26\xa5\xb2\xcc\x92\x91\x71\x57\x00\x93\x64\x98\x96\x02\x75\xc8\x44\x91\xb1\x70\x5e\x4e\x50\x4b\xb4\x68\x42\xae\xa2\x44\x73\xcb\x13\x26\x82\x42\x11\xd8\xce\x0e\xb9\x08\x36\x41\x51\x3b\xb3\xa2\x88\xc1\xa4\xd2\x5f\x12\x95\x17\x4a\xa2\xb4\x31\x90\xff\xad\xd2\x73\x2f\x56\x05\x4a\x93\xf1\xa9\xf5\x78\x4f\xdb\xd8\x65\x81\x31\x70\x39\xd5\x8c\xee\x92\xe5\xd8\xc0\xba\xb3\x29\x58\x42\x82\x16\x28\x70\x2a\x53\x60\xe2\x92\x48\x94\xb4\x8c\x4b\x2a\xdc\xdd\x02\x97\x45\xce\xa8\x72\x8f\x1b\x40\x34\xe1\x32\x9a\x30\x93\xd5\xf7\x20\xa9\x0f\x0f\xfe\x3f\xc0\x8f\x3f\x6c\x9a\x50\x47\xd0\x42\x80\xa5\x82\x82\x17\x38\x65\x5c\x0c\x1a\x53\xe0\x53\x6a\xa0\xb2\x19\x6a\x28\xb4\x4a\xd0\x18\xe0\x06\x04\x37\x16\x25\x97\x33\x50\x12\x48\x09\x89\xe4\x81\x41\xbd\x20\x33\xa3\x92\x39\xda\x5f\xe1\x96\x71\x0b\xa5\xb4\x5c\x00\x1d\xf0\x8e\x5b\x53\xa3\x5a\xcd\x0a\xd8\x9d\x73\x21\xe0\xcd\x4f\xff\xa8\x89\x81\xa0\xf8\xf9\xc8\x9b\xc0\xde\x2e\x5c\x0d\x3f\x9e\xd7\x96\xb7\x19\x17\x48\xf6\x25\x1e\x41\xaa\x6a\x21\xb8\xa4\x30\xc9\x14\xec\xd2\x9b\xd9\x5d\x78\x70\x31\x19\x95\x00\xd7\xe3\xd1\xdf\xc1\xc9\xc5\x78\x3c\x3c\xb9\x8a\xa3\x05\xd3\x91\x2e\x65\xb4\xd1\xc6\x68\x95\x6a\xe8\x52\x85\xf7\x51\x8a\x8b\x48\x96\x42\x1c\xb9\x52\x64\x1b\x05\xaa\x20\x3b\xb7\x4c\xbb\x52\x63\x38\xee\x36\x22\x29\xb5\xa6\xb7\x15\xcb\x6e\x4b\x4e\xc6\xa3\x8d\x5e\x38\xd5\xa1\x81\x30\x0c\x77\xe0\xe0\xfd\xdb\xfd\xb5\x38\x46\x20\x16\x70\x08\x6f\xbd\x61\xab\xa0\xa1\xc3\x35\xab\x89\x46\x36\x6f\xef\x53\x5e\x1f\x53\x9a\xae\xd5\x7b\x5d\xb1\x39\x82\x72\xef\x50\x4f\x1b\x4c\x4b\x99\xf8\xe9\x6f\x12\x93\x2a\x6d\x60\x75\x0e\xc1\xc7\x29\x44\x68\x13\xd7\x97\x88\x7c\xc2\x34\xfa\x7d\x2f\x58\xb5\xac\x86\x09\x69\xea\xa6\xb5\x57\x52\x54\x5e\xaa\xb0\xde\xcb\x4d\xd3\x2f\x10\x65\xca\xd8\x0d\x59\x93\x15\x3d\xd7\x97\x2f\x10\xd4\x71\xcc\xd2\x38\x2c\x3e\x8b\x94\xe6\x33\x2e\x03\x97\x0f\x7c\xfd\xfa\xa8\xfb\x7e\x26\x15\x30\x21\xf0\xae\x50\x7a\xd5\x15\xa3\x4a\x9d\xe0\x16\xac\x41\xdb\xa0\xfa\x84\x77\x98\xac\xb8\x04\xc6\x32\x6d\xdb\xf6\x04\x41\x85\xf0\xce\x03\x56\x30\x91\x83\xf1\x7f\x6a\x65\xb8\x64\xb9\x20\x53\xb7\x2a\xfa\xcc\x69\xb6\xc2\x95\x9e\x8c\x85\x9a\x09\x5c\xa0\x78\xf7\xe6\xfe\x74\xf8\xc7\xf5\x87\x9b\xb3\x8b\x0f\x67\xc3\xcf\xc3\xb3\x38\x38\xf8\xee\x53\x43\xb9\x68\x58\x5b\x6d\x80\x8b\xcb\xe1\xf8\xd3\x5f\xa3\x3f\xaf\x6e\x4e\xc7\x9f\x6e\x4e\x2f\xce\x8f\x47\xe3\xba\x88\x05\x13\x25\x59\x24\xa2\xa4\x39\xd3\xa1\xa0\x89\x17\x5e\xc5\x73\x36\x23\xc5\xfd\x3d\x84\x27\x55\xb2\x23\x27\x31\xe1\xd8\xf5\xf5\x01\xbe\x95\xca\x22\x7c\xaf\x22\xae\x2f\x1a\x00\xd7\x57\xd3\x64\xd0\xae\x95\x4b\x92\xc6\xb0\xbf\x77\x70\xf8\x5b\x1d\xdb\xbd\x6c\x57\x5a\x61\x65\xc8\x84\xcd\xfe\xf5\x32\x8d\xd5\xe3\xd4\x98\x4e\xf0\xad\x24\x8a\xb6\x77\x37\x3b\xa5\x43\xc9\x5b\x41\x8e\xb9\xd2\x4b\x27\xdb\x3b\xaf\x46\xda\x20\xb1\x8a\xdb\x25\x55\x63\xf1\xce\x36\xbe\x85\xe6\x0b\xda\x06\x33\xa4\xb5\xec\x36\x42\x13\xa2\x94\xc7\xe6\x9a\x08\x1d\xc3\x9e\x17\x2d\x94\x28\x73\x3c\x57\xb4\x7a\xda\xda\x72\x77\xbb\x64\x36\x8b\xa1\xf3\x6e\x9b\xd5\x50\xa5\xf5\x9b\xb7\x25\xb0\xf4\x42\x8a\xe5\x5a\xd0\x2e\xde\xb6\x39\x5c\x03\x6e\xcd\xd6\xf5\xcf\x06\xa8\xd7\x58\x17\x8e\x14\x41\xa3\x78\xd2\x25\x4a\x27\xa5\x79\xa2\xc0\xda\x31\x70\xea\x57\x66\xe1\x97\xe9\xc2\xdc\x72\x9b\x64\x5b\x90\xd5\xe2\xd5\xc0\xab\x9f\xe1\x2d\xb8\x2b\xa3\xff\x93\xf7\xea\xb7\xb4\x3f\xf1\x8e\xd9\x26\xdc\xe3\x25\xd7\x45\x22\x65\xe0\x7e\x63\x1a\x65\x77\x5a\xda\x4d\xdb\x75\x26\xb5\x77\x26\x75\xda\x53\x8c\xe0\x93\x06\xc1\x2d\x30\xf3\x92\xca\xc8\xa7\x81\xf5\x3e\x9d\x32\x9d\xe5\xb8\x52\xb6\x9d\xf4\xac\x1f\x9d\xb6\x77\x22\xa0\xf2\xbc\x14\xcc\x98\x71\xb5\x48\x96\xb4\x8c\xf2\xa0\xda\x94\xf5\x87\xd3\xa0\xa1\x60\xfd\x79\xe2\x61\x5c\xfa\x0d\x8f\x9f\xa4\xe1\xa0\x8f\x83\x5b\x01\xfa\x79\xb7\x8d\x75\xbd\x90\xae\xb5\xb9\x72\xdf\x86\xe6\x31\xc8\x4a\xdc\xeb\xbd\xce\xd3\x27\x59\xfa\x9c\x67\xd4\xf2\xb1\x9f\xab\xcf\x62\xac\xf1\xb3\x0f\xaa\x22\xe7\xb3\x48\x8f\xb8\xf6\x1c\x1b\x5f\x94\xd9\xe6\x9c\xbe\x80\x7f\xbd\xa8\x8f\x39\xd8\xcb\xc0\xad\x03\xb4\x49\xc5\x7e\x22\x6e\x2d\xee\x05\x8c\x7c\x1d\x1f\xff\x0b\x00\x00\xff\xff\x7b\x9a\x32\x52\xd8\x0c\x00\x00")

func workerEtcOriginNodePodsSdnYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodePodsSdnYaml,
		"worker/etc/origin/node/pods/sdn.yaml",
	)
}

func workerEtcOriginNodePodsSdnYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodePodsSdnYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/pods/sdn.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeResolvConf = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\x4b\xcc\x4d\x2d\x4e\x2d\x2a\x4b\x2d\x52\x30\x34\xb3\xd0\x33\x33\xd6\x33\x34\xb2\xd4\x33\x34\xe3\x02\x04\x00\x00\xff\xff\x77\xaa\x94\x8c\x19\x00\x00\x00")

func workerEtcOriginNodeResolvConfBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeResolvConf,
		"worker/etc/origin/node/resolv.conf",
	)
}

func workerEtcOriginNodeResolvConf() (*asset, error) {
	bytes, err := workerEtcOriginNodeResolvConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/resolv.conf", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeSdnKubeconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x88\x4c\xcc\xcd\xf1\x4d\x2c\x2a\xce\x48\xcc\x51\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x0b\x76\xf1\xf3\x2e\x4d\x4a\x4d\x06\xf3\x14\x6a\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x6a\x6b\xb9\x00\x01\x00\x00\xff\xff\xe4\xe3\x64\x6b\x31\x00\x00\x00")

func workerEtcOriginNodeSdnKubeconfigBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeSdnKubeconfig,
		"worker/etc/origin/node/sdn.kubeconfig",
	)
}

func workerEtcOriginNodeSdnKubeconfig() (*asset, error) {
	bytes, err := workerEtcOriginNodeSdnKubeconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/sdn.kubeconfig", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcOriginNodeVolumeConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x1c\xca\xb1\x0a\xc2\x40\x0c\x06\xe0\xfd\x9e\x22\x4f\x70\xd2\x35\xab\x60\x67\x11\xba\x9f\x35\xd5\xd0\x98\x3f\x5c\x2f\x3e\xbf\xd0\xfd\x6b\xa1\x8b\xf4\x43\xe1\x4c\x7b\x3e\xc5\x64\xd4\x15\xbe\xe9\xbb\x22\xc4\x8f\x8f\x6e\xa3\x2a\x2e\xbf\xa9\xec\xea\x2f\xa6\x05\x96\x5f\xb9\x9e\xa4\x18\xd6\x66\xf7\xc4\x68\x5c\x88\x42\xfa\xed\x31\x77\x64\x30\x4d\xb3\x96\x7f\x00\x00\x00\xff\xff\xc3\x01\xb7\xa5\x5c\x00\x00\x00")

func workerEtcOriginNodeVolumeConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcOriginNodeVolumeConfigYaml,
		"worker/etc/origin/node/volume-config.yaml",
	)
}

func workerEtcOriginNodeVolumeConfigYaml() (*asset, error) {
	bytes, err := workerEtcOriginNodeVolumeConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/origin/node/volume-config.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\x70\x4e\x2d\x2a\x71\x2c\x76\xaa\x2c\x49\x2d\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\x03\x89\x65\xa6\x65\x26\x27\x02\x05\xf5\x9c\x13\xc1\x7c\x85\x1a\x85\xe0\x92\xa2\xcc\xbc\x74\x85\xda\x5a\x2e\x40\x00\x00\x00\xff\xff\x76\x0b\x3f\xe4\x38\x00\x00\x00")

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
		"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt",
	)
}

func workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt() (*asset, error) {
	bytes, err := workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerEtcSysconfigAtomicOpenshiftNode = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x1c\xcc\xb1\xae\x82\x30\x14\x80\xe1\xbd\x4f\xc1\x13\xb4\x21\x77\xee\x70\x81\x63\x43\xac\xd4\x88\xb0\x12\xc1\x43\xd3\xa8\x3d\xa4\x56\x16\xc2\xbb\xdb\x38\xfd\xd3\xff\x99\xf3\xb5\x36\x4d\x2b\x59\x05\x45\xa7\x06\x6d\x94\x86\x1e\xb4\xdc\xb6\xac\xc2\x80\x73\xc6\x4b\xf2\xb3\xb3\x29\xaf\x85\x3c\xfa\xa8\xc9\x6a\x5c\xf1\xc9\x1b\xba\x63\xb6\xef\xac\x3e\xfd\x2b\x18\x7a\xb8\xb4\x49\x92\xeb\x1f\xcf\x73\x76\xec\x0a\x28\x4d\x73\xa8\x95\x14\x18\x27\x41\xc1\x59\xe7\x85\x4f\x8b\x18\x89\xe2\x3b\x86\xdb\xc2\x1f\x9f\x11\xa7\x1f\xcf\xbe\x01\x00\x00\xff\xff\x86\x4c\x17\x6e\x88\x00\x00\x00")

func workerEtcSysconfigAtomicOpenshiftNodeBytes() ([]byte, error) {
	return bindataRead(
		_workerEtcSysconfigAtomicOpenshiftNode,
		"worker/etc/sysconfig/atomic-openshift-node",
	)
}

func workerEtcSysconfigAtomicOpenshiftNode() (*asset, error) {
	bytes, err := workerEtcSysconfigAtomicOpenshiftNodeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/etc/sysconfig/atomic-openshift-node", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _workerVarLibOriginDockerConfigJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x56\xd0\x73\xce\xcf\x4b\xcb\x4c\xd7\xf3\xcc\x4d\x4c\x4f\x2d\x86\x50\x01\xa5\x39\x39\xc1\xa9\xc9\x45\xa9\x25\x0a\x35\x0a\xc1\x25\x45\x99\x79\xe9\x0a\xb5\xb5\x5c\x80\x00\x00\x00\xff\xff\x02\xd2\xee\x96\x2e\x00\x00\x00")

func workerVarLibOriginDockerConfigJsonBytes() ([]byte, error) {
	return bindataRead(
		_workerVarLibOriginDockerConfigJson,
		"worker/var/lib/origin/.docker/config.json",
	)
}

func workerVarLibOriginDockerConfigJson() (*asset, error) {
	bytes, err := workerVarLibOriginDockerConfigJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "worker/var/lib/origin/.docker/config.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"common/etc/default/mdsd":                                 commonEtcDefaultMdsd,
	"common/etc/fluentd/fluent.conf":                          commonEtcFluentdFluentConf,
	"common/etc/mdsd.d/mdsd.xml":                              commonEtcMdsdDMdsdXml,
	"common/etc/mdsd.d/secret/gcscert.pem":                    commonEtcMdsdDSecretGcscertPem,
	"common/etc/mdsd.d/secret/gcskey.pem":                     commonEtcMdsdDSecretGcskeyPem,
	"master/etc/etcd/ca.crt":                                  masterEtcEtcdCaCrt,
	"master/etc/etcd/etcd.conf":                               masterEtcEtcdEtcdConf,
	"master/etc/etcd/peer.crt":                                masterEtcEtcdPeerCrt,
	"master/etc/etcd/peer.key":                                masterEtcEtcdPeerKey,
	"master/etc/etcd/server.crt":                              masterEtcEtcdServerCrt,
	"master/etc/etcd/server.key":                              masterEtcEtcdServerKey,
	"master/etc/origin/cloudprovider/azure.conf":              masterEtcOriginCloudproviderAzureConf,
	"master/etc/origin/master/admin.crt":                      masterEtcOriginMasterAdminCrt,
	"master/etc/origin/master/admin.key":                      masterEtcOriginMasterAdminKey,
	"master/etc/origin/master/admin.kubeconfig":               masterEtcOriginMasterAdminKubeconfig,
	"master/etc/origin/master/aggregator-front-proxy.crt":     masterEtcOriginMasterAggregatorFrontProxyCrt,
	"master/etc/origin/master/aggregator-front-proxy.key":     masterEtcOriginMasterAggregatorFrontProxyKey,
	"master/etc/origin/master/ca-bundle.crt":                  masterEtcOriginMasterCaBundleCrt,
	"master/etc/origin/master/ca.crt":                         masterEtcOriginMasterCaCrt,
	"master/etc/origin/master/ca.key":                         masterEtcOriginMasterCaKey,
	"master/etc/origin/master/client.secret":                  masterEtcOriginMasterClientSecret,
	"master/etc/origin/master/front-proxy-ca.crt":             masterEtcOriginMasterFrontProxyCaCrt,
	"master/etc/origin/master/master-config.yaml":             masterEtcOriginMasterMasterConfigYaml,
	"master/etc/origin/master/master.etcd-ca.crt":             masterEtcOriginMasterMasterEtcdCaCrt,
	"master/etc/origin/master/master.etcd-client.crt":         masterEtcOriginMasterMasterEtcdClientCrt,
	"master/etc/origin/master/master.etcd-client.key":         masterEtcOriginMasterMasterEtcdClientKey,
	"master/etc/origin/master/master.kubelet-client.crt":      masterEtcOriginMasterMasterKubeletClientCrt,
	"master/etc/origin/master/master.kubelet-client.key":      masterEtcOriginMasterMasterKubeletClientKey,
	"master/etc/origin/master/master.proxy-client.crt":        masterEtcOriginMasterMasterProxyClientCrt,
	"master/etc/origin/master/master.proxy-client.key":        masterEtcOriginMasterMasterProxyClientKey,
	"master/etc/origin/master/master.server.crt":              masterEtcOriginMasterMasterServerCrt,
	"master/etc/origin/master/master.server.key":              masterEtcOriginMasterMasterServerKey,
	"master/etc/origin/master/named/console.crt":              masterEtcOriginMasterNamedConsoleCrt,
	"master/etc/origin/master/named/console.key":              masterEtcOriginMasterNamedConsoleKey,
	"master/etc/origin/master/openshift-master.kubeconfig":    masterEtcOriginMasterOpenshiftMasterKubeconfig,
	"master/etc/origin/master/scheduler.json":                 masterEtcOriginMasterSchedulerJson,
	"master/etc/origin/master/service-signer.crt":             masterEtcOriginMasterServiceSignerCrt,
	"master/etc/origin/master/service-signer.key":             masterEtcOriginMasterServiceSignerKey,
	"master/etc/origin/master/serviceaccounts.private.key":    masterEtcOriginMasterServiceaccountsPrivateKey,
	"master/etc/origin/master/serviceaccounts.public.key":     masterEtcOriginMasterServiceaccountsPublicKey,
	"master/etc/origin/master/session-secrets.yaml":           masterEtcOriginMasterSessionSecretsYaml,
	"master/etc/origin/node/ca.crt":                           masterEtcOriginNodeCaCrt,
	"master/etc/origin/node/client-ca.crt":                    masterEtcOriginNodeClientCaCrt,
	"master/etc/origin/node/node-config.yaml":                 masterEtcOriginNodeNodeConfigYaml,
	"master/etc/origin/node/node.kubeconfig":                  masterEtcOriginNodeNodeKubeconfig,
	"master/etc/origin/node/pods/apiserver.yaml":              masterEtcOriginNodePodsApiserverYaml,
	"master/etc/origin/node/pods/controllers.yaml":            masterEtcOriginNodePodsControllersYaml,
	"master/etc/origin/node/pods/etcd.yaml":                   masterEtcOriginNodePodsEtcdYaml,
	"master/etc/origin/node/pods/ovs.yaml":                    masterEtcOriginNodePodsOvsYaml,
	"master/etc/origin/node/pods/sdn.yaml":                    masterEtcOriginNodePodsSdnYaml,
	"master/etc/origin/node/resolv.conf":                      masterEtcOriginNodeResolvConf,
	"master/etc/origin/node/sdn.kubeconfig":                   masterEtcOriginNodeSdnKubeconfig,
	"master/etc/pki/ca-trust/source/anchors/openshift-ca.crt": masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"master/etc/sysconfig/atomic-openshift-node":              masterEtcSysconfigAtomicOpenshiftNode,
	"master/root/.kube/config":                                masterRootKubeConfig,
	"master/var/lib/origin/.docker/config.json":               masterVarLibOriginDockerConfigJson,
	"worker/etc/origin/cloudprovider/azure.conf":              workerEtcOriginCloudproviderAzureConf,
	"worker/etc/origin/node/bootstrap.kubeconfig":             workerEtcOriginNodeBootstrapKubeconfig,
	"worker/etc/origin/node/ca.crt":                           workerEtcOriginNodeCaCrt,
	"worker/etc/origin/node/node-bootstrapper.crt":            workerEtcOriginNodeNodeBootstrapperCrt,
	"worker/etc/origin/node/node-bootstrapper.key":            workerEtcOriginNodeNodeBootstrapperKey,
	"worker/etc/origin/node/node-config.yaml":                 workerEtcOriginNodeNodeConfigYaml,
	"worker/etc/origin/node/pods/ovs.yaml":                    workerEtcOriginNodePodsOvsYaml,
	"worker/etc/origin/node/pods/sdn.yaml":                    workerEtcOriginNodePodsSdnYaml,
	"worker/etc/origin/node/resolv.conf":                      workerEtcOriginNodeResolvConf,
	"worker/etc/origin/node/sdn.kubeconfig":                   workerEtcOriginNodeSdnKubeconfig,
	"worker/etc/origin/node/volume-config.yaml":               workerEtcOriginNodeVolumeConfigYaml,
	"worker/etc/pki/ca-trust/source/anchors/openshift-ca.crt": workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt,
	"worker/etc/sysconfig/atomic-openshift-node":              workerEtcSysconfigAtomicOpenshiftNode,
	"worker/var/lib/origin/.docker/config.json":               workerVarLibOriginDockerConfigJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"common": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"default": {nil, map[string]*bintree{
				"mdsd": {commonEtcDefaultMdsd, map[string]*bintree{}},
			}},
			"fluentd": {nil, map[string]*bintree{
				"fluent.conf": {commonEtcFluentdFluentConf, map[string]*bintree{}},
			}},
			"mdsd.d": {nil, map[string]*bintree{
				"mdsd.xml": {commonEtcMdsdDMdsdXml, map[string]*bintree{}},
				"secret": {nil, map[string]*bintree{
					"gcscert.pem": {commonEtcMdsdDSecretGcscertPem, map[string]*bintree{}},
					"gcskey.pem":  {commonEtcMdsdDSecretGcskeyPem, map[string]*bintree{}},
				}},
			}},
		}},
	}},
	"master": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"etcd": {nil, map[string]*bintree{
				"ca.crt":     {masterEtcEtcdCaCrt, map[string]*bintree{}},
				"etcd.conf":  {masterEtcEtcdEtcdConf, map[string]*bintree{}},
				"peer.crt":   {masterEtcEtcdPeerCrt, map[string]*bintree{}},
				"peer.key":   {masterEtcEtcdPeerKey, map[string]*bintree{}},
				"server.crt": {masterEtcEtcdServerCrt, map[string]*bintree{}},
				"server.key": {masterEtcEtcdServerKey, map[string]*bintree{}},
			}},
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {masterEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"master": {nil, map[string]*bintree{
					"admin.crt":                  {masterEtcOriginMasterAdminCrt, map[string]*bintree{}},
					"admin.key":                  {masterEtcOriginMasterAdminKey, map[string]*bintree{}},
					"admin.kubeconfig":           {masterEtcOriginMasterAdminKubeconfig, map[string]*bintree{}},
					"aggregator-front-proxy.crt": {masterEtcOriginMasterAggregatorFrontProxyCrt, map[string]*bintree{}},
					"aggregator-front-proxy.key": {masterEtcOriginMasterAggregatorFrontProxyKey, map[string]*bintree{}},
					"ca-bundle.crt":              {masterEtcOriginMasterCaBundleCrt, map[string]*bintree{}},
					"ca.crt":                     {masterEtcOriginMasterCaCrt, map[string]*bintree{}},
					"ca.key":                     {masterEtcOriginMasterCaKey, map[string]*bintree{}},
					"client.secret":              {masterEtcOriginMasterClientSecret, map[string]*bintree{}},
					"front-proxy-ca.crt":         {masterEtcOriginMasterFrontProxyCaCrt, map[string]*bintree{}},
					"master-config.yaml":         {masterEtcOriginMasterMasterConfigYaml, map[string]*bintree{}},
					"master.etcd-ca.crt":         {masterEtcOriginMasterMasterEtcdCaCrt, map[string]*bintree{}},
					"master.etcd-client.crt":     {masterEtcOriginMasterMasterEtcdClientCrt, map[string]*bintree{}},
					"master.etcd-client.key":     {masterEtcOriginMasterMasterEtcdClientKey, map[string]*bintree{}},
					"master.kubelet-client.crt":  {masterEtcOriginMasterMasterKubeletClientCrt, map[string]*bintree{}},
					"master.kubelet-client.key":  {masterEtcOriginMasterMasterKubeletClientKey, map[string]*bintree{}},
					"master.proxy-client.crt":    {masterEtcOriginMasterMasterProxyClientCrt, map[string]*bintree{}},
					"master.proxy-client.key":    {masterEtcOriginMasterMasterProxyClientKey, map[string]*bintree{}},
					"master.server.crt":          {masterEtcOriginMasterMasterServerCrt, map[string]*bintree{}},
					"master.server.key":          {masterEtcOriginMasterMasterServerKey, map[string]*bintree{}},
					"named": {nil, map[string]*bintree{
						"console.crt": {masterEtcOriginMasterNamedConsoleCrt, map[string]*bintree{}},
						"console.key": {masterEtcOriginMasterNamedConsoleKey, map[string]*bintree{}},
					}},
					"openshift-master.kubeconfig": {masterEtcOriginMasterOpenshiftMasterKubeconfig, map[string]*bintree{}},
					"scheduler.json":              {masterEtcOriginMasterSchedulerJson, map[string]*bintree{}},
					"service-signer.crt":          {masterEtcOriginMasterServiceSignerCrt, map[string]*bintree{}},
					"service-signer.key":          {masterEtcOriginMasterServiceSignerKey, map[string]*bintree{}},
					"serviceaccounts.private.key": {masterEtcOriginMasterServiceaccountsPrivateKey, map[string]*bintree{}},
					"serviceaccounts.public.key":  {masterEtcOriginMasterServiceaccountsPublicKey, map[string]*bintree{}},
					"session-secrets.yaml":        {masterEtcOriginMasterSessionSecretsYaml, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"ca.crt":           {masterEtcOriginNodeCaCrt, map[string]*bintree{}},
					"client-ca.crt":    {masterEtcOriginNodeClientCaCrt, map[string]*bintree{}},
					"node-config.yaml": {masterEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"node.kubeconfig":  {masterEtcOriginNodeNodeKubeconfig, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"apiserver.yaml":   {masterEtcOriginNodePodsApiserverYaml, map[string]*bintree{}},
						"controllers.yaml": {masterEtcOriginNodePodsControllersYaml, map[string]*bintree{}},
						"etcd.yaml":        {masterEtcOriginNodePodsEtcdYaml, map[string]*bintree{}},
						"ovs.yaml":         {masterEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml":         {masterEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":    {masterEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig": {masterEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {masterEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {masterEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"root": {nil, map[string]*bintree{
			".kube": {nil, map[string]*bintree{
				"config": {masterRootKubeConfig, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {masterVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
	"worker": {nil, map[string]*bintree{
		"etc": {nil, map[string]*bintree{
			"origin": {nil, map[string]*bintree{
				"cloudprovider": {nil, map[string]*bintree{
					"azure.conf": {workerEtcOriginCloudproviderAzureConf, map[string]*bintree{}},
				}},
				"node": {nil, map[string]*bintree{
					"bootstrap.kubeconfig":  {workerEtcOriginNodeBootstrapKubeconfig, map[string]*bintree{}},
					"ca.crt":                {workerEtcOriginNodeCaCrt, map[string]*bintree{}},
					"node-bootstrapper.crt": {workerEtcOriginNodeNodeBootstrapperCrt, map[string]*bintree{}},
					"node-bootstrapper.key": {workerEtcOriginNodeNodeBootstrapperKey, map[string]*bintree{}},
					"node-config.yaml":      {workerEtcOriginNodeNodeConfigYaml, map[string]*bintree{}},
					"pods": {nil, map[string]*bintree{
						"ovs.yaml": {workerEtcOriginNodePodsOvsYaml, map[string]*bintree{}},
						"sdn.yaml": {workerEtcOriginNodePodsSdnYaml, map[string]*bintree{}},
					}},
					"resolv.conf":        {workerEtcOriginNodeResolvConf, map[string]*bintree{}},
					"sdn.kubeconfig":     {workerEtcOriginNodeSdnKubeconfig, map[string]*bintree{}},
					"volume-config.yaml": {workerEtcOriginNodeVolumeConfigYaml, map[string]*bintree{}},
				}},
			}},
			"pki": {nil, map[string]*bintree{
				"ca-trust": {nil, map[string]*bintree{
					"source": {nil, map[string]*bintree{
						"anchors": {nil, map[string]*bintree{
							"openshift-ca.crt": {workerEtcPkiCaTrustSourceAnchorsOpenshiftCaCrt, map[string]*bintree{}},
						}},
					}},
				}},
			}},
			"sysconfig": {nil, map[string]*bintree{
				"atomic-openshift-node": {workerEtcSysconfigAtomicOpenshiftNode, map[string]*bintree{}},
			}},
		}},
		"var": {nil, map[string]*bintree{
			"lib": {nil, map[string]*bintree{
				"origin": {nil, map[string]*bintree{
					".docker": {nil, map[string]*bintree{
						"config.json": {workerVarLibOriginDockerConfigJson, map[string]*bintree{}},
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

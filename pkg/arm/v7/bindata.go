// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\x5b\x73\xdb\xb6\xf2\x7f\x2e\x3f\xc5\x96\x72\x73\x6b\x40\xda\x69\x3b\xe9\xa8\x55\x66\x1c\x47\xc9\x3f\xff\xb8\xb1\x8e\x9c\x4c\xe7\x4c\x9a\xc9\x40\xc4\x92\x42\x04\x02\x2c\x00\xca\x56\x1d\x7d\xf7\x33\x0b\x52\x77\xd9\x4e\x4e\x4e\x5f\x9a\x07\xc7\x04\x16\xbb\x8b\xbd\xfc\x76\x17\xee\x7c\x9b\x8e\xa4\x4e\x47\xdc\x8d\x81\xe1\x65\x14\x75\xe0\xb9\xb1\xe0\xd1\x79\xa9\x8b\x2e\x28\x53\x00\xd7\x02\x84\x35\x15\x70\xa5\xc0\x5b\x9e\xe7\x32\x03\x3f\xe6\x1e\x2e\x4c\xad\x04\x58\x53\x7b\x84\xa9\xe4\xe0\xc7\x08\x25\x77\x1e\x2d\xf4\x4f\x9f\x46\x1d\x18\xf6\xcf\xcf\xde\x0e\x4f\xfa\x2f\x86\x67\x6f\x07\xbd\x78\x66\x6a\xcb\x2c\x3a\x53\xdb\x0c\x59\x61\x4d\x5d\xc5\x51\x07\xce\xce\x3f\x3c\xff\xd7\xb3\xd7\xbd\xd8\x54\xa8\xdd\x58\xe6\x3e\x39\xd8\x38\x99\x18\xc7\x05\x4e\x93\x4c\x99\x5a\xc4\x51\x27\xea\x80\xac\x3c\x1f\x29\x74\xc0\x5e\xc2\xcb\xd7\x83\xb7\x6f\x80\x39\x38\xb8\x27\x64\x01\xdf\xbb\xb1\xb1\x1e\xe2\x83\x96\x6f\x0c\x9f\xc0\x73\xa9\x80\x1d\xdd\x07\xf6\x11\x4e\xcf\x5e\x00\x63\xca\x14\xac\xb2\x98\xcb\x4b\x88\x5f\xbd\x7d\xda\x07\x22\x85\x67\xc3\xb3\x41\x37\xfe\x3a\xfe\xc4\x23\x8a\xae\xae\x40\xe6\x90\x9c\x18\x9d\xcb\x22\x39\xc7\xac\xb6\xd2\xcf\x06\xdc\x67\xe3\x01\xcf\x26\xbc\x40\x07\xf3\x79\xa4\x4c\x51\xa0\x05\xe6\x5b\xc3\x31\xe7\xb9\xf5\x75\x95\xb8\x31\xc4\x52\x3b\xcf\x95\x92\xba\x00\x8b\x02\xc8\xe4\x99\xd0\x90\x05\x9e\xb5\xe5\x5e\x1a\x0d\x46\xc3\xc1\xbd\xb1\x71\x5e\xf3\x12\xef\xc7\x51\xc6\x3d\x3c\x49\xa7\xdc\xa6\x4a\x8e\xd2\x59\x5d\xa6\x99\x92\xa8\x3d\xcb\xd0\xfa\xa4\xc2\x12\x7e\xfd\xf5\x6e\xff\xec\xf9\x5d\x52\xf1\x04\xad\x3f\x76\x4f\x67\x1e\xdd\x52\x57\x5a\x93\xb9\xcc\xb8\x47\x97\xb4\xba\x0e\xb1\x32\x4e\x7a\x63\x67\x61\x1b\x3e\xc1\xb9\xb7\xa4\xd7\x7c\x1e\xf5\xcf\x9e\x5f\x2f\x74\x82\xb3\x6d\x99\x03\x2b\xa7\xdc\xe3\x2b\x9c\x7d\xa1\xe4\x57\x38\xdb\x11\xdc\x81\x37\x67\xcf\xce\xba\x20\x50\xa1\xc7\x10\x81\xb9\x51\xca\x5c\x10\x8d\xc3\x2c\x98\x88\xe7\x14\x92\x14\xbe\x99\xaa\xc9\xca\x0e\xb8\x45\xb0\xb5\x86\x0b\xe9\xc7\xc0\x61\x5a\x82\x2c\x79\x81\xcd\xf7\x44\x66\x93\xe0\x87\xc4\x62\x65\x60\xc4\x27\x28\x40\xea\xe6\x96\x90\xa2\xcf\xe8\x8a\x61\xd3\x25\x22\xdd\x22\x5f\x5c\xf5\x9d\x1d\xa3\x62\x8f\x99\x43\x3b\x45\xcb\x6c\x55\xba\xf7\x11\x39\xa9\x37\x44\x01\xff\xc7\x3d\xf4\xb5\x47\x5b\x59\xe9\x10\x4e\xa5\xae\x2f\xe1\x31\x9c\x07\x62\xb8\x37\x1c\xfc\xe6\xee\x47\x23\xee\xb0\xb6\xaa\x37\xf6\xbe\x72\xdd\x34\xcd\x84\x4e\x2c\x8a\x31\xf7\x49\x66\xca\x34\x33\xda\xa3\xf6\xa9\x90\xce\xa7\x24\x2d\x6d\x64\xa5\x8f\xd3\xc7\x0d\xa3\xf4\x80\x58\x70\x9b\x8d\x53\xe3\xa2\xa2\x2a\x26\x38\xeb\xe5\x52\x61\x37\x4d\xc3\x3d\xaa\x89\x4c\x6d\x55\xb2\xa2\x2a\xd2\xe1\xe0\x37\xf6\x62\xf0\x82\xbd\xea\xff\x9b\x35\x52\x98\x45\x85\xdc\x61\xe4\x9c\xca\x38\x05\x50\x2f\x9c\xb2\x63\x57\xa6\x19\x4f\x5b\xaa\x1a\x2b\x72\x72\xa0\x0a\x6e\x6f\x28\x6f\x88\xc1\x15\x29\x29\x74\x43\xe0\x44\xa8\x29\x0f\x45\x6f\x86\x2e\xda\x36\x29\x5e\x7a\xcb\xdd\x97\x59\x96\x41\x3f\x9c\xfa\x3b\x4c\xdc\xe8\xf3\x4f\xb4\xb4\x71\xc8\x7e\x48\x8e\x8e\xf6\xd9\xfa\xac\x42\x7d\x4e\xa8\x0d\x27\x46\x7b\x2e\x35\x5a\x18\x28\xee\x73\x63\x4b\xa0\x43\x7f\x4f\x34\x63\x4a\xbc\xff\x19\xc6\xe6\x7f\xd5\x16\x33\x63\xb1\x35\xed\xf2\x7b\xc7\x66\x55\x5b\x3b\x92\x52\x66\xd6\x38\x93\x37\xb6\x9b\xd5\x65\x40\xa3\x74\x75\x72\x5d\x42\x51\x15\xd9\x18\xb3\x49\x4f\x9b\x80\x9a\x9f\x5d\x76\x8e\x87\x67\x84\xa2\xa1\x76\x41\x5d\x09\x42\x66\x78\x77\x75\xd5\xa2\xb0\xfb\x7f\x23\xf5\x2d\x45\x2e\x7e\x08\x31\xcc\xe7\xef\x77\x0a\x55\x6e\x2c\x70\xef\xb1\xac\x3c\x48\x0d\x57\x47\x49\xf2\xd3\xfc\x17\x10\x26\x02\x98\xd5\x25\xb4\x6a\x00\x9b\x01\xfb\x13\xbe\x4c\x66\x10\x09\x77\xee\xc0\xc8\x22\x9f\x44\x00\x37\x5e\xf8\xdd\x42\x8d\x83\xab\xf6\xb7\xf9\xfb\xfd\x57\x6f\x75\x6a\x2a\x6f\xce\xa5\x42\x11\x47\x40\x95\xfe\xdd\xbb\xb5\xd3\xc0\x94\x87\x9f\xe0\xfd\xfb\x5f\xa8\x22\x69\x70\x0a\xb1\x82\xa3\x5f\x00\x95\x43\xc0\x4b\xe9\xe9\x23\x97\x91\x30\x1a\x6f\xf1\x86\xc5\xd2\x4c\xbf\xac\x05\x20\xeb\x65\x0a\xb9\xa6\x9a\x17\xd9\x12\x98\xcd\xe1\xc6\x96\xe0\xa6\x50\xbd\xba\x42\x2d\xe6\xf3\x28\x92\x39\x7c\x0b\x85\xc5\x6a\x45\x2e\x4c\x36\x41\xdb\x94\xc4\xdc\x79\x3e\x6a\x2e\x1c\x01\xb8\x99\xf3\x58\x66\x5e\x81\xf3\xa6\x82\x86\x90\x05\xad\xea\x2a\xf1\xb2\x44\x7b\x2b\x15\xe5\xbf\xcc\xf0\x3a\xba\xb5\xfd\x72\x92\xbb\xe4\x32\x77\xc0\x72\x48\x05\x4e\x09\x44\x26\x4d\x32\xa4\xcb\x86\xb3\xe2\xd6\x1f\x45\x00\x98\x8d\x0d\xdc\xbd\x99\x0c\x76\xee\x08\xc4\x1e\x0a\x5b\xfd\x59\x1b\xcf\x01\x0e\xe1\xf0\x2e\x3c\x79\xb2\xba\x3a\xa9\x61\x6a\xed\xb7\x4f\x46\x00\x16\x9d\x37\x94\x97\x1a\xd8\x70\xcf\x7e\xd3\x3e\x11\xa7\x66\x29\x15\x1c\x4b\xa3\x93\x8f\xce\xe8\x55\xeb\x14\x01\xc4\xd4\xb6\x0a\x2b\xa7\x68\xe3\x2e\xc4\x1f\x4d\x6d\x35\x57\x22\x7e\x48\x7b\x42\x3a\x4a\x79\xa6\xb0\xe0\xd9\x8c\x59\x2c\xa4\xf3\x76\x16\x77\xc1\xdb\x1a\xa3\xa6\x61\xda\xb4\x25\xb7\x7e\xd7\x98\xfb\x09\xb6\x7c\x97\xcb\x28\x6a\x2d\x53\xd5\x4a\x51\x7e\x2e\x72\xf2\x65\x19\x10\xea\xb5\x11\x18\xb2\xf0\x49\x30\xb5\x26\xaa\x3b\x7b\xa3\x08\x7d\x26\xf6\xc5\xd0\xd2\xab\xdb\xbe\x72\x99\x93\x47\xa9\xaa\xf5\x21\x7c\xfa\xd4\xdc\xee\x3a\xb7\xae\x91\x6e\x09\x6c\x1c\x2a\x30\xe7\xb5\xf2\xee\xb3\x1c\x4a\xe7\xae\x77\x67\xd8\x25\xbb\x10\xb2\x09\x17\x50\xcd\x67\xd5\xc3\x9f\x7f\xfc\xf1\xc7\x80\x6b\xdf\x54\xd6\x78\xd3\x3b\xb8\x12\xce\x7f\xf7\xdd\xc3\x07\xf3\xe8\x9b\xca\x58\xdf\x2c\x74\x3a\x0f\x1e\xce\xa3\x6f\x56\x83\xc7\x71\x18\x8c\x5e\x0e\xfb\xbf\x1f\x9f\x9e\x7e\x38\x3e\x3d\x3d\xfb\x1d\x58\x05\x07\x81\x09\xb0\x92\xbc\xe3\x11\x18\x6b\xfe\x7f\xdd\xff\x9d\x16\x17\xdb\x4c\x10\x6b\x38\x08\x3f\xd9\x47\x38\x3e\x39\xe9\x0f\xde\x00\xbb\x68\x31\x67\x21\x87\x39\x3e\xc5\x36\xf8\xdc\xcc\x35\xc0\x92\x2e\x76\x69\x20\xbc\x08\x08\x46\x91\x40\x28\xa4\xc9\xab\x17\x9c\x17\xa8\x7d\x18\x0d\x35\xfa\x0b\x63\x27\x50\x7b\xa9\xa4\x97\xe8\xa0\x30\x01\x29\xbd\x01\xcb\x33\x24\xac\x12\x92\x70\x2a\xa1\xb9\x2a\x5f\x1e\xb6\xb5\x76\x30\xc2\xdc\x58\x04\xa1\x1d\x48\x07\x13\x6d\x2e\x34\x78\x13\xfa\xf8\x46\x12\x02\x6a\x01\x75\xd5\x74\xe6\x84\xae\x33\x70\xa1\x10\x44\x17\x63\xa9\x30\x00\xef\x12\xfc\x80\x89\xfb\xd0\xeb\x41\x1c\x07\xf0\x15\x66\x05\xbd\xcd\xb5\x9b\x33\xdf\xc2\xcd\xa1\x7b\xde\xe0\x2f\xcc\x17\xf5\xa8\xe5\xd2\xd8\xce\xa1\x87\xef\x2f\x23\xbc\x0c\xb6\x3d\x3f\x3e\x7f\x3b\x7c\xd9\xbb\xbb\xc6\xe5\xb7\x80\xe2\x2d\x93\x66\x1f\xe6\xf3\xbb\xe1\x20\xbb\x5c\xa4\x0d\x8d\x1f\x8c\x55\x56\x4e\xa5\xc2\x02\x05\x30\x46\x50\xcd\x16\x06\xa5\x3b\x01\x9b\x42\xda\x4d\xe9\xd7\xee\x5f\xc0\xb0\x95\x76\xa3\xca\xd0\x56\x8f\xa8\xd6\x24\xb0\x39\x11\x45\x4d\x09\x63\x19\x67\xde\xd6\xce\x93\x67\x07\x52\xc3\xa4\x1e\x61\xe3\x74\x47\x86\xaf\x1d\x82\x32\x19\x57\xc0\x2b\xd9\x76\x7f\x91\x23\xe5\x24\x30\x8b\x10\xbb\xce\x3d\x78\xd0\xac\x77\xe1\x7e\xf2\xa0\xf3\xc7\xd1\xa2\x37\x59\xab\x41\x9d\xb8\xc9\x67\x63\x65\x21\x75\xda\x94\xb5\x74\x39\xdf\xb3\x66\x21\x59\x09\xff\x7a\x19\x14\x2e\xe1\xc7\xff\x9e\xab\x13\xfa\xeb\x99\x5a\x63\x7c\x1a\xd8\xa4\x2d\x9f\xe8\xea\x8a\x51\x42\x68\x84\x83\xe4\x29\xcf\x26\x75\xf5\x54\x99\xd1\x6b\x8a\xe3\x38\xbe\xf5\x75\x60\x99\x92\x84\x44\x53\xb4\xb3\x9d\x3e\x20\xea\x80\xf3\x14\xb7\x50\xa0\x0f\x39\x35\x0a\x52\x42\x4b\x30\xcc\x37\x91\x2b\x7d\x10\x51\xf3\x42\x7a\x3c\x93\xb6\xb7\xb9\xd7\x9e\x2b\x27\x42\x5a\x38\x58\xa3\xbb\xa5\x79\x11\xe6\x42\x2b\xc3\x05\xa9\xd9\xf0\x88\x3f\x33\x05\xfb\x3e\x13\x8d\x4d\xae\xc9\xc2\x8d\x2c\xda\x4d\x9c\x3f\x22\x08\xc9\xb3\x13\x85\xdd\xdd\xa5\x7d\xc4\xe1\xad\xa9\xb2\x66\x2a\x05\xda\xb4\x9b\x7e\x10\xdc\xf3\xf4\x83\xa9\x97\xac\xd7\xcd\xd0\x4d\x4d\x4d\x19\x4a\x5b\xb7\xdc\x05\xc8\xa0\x8d\x2d\x1a\x4e\x6c\xd4\x3a\xbd\x47\x27\xb7\xe2\x60\x3e\x6f\x89\x44\x78\x92\x0b\xfd\x5e\x8f\x84\xb5\x2e\x49\xc4\xa8\x25\xe0\xe1\xad\xa3\xb7\xb0\xf8\xcd\x7e\x69\xe5\x2f\x88\xa9\x8b\x5d\x04\xcb\xa3\x45\x79\xbb\xad\x2d\x25\xa2\xf0\xca\xa2\x79\xe5\xc6\xc6\x7f\xae\x67\x1b\x74\x24\x9b\x7c\xbd\x67\xc9\x96\xdd\xe5\x6f\xcb\xad\xf5\xd8\xed\x6e\x7e\x35\x3e\x62\x08\xfd\x37\x27\xcf\x4e\xde\x9c\x7e\x38\x1e\xbc\xec\xc5\x3f\xc4\xd7\xb8\x6e\x43\xd9\x40\x43\x5c\x42\x6f\xd4\x5e\x7b\x61\xae\x8d\x78\xd8\xf1\x0e\x45\x0f\xa3\xe4\xd9\xcc\x2b\x8d\x17\x2d\x41\xa8\x5e\x6b\xd9\xdb\x2e\x4b\x2d\xbd\xe4\x8a\xb5\x0f\x57\x10\xb7\xae\x38\x0c\xff\x96\x63\xe1\xc6\x6a\xf7\xd1\x0f\x3f\x1f\x3e\x5c\x5f\x3a\xda\x4b\x78\xb4\x4b\xf8\x68\x2f\xe1\xa3\x40\x18\xef\x57\x89\x79\x33\x41\x1d\xcc\xc2\x72\x63\x59\x68\xbb\xb6\x48\xb9\x98\xa2\xf5\xd2\x21\xab\x10\x2d\xab\xad\x72\xb0\x07\x26\x83\x98\x28\x2a\xa7\xbb\x56\x4a\x1f\x6c\xad\xed\x8c\x35\x4b\x7b\x6e\xc0\xd3\x46\xab\xb6\xc5\xf7\x73\x02\x1c\x43\xdf\x10\x07\xa8\xa6\x46\x84\xe6\x20\x5f\x6b\x14\x8c\x8b\x12\x2a\x6b\x72\x0a\xf9\x55\x61\xcb\x8c\xf6\xd6\x28\x56\x29\x4e\xed\x46\x87\x1a\x18\xae\x9c\x01\x8d\x28\x56\x74\x49\xa8\xb1\xc9\xd4\xa8\xba\x44\x07\x14\x18\x99\x45\xee\x51\x2c\x3a\x22\x6a\x4e\x9b\x49\x23\xa3\x3e\x88\x9a\xa5\x16\x7e\x59\x09\x87\x8f\x7f\x3a\xa4\x5e\x70\x79\x9d\x16\xb4\xae\xe1\x4f\x7a\x34\xc3\x41\x28\x17\x6e\xe6\x94\x29\xc0\x49\x9d\x85\x06\xab\xe4\x9a\x17\x08\x48\x35\xc4\x8f\x89\xc4\x8f\xad\xa9\x8b\x31\x2c\xe6\x8b\x68\x35\x12\xb4\x43\xc6\x82\xcb\x72\x6c\xd8\x9a\xd0\xb6\xb7\x09\x5d\xd0\x87\x72\x55\x57\x50\xa0\xc6\x29\x0f\x43\x79\x40\x10\xcf\xb3\xc9\x1a\x87\x5a\x97\xdc\x4d\xa0\x14\x4e\x2c\x18\x00\xff\xcb\x61\xb6\xf5\x59\x1a\x2d\xf6\x28\xd0\xbc\x7c\xfc\xd7\xc7\x9b\xa1\xe7\xcb\x4e\x47\x1d\xd0\xc6\x63\x17\xb8\x37\xa5\xcc\xd8\x2a\x20\x42\x17\x9b\x59\xee\xc6\xa0\x8c\xa9\x1c\xd4\xda\x4b\xb5\xf8\x33\x89\x74\x50\x57\xbb\xaa\xef\xe5\x72\xad\xaa\x37\x52\xc3\x9d\xcf\xfd\x53\x04\x45\xa8\x63\x14\xf6\x6d\x5f\xc1\x98\xc5\x91\x31\x14\x12\x7e\x63\x8a\xfb\xf4\x09\xae\x6e\x7b\x53\x69\x8e\x12\x9b\x75\x50\xf3\x06\x32\x53\x56\xe1\xad\x7e\xdf\x03\x4b\x4c\xb5\x60\x5c\x7b\x2a\x4c\x4b\xf9\xa0\xcd\x45\x34\x5f\xbd\x43\xfc\x27\x00\x00\xff\xff\x8d\xc4\xbc\x58\xb5\x1a\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\xdf\x6f\x1c\xb7\x11\x7e\xe7\x5f\xf1\xe5\x64\x58\x31\x1a\xee\x5a\x28\x0c\x01\x72\x64\xc0\x75\x95\x34\x75\x53\x09\x52\x8b\xa2\x10\xf4\xc0\x23\x67\x77\x99\xe3\x92\x6b\x72\xf6\xa4\xf5\xf9\xfe\xf7\x82\xbb\x77\x96\x22\xc9\xe7\xa8\x40\x5e\xf2\x76\x2b\xce\x6f\xce\xf7\xcd\x50\x7b\xdf\x94\x73\xeb\xcb\xb9\x4a\x0d\x24\xdd\x08\xb1\x5a\xc1\x56\x28\xde\x05\x5f\xd9\xba\xb8\x20\xdd\x47\xcb\xc3\x99\x62\xdd\x9c\x29\xbd\x50\x35\x25\xac\xd7\xc2\x85\xba\xa6\x08\xc9\xf0\xc1\x90\x4c\xac\x22\xf7\x5d\x91\x1a\xcc\xac\x4f\xac\x9c\xb3\xbe\x46\x24\x83\x46\x31\xb4\xf1\xd0\xa3\xc5\x3e\x2a\xb6\xc1\x23\x78\x3c\xfb\xb6\x09\x89\xbd\x6a\xe9\xc5\x4c\x68\xc5\x78\x53\x2e\x55\x2c\x9d\x9d\x97\x43\xdf\x96\xda\x59\xf2\x2c\x35\x45\x2e\x3a\x6a\xf1\xfd\xf7\xfb\x27\xa7\x3f\xec\xe7\x00\xdf\x51\xe4\xb7\xe9\x2f\x03\x53\xfa\x1c\x69\xfe\x9b\xad\xac\x56\x4c\xa9\xd8\x44\x7a\x4e\x5d\x48\x96\x43\x1c\xc6\x63\x7c\xc2\x05\xc7\x1c\xd7\x7a\x2d\x4e\x4e\x7f\xf8\xb2\xd3\x05\x0d\xf7\x7d\x9e\x45\xbb\x54\x4c\xef\x69\x78\xa2\xe7\xf7\x34\x3c\x70\xbc\x87\x7f\x9d\xfe\xf5\xf4\x08\x86\x1c\x31\x81\x1b\x42\x15\x9c\x0b\xd7\x59\x26\x91\x1e\x4b\xa4\x2a\xa6\x08\xe5\x1c\xb4\xeb\x13\x53\x4c\x50\x91\x10\x7b\x8f\x6b\xcb\x0d\x14\x96\x2d\x6c\xab\x6a\x9a\xbe\x17\x56\x2f\xc6\x7b\x28\x22\x75\x01\x73\xb5\x20\x03\xeb\xa7\x2c\x51\x12\xeb\x9c\xe2\x78\x98\x0a\x53\xde\x13\xdf\xa6\x7a\x19\x1b\x72\xf2\x50\x26\x8a\x4b\x8a\x32\x76\x6d\xba\x12\xf9\x92\x8e\xcf\xc9\xe0\x6f\x8a\x71\xe2\x99\x62\x17\x6d\x22\xfc\xc3\xfa\xfe\x06\x87\xb8\x18\x85\xf1\xed\xf9\xd9\xcf\xe9\x85\x98\xab\x44\x7d\x74\xc7\x0d\x73\x97\x8e\xca\x52\x1b\x5f\x44\x32\x8d\xe2\x42\x87\xb6\xd4\xc1\x33\x79\x2e\x8d\x4d\x5c\x66\x6f\xe5\xe4\xab\x3c\x2c\x0f\x27\x43\xe5\xb3\x6c\x42\x45\xdd\x94\x21\x89\xba\xab\x17\x34\x1c\x57\xd6\xd1\x51\x59\x8e\x79\x74\x0b\x5b\xc6\xae\x95\x75\x57\x97\xe7\x67\x3f\xcb\x1f\xcf\x7e\x94\xef\x4f\xfe\x2b\x27\x2f\x32\x92\x23\x95\x48\xa4\xe4\xb4\xca\x0d\x74\x3c\x6a\xc5\x26\xb5\xa5\x56\xe5\x46\xaa\xa7\x2e\x5f\xf2\x28\x35\x5e\xfb\x24\xb9\xa3\x07\x6f\x45\x73\x40\x3b\x1a\x47\x90\x57\x73\x47\xe6\x78\xa0\x24\xee\x97\x94\x6e\x38\xaa\xf4\xb4\xca\x4a\x9c\x8c\x5a\xbf\x47\x89\xa7\x78\xfe\x88\x95\x0e\x89\xe4\x9f\x8b\x83\x83\xc7\x6a\x7d\xda\x91\xbf\x68\x6c\xc5\x78\x17\x3c\x2b\xeb\x29\xe2\xcc\x29\xae\x42\x6c\x91\x95\x7e\x9f\x6e\xa6\x32\xdb\xfe\x63\x14\x5b\x7d\xec\x23\xe9\x10\x69\x53\xda\xcf\xdf\x0f\x6a\xd6\x6d\x26\x47\xd1\x5a\x1d\x43\x0a\xd5\x54\xbb\xa1\x6f\x47\x36\x2a\x6f\x35\xef\x7a\xa8\xbb\x5a\x37\xa4\x17\xc7\x3e\x8c\xac\xf9\x1b\x87\xce\xdb\xf3\xd3\xcc\xa1\xe3\xdc\x42\xdf\x99\xcc\xcb\xb8\x5c\xad\x36\x1c\x9c\xfe\x1e\xac\xff\xca\x80\x9b\x7d\x87\x19\xd6\xeb\xab\x07\x63\xaa\x0a\x11\x8a\x99\xda\x8e\x61\x3d\x56\x07\x45\xf1\x6a\xfd\x1a\x26\x08\x60\xe8\x5b\x6c\xc2\x80\x1c\x20\x3f\xe0\x69\x3e\x47\x97\x78\xfe\x1c\xf3\x48\x6a\x21\x80\x1d\xe9\x5e\x6e\x83\x78\xb6\xda\xfc\x5a\x5f\x3d\x9e\xf8\x26\xa2\x69\xea\x56\xca\x3a\x32\x33\x81\x3c\xe3\x2f\x2f\xef\x68\x43\x3a\xc6\x2b\x5c\x5d\xbd\xce\xd3\xc8\x23\x39\xa2\x0e\x07\xaf\x41\x2e\x11\xe8\xc6\x72\xfe\xa8\xac\x30\xc1\xd3\xce\x9b\x88\xd4\x86\xe5\xd3\x86\x7f\xae\x9c\x76\xa4\x7c\x9e\x76\x22\xb6\x90\xb1\xc2\xce\x65\x60\x57\x93\xae\x56\xe4\xcd\x7a\x2d\x84\xad\xf0\x0d\xea\x48\xdd\xad\xb8\x09\x7a\x41\x71\x1a\x86\x55\x62\x35\x9f\xd2\x15\x40\x1a\x12\x53\xab\xd9\x21\x71\xe8\x30\x09\xca\x31\xaa\xbe\x2b\xd8\xb6\x14\xbf\x2a\x95\x91\x6f\x35\x7d\x49\xee\xce\x79\xbb\xa8\x52\x71\x53\x25\xc8\x0a\xa5\xa1\x65\xa6\x8f\xc5\x04\x83\x32\x52\x0a\x7d\xd4\x24\x3b\x15\xf9\x40\x00\xa4\x9b\x80\xfd\xdd\x62\x78\x90\x23\xb2\x79\xd4\xb1\xfb\xd0\x07\x56\xc0\x4b\xbc\xdc\xc7\x9b\x37\xb7\xa9\xe7\x30\x42\xef\xf9\xbe\xa6\x00\x22\x25\x0e\x19\x91\x1e\xf2\xfc\xc1\xf9\x6a\x25\x73\xff\xd0\x07\x14\xe7\xc1\x51\x06\x5f\x15\x55\xee\x5e\x01\x4c\x3b\x55\x76\x32\x49\x97\x46\x51\x1b\x7c\xf1\x4b\x0a\xfe\x76\x9f\x12\xc0\xcc\x85\x5a\x9a\x68\x97\x14\x67\x47\x98\xfd\x12\xfa\xe8\x95\x33\xb3\xef\xf2\x99\xb1\x29\xf3\x80\x74\x54\x2b\x3d\xc8\x48\xb5\x4d\x1c\x87\xd9\x11\x38\xf6\x24\xa6\x2d\x2a\xc7\x41\xde\x4c\x7e\xef\x56\x5c\x45\x7e\x58\xf2\xc7\x05\xee\xdd\x70\x65\x85\xd8\xd4\xaf\xeb\x9d\xcb\x08\xde\xa2\xf6\xa7\x76\x64\xb0\x7f\x06\x43\x23\x4e\xdf\x8c\x17\xe2\xb3\xd4\x73\x21\xf6\x70\x3d\xc2\x26\x9b\xce\xcd\x9f\x61\x81\x6b\xa5\x6a\xf2\x0c\xe5\x0d\x3c\xf1\x75\x88\x0b\xf4\x6c\x9d\x65\x4b\x09\x75\x18\xe1\xc9\x01\x51\x69\xca\x10\x31\x36\xc3\xa3\x10\x7b\xb9\xbc\x5b\xe5\xd8\xfb\x84\x39\x55\x21\x12\x8c\x4f\xb0\x09\x0b\x1f\xae\x3d\x38\x8c\x8b\xe3\xe4\x89\xc6\x4a\xf4\xdd\xb4\x0a\x66\x48\x0f\x48\x23\xf7\x88\xeb\xc6\x3a\x1a\xd1\xfe\x19\x73\x90\xe6\x05\x8e\x8f\x31\x9b\x8d\x88\x37\xe1\x16\xef\x13\xbe\x27\x9d\x6f\xb0\xbb\x16\x17\x13\xec\xb1\xde\x52\xe0\xc6\xca\x44\x12\x89\x18\x7f\xba\x11\x74\xd3\x85\xc8\xb8\x78\x7b\xf1\xef\xf3\x9f\x8e\xf7\xef\x58\xf9\x4f\x88\x0b\x8a\x1b\x23\xd3\x39\xd6\xeb\xfd\x51\x51\xde\x6c\xef\x21\xef\xbb\x52\x76\xd1\x2e\xad\xa3\x9a\x0c\xa4\xcc\x0c\x21\xb7\x05\xcd\x39\x41\x2e\x51\x1e\x95\xf9\xe7\xd1\x47\x48\xda\x78\xdb\x19\x32\x36\xa4\x25\x7a\x9f\x1d\x4e\x1a\x42\x4c\xbc\x29\xb5\x92\x1c\xfb\xc4\x62\x57\xb7\x73\xef\xc9\x48\x65\x5a\x74\x31\xe4\x41\x8e\xd0\x91\x4f\x79\xab\x90\x79\x2f\x88\xc1\xc9\xce\x29\x4f\x53\xab\x66\x26\xfd\x8a\x56\xbe\xcc\xbb\x7d\x9d\xfb\x8a\xa0\x5c\x0a\xf0\x44\xe6\x56\xb2\x70\x41\x2b\x57\x2c\x83\xeb\x5b\x4a\x30\x36\x42\x47\x52\x4c\x66\xdb\x2b\x19\xfe\x13\xf4\x75\xee\x90\xdc\x46\xa2\x5d\x64\x41\xd9\xe2\xe5\xe1\xab\x97\x90\x77\x88\x31\x44\x5b\x5b\x5f\x7e\xc1\x7e\x8e\x63\x82\xe4\x48\xec\x69\x48\x2e\xd4\x48\xd6\xeb\xb1\xf5\x5a\xe5\xf3\x2b\x84\x96\x14\x07\x6e\xb2\x08\x37\x31\xf4\x75\x83\x2d\xaa\xc5\x2d\xfa\x36\xd0\xde\x5a\xf9\x8c\xd0\x7b\x94\x79\xff\x58\xec\x21\x11\x8f\xd8\xea\x3b\xd4\xe4\x69\xa9\xc6\x09\x39\x3e\x99\x58\xe9\xc5\x1d\x0b\xbd\x6f\x55\x5a\xa0\x35\xc9\x6c\x0d\x40\x7d\x4c\xa4\xef\x7d\xb6\xc1\x9b\x47\x02\x98\x96\x90\xff\x5b\x7d\xe2\x97\xa7\x69\x8b\x3d\xf8\xc0\x74\x04\xc5\xa1\xb5\x5a\xfe\xba\x25\xa0\x63\x7e\xa0\xbb\x10\xba\x84\xde\xb3\x75\x68\x55\x7e\x12\x66\x36\xe8\xbb\x87\xa1\x3f\x6a\xe5\x8b\xa1\xee\x94\xc6\xf3\xdf\xfa\x3f\x81\xdc\xa1\x49\xe6\xd9\xb1\x21\x41\x29\x23\xcd\x43\xc8\x2d\xc1\xbf\x22\xcc\x4f\x9f\xb0\xda\xbd\xe0\x4c\x8a\xd9\xc8\x9d\x4d\x21\x53\x9e\x0e\x6d\x37\x3e\x9a\x1f\xdb\x76\xf2\x66\x93\x9a\x9e\x4d\xe6\xc7\xad\x77\xf8\x70\x2d\xd6\xb7\x6b\xc1\xff\x02\x00\x00\xff\xff\x68\xf8\x43\x71\xf3\x10\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

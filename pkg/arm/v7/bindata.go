// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x7b\x73\xdb\x36\x12\xff\xfb\xf8\x29\xb6\xb4\xdb\x3c\x1a\x88\x76\xda\x4e\x3a\x6a\x95\x99\xc4\x51\x73\xb9\xa6\xb1\x4f\x4e\xa6\x73\x93\x66\x32\x10\x09\x49\xa8\x48\x82\x05\x40\xd9\xaa\x93\xef\x7e\xbf\x05\x29\x59\x2f\x3f\x72\xb9\xfe\xd3\x4e\x63\x5b\xc0\x62\xb1\xcf\xdf\xee\x42\x7b\x5f\x24\x43\x5d\x26\x43\xe9\x26\x24\xd4\x79\x14\xed\xd1\x4f\xc6\x92\x57\xce\xeb\x72\xdc\xa5\xdc\x8c\x49\x96\x19\x65\xd6\x54\x24\xf3\x9c\xbc\x95\xa3\x91\x4e\xc9\x4f\xa4\xa7\x33\x53\xe7\x19\x59\x53\x7b\x45\x33\x2d\xb1\xa8\xa8\x90\xce\x2b\x4b\xfd\x97\x4f\xc1\x6b\xd0\x3f\x3d\x7e\x33\x38\xea\x3f\x1f\x1c\xbf\x39\xe9\xc5\x73\x53\x5b\x61\x95\xc3\xaf\x54\x89\x31\x0e\x56\x31\xa8\x8e\x4f\xdf\xff\xf4\xef\x67\xaf\x7a\xb1\xa9\x54\xe9\x26\x7a\xe4\x3b\xfb\x6b\x27\x3b\xc6\xc9\x4c\xcd\x3a\x69\x6e\xea\x0c\x27\x70\x46\x57\x5e\x0e\x73\xe5\x48\xbc\xa0\x17\xaf\x4e\xde\xbc\x26\xe1\x68\xff\x6e\xa6\xc7\xf4\xb5\x9b\x18\xeb\x29\xde\x6f\xf9\xc6\xf4\x81\xbc\xd4\x39\x89\xc3\x7b\x24\x7e\xa7\x97\xc7\xcf\x49\x08\x68\x26\x2a\xab\x46\xfa\x9c\xe2\x9f\xdf\x3c\xed\x13\x93\xd2\xb3\xc1\xf1\x49\x37\xfe\x3c\xfe\xcc\x23\x8a\x2e\x2e\x48\x8f\xa8\x73\x64\xca\x91\x1e\x77\x4e\x55\x5a\x5b\xed\xe7\x27\xd2\xa7\x93\x13\x99\x4e\xe5\x18\xbc\x3f\x7e\x8c\x20\xc6\x18\xe6\x12\xbe\x35\x9c\x70\x5e\x5a\x5f\x57\x1d\x38\x24\xd6\x25\x3e\xe5\x39\x3c\x41\x56\x65\xc4\x26\x4f\xb3\x92\xd2\xc0\xb3\xb6\xd2\x6b\x53\x12\xfe\xdf\xbf\x3b\x31\xce\x97\xb2\x50\xf7\xe2\x28\x05\xd5\xe3\x64\x26\x6d\x92\xeb\x61\x32\xaf\x8b\x24\xcd\xb5\x2a\xbd\x48\x95\xf5\x9d\x4a\x15\xf4\xe3\x8f\x77\xfa\xc7\x3f\xdd\x61\x11\x8f\xb0\xf6\xc4\x3d\x9d\xc3\xe1\x4b\x59\x79\x4d\xc3\xc7\x12\x8b\x9d\x56\xd6\x81\xaa\x8c\xd3\xde\xd8\x79\xd8\x86\xc6\xa7\xde\xb2\x5c\x50\x01\xbc\xae\xbe\x74\xaa\xe6\x9b\x77\x9e\x58\x3d\x03\xef\x9f\xd5\xfc\x13\x6f\xc6\x89\xad\x8b\xf7\xe8\xf5\xf1\xb3\xe3\x2e\x65\x2a\x57\x88\x42\x8e\xc0\x91\xc9\x73\x73\xc6\x34\x4e\xa5\xc1\x44\x72\xc4\x21\xc9\xe1\x9b\xe6\x35\x5b\xd9\x91\xb4\x8a\x6c\x5d\xd2\x99\xf6\x13\x92\x34\x2b\x48\x17\xb8\xad\xf9\x3c\xd5\xe9\x34\xf8\xa1\x63\x71\x3b\x0d\xe5\x14\xd6\xd7\x65\xa3\x25\x25\xca\xa7\xac\x62\xd8\x74\x9d\x2c\xd9\x20\x5f\xa8\xfa\xd6\x4e\x54\x2e\x1e\x09\xa7\xec\x0c\x8e\xb5\x55\xe1\xde\x45\xec\xa4\xde\x00\xec\xfe\x09\x5e\xfd\x12\xb2\x54\x56\x3b\x45\x2f\x75\x59\x9f\xd3\x23\x3a\x0d\xc4\x74\x77\x70\xf2\x8b\xbb\x17\x21\x2f\x55\x6d\xf3\xde\xc4\xfb\xca\x75\x93\x04\xde\xc7\x1d\x19\x02\xa1\x93\x1a\xd8\xd8\x80\x41\xe9\x93\x4c\x3b\x9f\xf0\x6d\x49\x73\x57\xf2\x28\x79\xd4\x30\x4a\xf6\x99\x85\xb4\xe9\x24\x31\x2e\x1a\x57\x63\xf8\xa3\x37\xd2\xb9\x02\xb3\xa0\x47\x35\xd5\x09\x24\x13\xd8\x4a\x70\xa7\x78\x7e\xf2\x5c\xfc\xdc\xff\x8f\x68\x6e\xc1\xaf\x5c\x81\x41\xe4\x5c\x9e\x4a\x0e\xa0\x5e\x38\x65\x27\x0e\xb7\xcb\xa4\xa5\xaa\x55\xc5\x4e\x0e\x54\xc1\xed\x0d\xe5\x35\x31\x78\x49\xca\x02\x5d\x13\x38\x91\x2a\x39\x0f\xb3\xde\x5c\xb9\x68\xd3\xa4\xea\x1c\x70\xe4\x3e\xcd\xb2\x82\xfa\xe1\xd4\x5f\x61\xe2\x46\x9e\xbf\xa3\xa5\x8d\x53\xe2\x9b\xce\xe1\xe1\x2e\x5b\x1f\x03\xb5\x4f\x19\xb5\x09\x69\x0c\x20\x2c\x61\xe5\x93\x5c\xfa\x91\xb1\x05\xf1\xa1\xbf\x26\x9a\x55\xc2\xbc\xff\x1e\xc6\x96\x7f\xd6\x56\xa5\xc6\xaa\xd6\xb4\xcb\xcf\x5b\x36\xab\xda\xda\xd1\x29\x74\x6a\x8d\x33\xa3\xc6\x76\xb8\x21\xa0\x51\x72\x79\x72\xf5\x06\x98\x21\x9d\xa8\x74\xda\x2b\x4d\x40\xcd\x5b\x97\x9d\x27\x83\x63\x46\xd1\x50\xbb\xa8\xae\x32\x46\x66\x7a\x0b\x10\x6f\x50\xd8\xfd\xcb\xe8\xf2\x86\x22\x17\x3f\xa0\x18\x68\xfd\x6e\xab\x50\x21\x3e\x48\x7a\xaf\x8a\xca\x03\x5c\xe9\xe2\xb0\xd3\xf9\xee\xe3\x0f\x94\x99\x88\x08\xfa\x50\x2b\x06\x89\x39\x89\x3f\xe8\xd3\xee\x0c\x57\xd2\x57\x5f\xd1\xd0\x2a\x39\x05\xc3\x6b\x15\x7e\xbb\x10\x63\xff\xa2\xfd\x0b\xe2\xee\x54\xbd\x95\xa9\xa9\xbc\x23\x14\x7d\x85\x7e\x84\xb8\xd2\xbf\x7d\xbb\x72\x9a\x44\xee\xe9\x3b\x7a\xf7\xee\x07\xae\x48\x25\xb9\x5c\xa9\x8a\x0e\x7f\x20\x95\x03\x91\xd4\xb9\xf6\xfc\x61\xa4\xa3\xcc\x94\xea\x06\x6f\x58\x55\x98\xd9\xa7\xb5\x00\x6c\xbd\x14\x11\x5e\x72\xcd\x8b\x90\x85\xc2\x8e\xe8\xda\x96\xe0\xba\x50\xbd\xb8\x50\x65\x86\x72\x1b\x41\xcb\x2f\x68\x8c\x38\xbb\x24\xcf\x4c\x3a\x85\xe4\x21\x7b\x46\x90\x7a\xd8\x28\x0c\x93\xb8\x39\x34\x29\x52\x9f\x93\xf3\xe8\x1d\x1b\x42\x11\xa4\x82\x62\x5e\x17\xca\xde\x48\xc5\xf9\xaf\x53\x75\x15\xdd\xca\x7e\x31\x1d\xb9\xce\xf9\x08\xed\x1a\x14\x45\xab\xc8\x20\x32\x6d\x92\x21\x59\x36\x9c\x15\x8c\x7a\x08\x62\x95\x4e\x0c\xdd\xb9\x9e\x8c\xb6\x74\x24\x66\x0f\xf5\xab\x3f\x6a\xe3\x25\xd1\x01\x1d\xdc\xa1\xc7\x8f\x2f\x55\x67\x31\x4c\x5d\xfa\xcd\x93\x58\x07\x6f\x74\x30\xc8\xcb\x92\xc4\x60\xc7\x7e\xd3\x3e\x31\xa7\x66\x29\xc9\x24\xbc\x5e\x76\x7e\x77\x38\xb1\x6c\x9d\x40\x18\x73\xdb\x9a\xa1\x81\x52\x36\xee\x52\xfc\x3b\x24\x2e\x65\x9e\xc5\x0f\x78\x0f\xca\x70\xca\x8b\x5c\x8d\x65\x3a\x07\xc8\x8d\x81\xa4\x76\x0e\x42\x6f\x6b\x15\x35\x0d\xd3\xba\x2d\xa1\xea\xb6\x31\x77\x13\x6c\xf8\x0e\xc1\x1b\xb5\x96\xa9\x6a\x64\x29\xf2\x73\x91\x93\x2f\x8a\x80\x50\xaf\x4c\xa6\x42\x16\x3e\x0e\xa6\x2e\x99\xea\xab\x9d\x51\x04\xc5\xb3\x5d\x31\xb4\xf4\xea\xa6\xaf\x5c\xea\xf4\x61\x92\xd7\xe5\x01\x7d\xf8\xd0\x68\x77\x95\x5b\x57\x48\x37\x2e\x6c\x1c\x9a\xa9\x91\xac\x73\xef\x6e\xe5\x50\x3e\x77\xb5\x3b\xc3\x2e\xdb\x85\x91\x2d\x73\x01\xd5\x7c\x5a\x3d\xf8\xfe\xdb\x6f\xbf\x0d\xb8\xf6\x8f\xca\x1a\x6f\x7a\xfb\x17\xd8\xfc\xf2\xcb\x07\xf7\x3f\x62\x05\xa3\x44\xb3\xb0\xb7\x77\xff\x01\x16\x2e\x07\x8f\x27\x61\x30\x7a\x31\xe8\xff\xfa\xe4\xe5\xcb\xf7\xf8\x77\xfc\x2b\x89\x8a\xf6\x03\x13\x12\x05\x7b\x07\x2d\xaf\x10\xcd\xef\x57\xfd\x5f\x79\x71\xb1\x2d\x32\x66\x8d\x8f\xfc\x13\x53\xc9\x93\xa3\xa3\xfe\x09\xa6\x98\xb3\x16\x73\x16\xf7\x08\x27\x67\xaa\x0d\x3e\x38\xbe\x01\x96\x64\xb1\xcb\x03\xe1\x59\x40\x30\x8e\x04\x46\xa1\x92\xbd\x7a\x26\xe1\x61\x18\x86\x47\xc3\x52\xf9\x33\x63\xa7\x54\x7b\x9d\x6b\xaf\x21\xf9\xd8\x04\xa4\x84\x14\x16\xc5\x95\xb1\x2a\xd3\x8c\x53\x1d\x9e\xab\x46\xcb\xc3\x68\xbf\x1d\x0d\x15\x8c\xa5\x28\xc3\x9f\xda\xd1\xb4\x34\x67\xb0\x99\x09\x7d\x7c\x73\x13\xe0\x12\x97\xd4\x55\xd3\x99\x33\xba\xce\x21\x0c\x17\x82\xe8\x6c\x02\xfc\x0d\xc0\xbb\x04\x3f\x12\xd9\x3d\xea\xf5\x28\x8e\x03\xf8\x66\xe6\x12\x7a\x1b\xb5\x9b\x33\x5f\xd0\xf5\xa1\x7b\xda\xe0\x2f\xa2\xb7\xad\x47\x2d\x97\xc6\x76\x4e\x79\xfa\xfa\x3c\x52\xe7\xc1\xb6\xa7\x4f\x4e\xdf\x0c\x5e\xf4\xee\xac\x70\xf9\x25\xa0\x78\xcb\xa4\xd9\x07\xab\x3b\xe1\xa0\x38\x5f\xa4\x0d\x8f\x1f\x02\x33\xa8\x9e\x41\xa4\x31\xc0\x5d\x08\x86\x6a\xb1\x30\x28\xeb\x44\x62\x46\x49\x37\xe1\x3f\xbb\x7f\x62\x42\x6f\x6f\xbb\x56\x64\x6a\xab\x47\x04\xfb\xaa\x85\x7c\x51\xd4\x94\x30\x91\x4a\x81\x7c\x71\x9e\x3d\x7b\x82\x00\x9d\xd6\x43\xd5\x38\xdd\xb1\xe1\x6b\xd4\xa7\xdc\xa4\x32\x27\x59\xe9\xb6\xfb\x83\xdc\x10\x4e\xa3\x8a\x28\x8a\xdd\xde\x5d\xba\xdf\xac\x77\xe9\x5e\xe7\xfe\xde\x6f\x87\x8b\xde\x64\xa5\x06\xed\xc5\x4d\x3e\x1b\xab\xc7\xba\x4c\x9a\xb2\x96\x2c\xe7\x7b\xd1\x2c\x74\x2e\x2f\xff\xfc\x3b\x38\x5c\xc2\x8f\xff\x3f\x57\x87\x46\xf5\xb3\x99\x5a\x63\x7c\x12\xd8\x24\x2d\x1f\x54\x56\xc1\x09\x51\x2a\xda\xef\x3c\x45\xef\x52\x57\x4f\x73\x33\x7c\xc5\x71\x1c\xc7\x37\xbe\x0e\x2c\x53\x92\x91\x08\xf7\xcf\xb7\xfa\x00\xb8\x18\xa7\x10\xb7\x34\x46\x20\x70\x4e\x0d\xc3\x2d\xa1\x25\x18\x8c\xd6\x91\x2b\xb9\x1f\x71\xf3\xc2\x72\x3c\xd3\xb6\xb7\xbe\xd7\x9e\x2b\xa6\x99\xb6\xb4\xbf\x42\x77\x43\xf3\x92\x21\x9f\x73\x23\x33\x16\xb3\xe1\x11\xdf\x32\x05\xfb\xb8\xb6\xb1\xc9\x15\x59\xb8\x96\x45\xdb\x89\xf3\x1b\xe8\x39\x79\xb6\xa2\xb0\xbb\xbd\xb4\x8b\x38\xbc\x35\x01\x4b\x67\x3a\x43\xe4\x76\x93\xf7\xc8\x1e\x99\xbc\x37\xf5\x92\xf5\xaa\x19\xba\x09\x36\x90\xa1\xbc\x75\x83\x2e\xc4\x06\x6d\x6c\xd1\x70\x12\xc3\xd6\xe9\x3d\x3e\xb9\x11\x07\xa0\x6f\x88\xb2\xf0\x24\x17\xfa\xbd\x1e\x5f\xd6\xba\xa4\x93\x0d\x5b\x02\x19\xde\x3a\x7a\x0b\x8b\x5f\xef\x97\xf6\xfe\x05\x31\x77\xb1\x8b\x60\x79\xb8\x28\x6f\x37\xb5\xa5\x4c\x14\x5e\x59\x4a\x59\xb9\x89\xf1\xb7\xf5\x6c\x83\x8e\x6c\x93\xcf\xf7\x2c\xdb\xb2\xbb\xfc\x6b\xb9\xb5\x1a\xbb\xdd\xf5\x4f\x8d\x8f\x80\xa4\xfd\xd7\x47\xcf\x8e\x5e\xa3\xb0\x9e\xbc\xe8\xc5\xdf\xc4\x57\xb8\x6e\x4d\xd8\x40\xc3\x5c\x42\x6f\xd4\xaa\xbd\x30\xd7\x5a\x3c\x6c\x79\x87\xa3\x47\x70\xf2\xac\xe7\x55\xa9\xce\x5a\x82\x50\xbd\x56\xb2\xb7\x5d\xd6\x25\x4a\xa7\xcc\x45\xfb\x70\x45\x71\xeb\x8a\x83\xf0\xdf\x72\x2c\x5c\x5b\xed\x3e\xfc\xe6\xfb\x83\x07\xab\x4b\x87\x3b\x09\x0f\xb7\x09\x1f\xee\x24\x7c\x18\x08\xe3\xdd\x22\x09\x6f\xa6\x68\x10\x58\x1d\x81\x5a\x2e\x42\xdb\xb5\x41\x2a\xb3\x19\x3f\xed\x39\x34\xd7\x0a\x27\x30\xd0\x3a\xda\x01\x93\xe1\x9a\x28\x2a\x66\xdb\x56\x4a\xee\x6f\xac\x6d\x8d\x35\x4b\x7b\xae\xc1\xd3\x5a\xab\xb6\xc1\xf7\x36\x01\xae\x42\xdf\x10\x07\xa8\xe6\x46\x84\xe7\x20\x5f\x97\x2a\x83\x4e\x05\x01\x1f\xf8\xd5\x81\x2e\x0b\x1b\x3f\x62\x58\x93\x8b\x2a\x97\xdc\x6e\xec\x71\x03\x23\x73\x67\x00\xf2\xa8\x1a\x97\x0f\xdc\xa1\xc6\x76\x66\x26\xaf\x0b\x34\x4b\x1c\x18\x29\x26\x55\x0f\x9a\xb6\x23\xe2\xe6\xb4\x99\x34\x52\xee\x83\xb8\x59\x6a\xe1\x17\x4d\xde\xc1\xa3\xef\x0e\xb8\x17\x5c\xaa\xd3\x82\xd6\x15\xfc\x59\x8e\x66\x38\x08\xe5\x02\x6d\x1e\xbf\xeb\x3b\x5d\xa6\xa1\xc1\x2a\x64\xc9\x4f\x9f\x8a\x6b\x88\x9f\x30\x89\x9f\x58\x53\x8f\x27\xb4\x98\x2f\xa2\xcb\x91\xa0\x1d\x32\x16\x5c\x96\x63\xc3\xc6\x84\xb6\xb9\xcd\xe8\xa2\x7c\x28\x57\xc0\x1d\xf4\x7f\x6a\x26\xc3\x50\x1e\x10\xc4\xc3\x5b\x2b\x1c\xea\x12\xfe\x98\x52\x91\xb9\x6c\xc1\x80\xe4\x9f\x18\xc6\x37\x3e\x62\x44\xca\x76\x08\xd0\xbc\x7c\xfc\xcf\xc7\x9b\xa1\xe7\xd3\x4e\x43\xbd\xd2\x78\xd5\x25\xe9\x4d\xa1\x53\x71\x19\x10\xa1\x8b\x4d\x2d\x7f\xc1\x92\x1b\x53\x39\x28\x87\x46\x79\xf1\x35\x09\x7a\x5e\x94\xd5\x2d\xd1\x77\x72\xb9\x52\xd4\x6b\xa9\x31\x72\xdd\xf2\xab\x08\x8e\x50\xc7\x5f\xcf\x2c\xfa\x0a\x80\xaf\x1a\xa2\x6b\x41\x48\xf8\xb5\x29\x0e\x33\xd7\xc5\x4d\x6f\x2a\xcd\x51\x66\xb3\x0a\x6a\xe8\x30\x53\x53\x54\xe1\xad\x7e\xd7\x03\x0b\x3f\xa6\xb8\x49\xed\xb9\x30\x2d\xef\x87\x69\xcf\x30\xbd\x2e\xdf\x21\xfe\x1b\x00\x00\xff\xff\x8d\xc4\xbc\x58\xb5\x1a\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\xef\x6f\xdb\xc8\x11\xfd\xce\xbf\x62\xa2\x0b\xe2\x0b\x7a\x4b\xc6\x28\x02\x03\xce\x29\x40\x7a\x4d\xaf\xd7\x6b\x6b\xc3\x6e\x51\x14\x46\x3e\xac\xc8\xa1\xb8\x27\x72\x97\xd9\x5d\xca\x56\x94\xfc\xef\x7d\xb3\x94\x6c\x9d\xec\x28\xe7\x02\xf7\x25\x40\x80\x48\xe2\xec\xfc\x78\x3b\xef\xcd\xd0\xdf\x3c\x29\x66\xc6\x16\x33\x1d\x1a\x52\x7c\x93\x65\xeb\x35\x99\x9a\xf2\x1f\x9c\xad\xcd\x3c\xbf\xe4\x72\xf0\x26\xae\xce\x75\x2c\x9b\x73\x5d\x2e\xf4\x9c\x03\x7d\xfa\x94\xb5\x6e\x3e\x67\x4f\x2a\x92\x75\x15\xab\x10\xb5\x8f\x43\x9f\xc3\xcb\xc4\x58\x7c\x6b\x5b\x63\xe7\xe4\xb9\xa2\x46\x47\x2a\x2b\x4b\x65\xf2\x38\x78\x1d\x8d\xb3\x84\x7f\x4f\xbf\x6d\x5c\x88\x56\x77\xfc\x7c\x92\x95\xb0\x7a\x5d\x2c\xb5\x2f\x5a\x33\x2b\x56\x43\x57\x94\xad\x61\x1b\x55\xc9\x3e\xe6\x3d\x77\xf4\xfd\xf7\x47\x6f\xcf\xfe\x72\x24\x09\xfe\x80\xdf\xde\x84\x3f\xad\x22\x72\xd9\x66\x2a\xbf\x99\xda\xc0\x0f\x87\x7c\x93\xe9\x05\xf7\x2e\x98\xe8\xfc\x2a\x3d\xa6\x8f\x74\x19\xbd\xe4\x85\x02\xe0\xeb\xf3\x41\x17\xbc\xda\x8f\x79\xee\xcd\x12\xbe\x7f\xe6\xd5\x23\x23\xe3\xc4\xbd\xc0\xdf\xd0\xbf\xce\xfe\x7c\x76\x4a\x15\xb7\x1c\x99\x62\xc3\x54\xbb\xb6\x75\xd7\x62\x13\xb8\x4c\x10\xe9\x3a\x02\x61\x20\x49\x65\x3b\x04\x7c\x0e\xa4\x3d\x93\x1f\x2c\x5d\x9b\xd8\x90\xa6\x65\x47\xa6\x43\xb4\xf1\xfb\xc2\x94\x8b\x74\x0f\xb9\x47\x74\x9a\xe9\x05\xd0\x37\x76\xac\x92\x0a\x8e\xa5\x94\x98\x1e\x86\xbc\x2a\xf6\xcc\xb7\xa5\x5e\xf9\x86\x5b\x75\xa2\x02\xfb\x25\x7b\xe5\xfb\x2e\xbc\xcb\xe4\x92\xa6\x17\x70\xf7\x57\xf8\x7a\x6b\x91\x4b\xef\x4d\x60\xfa\xbb\xb1\xc3\x0d\x9d\xd0\x65\x32\xa6\x6f\x2f\xce\xff\x11\x9e\x67\x68\x26\x1e\x7c\x3b\x6d\x62\xec\xc3\x69\x51\xe0\xf6\x11\xa3\x42\x23\xe4\xa5\x03\xc6\x0e\x0e\x6c\x2c\x2a\x13\x62\x21\xd1\x8a\x31\x56\x71\x52\x9c\x8c\x8e\x8a\xa7\xe2\x42\xfb\xb2\x29\x5c\xc8\xe6\xfd\x1c\xf7\x31\xad\x4d\xcb\x70\x96\xea\xe8\x17\xa6\x40\x66\x0a\x8f\x0a\xc4\x54\x3f\x9e\xff\xa8\x7e\x7e\xfb\x5f\x35\x46\xc1\x7f\x2d\xc3\x41\x16\x42\x5b\x6a\x69\xa0\x69\x3a\xe5\x9b\x80\xe8\xba\xd8\x58\x0d\xdc\xcb\x25\x27\xab\x74\xed\xa3\xe5\x81\x1e\xbc\x33\x95\x84\x0e\x34\x4e\xc6\x56\xcf\x5a\xae\xa6\x2b\x0e\xd9\x3e\xa4\x7c\x13\xbd\x0e\x8f\x43\x56\xd1\xdb\x74\xea\xf7\x80\x78\xcc\xe7\x6b\x44\xda\x05\x56\x7f\xcc\x8f\x8f\x1f\xc2\xfa\xac\x67\x7b\xd9\x98\x3a\x12\x68\x1c\xb5\xb1\x40\xf9\xbc\xd5\xb1\x76\xbe\x23\x39\xf4\xfb\x74\x33\x17\xe2\xfb\xeb\x00\x5b\x7f\x18\x3c\x97\xce\xf3\x06\xda\xdb\xef\xf7\x30\xeb\x37\x93\x23\xef\x4c\xe9\x5d\x70\xf5\x88\x1d\x22\x24\x35\x2a\xee\x4e\xee\x46\x00\x0c\x65\xc3\xe5\x62\x6a\x5d\x52\xcd\xdf\x38\x74\xde\x5c\x9c\x89\x86\xa6\xb9\x45\x43\x5f\x89\x2e\xd3\x15\x24\x7c\xd4\xe0\xf0\x37\x67\xec\x17\x06\xdc\xe4\x3b\x9a\x40\xab\xdf\xdd\x1b\x53\xe8\x0e\xd2\x31\x72\xd7\x47\x48\x2b\xad\x8f\xf3\xfc\xe5\xa7\x57\x54\xb9\x8c\x08\xd5\xd0\x26\x0d\x52\x2b\x52\xef\xe9\x71\x31\x53\x48\x7a\xf6\x8c\x66\x9e\xf5\x02\x0e\x0f\x94\x7b\xb5\x4d\xe2\xe9\x7a\xf3\x09\xc9\x3e\x58\xf8\x26\xa3\x71\xea\xd6\x1a\xdd\x56\x4d\xe0\x1b\x33\xfe\xea\x6a\xe7\x34\xa9\x36\xd2\x4b\x7a\xf7\xee\x95\x4c\x23\x4b\xa1\x65\xee\xe9\xf8\x15\x71\x0b\x35\xe2\x1b\x13\xe5\x4b\x6d\xb2\xca\x59\x3e\x78\x13\x9e\x3b\xb7\x7c\xdc\xf0\x17\xe4\x4a\xf4\xb6\x95\x69\x97\x81\x7f\xca\xd7\x74\x70\x19\x38\xd4\xa4\xeb\x35\xdb\x0a\x83\x36\x43\x8d\x4f\x68\x8e\x0e\xbb\x33\xaf\x5c\xb9\x40\xde\x89\x37\x35\xb2\x9e\x8d\xe5\x02\x90\xb0\xc2\x88\xed\xca\xd8\x52\x88\xae\xa7\xd1\x50\xa5\xac\x50\x58\x34\x1d\xfb\x2f\x5a\x09\xf3\x4d\xc9\x9f\xb3\xdb\x79\xde\x2d\xea\x90\xdf\xd4\x81\x14\x0a\xad\x78\x29\xf2\xb1\x18\x69\x00\x1e\x07\x37\xf8\x92\x55\x0f\x50\x8f\x61\xcc\x65\xe3\xe8\xe8\xb0\x19\xdd\xab\x91\xc4\x3d\xca\xef\xdf\x0f\x2e\x6a\xa2\x17\xf4\xe2\x88\x5e\xbf\xbe\x2b\x5d\xd2\x70\x83\x8d\xfb\x27\xf1\x3b\x7c\x63\x77\x01\x23\x2d\xa9\x8b\x7b\xcf\xd7\x6b\x25\xfd\xc3\xef\x29\xbf\x70\x2d\x0b\xf9\x6a\xaf\xa5\x7b\x71\x74\xdc\xa9\x24\xc8\x68\x5d\x54\x1a\x0d\x61\xf3\x5f\x02\x9c\xdd\xee\x53\x30\x9c\xa0\x87\x54\x85\xad\x8a\xfd\xe4\x94\x26\xbf\xa0\x18\xab\xdb\x6a\xf2\x9d\x3c\x43\x9d\xa2\x03\xaa\xe5\xb9\x2e\x57\x50\xbe\x39\xe4\xd5\xaf\x60\x18\xfd\xc0\xd9\xb8\x45\x49\x1e\xb8\xea\x31\xee\x2e\xe2\x00\xe4\x3e\xe4\x0f\x1b\xec\xdd\x30\x1a\x3c\xdb\xe0\xd7\x0f\xe0\x31\x18\xbc\x65\xed\x4f\x5d\x52\xb0\x7f\xa2\xdf\x13\x4f\x5f\xa7\x0b\xb1\x62\xf5\x2c\xc3\x46\x77\x9d\x68\x23\xae\xa5\xf9\x85\x16\x74\xad\x71\x04\x00\x6b\x24\x69\x39\x5e\x3b\xbf\xa0\x21\x9a\xd6\x44\x03\x66\xce\x5d\xa2\x67\x74\xe4\xa1\xe6\x42\x91\xca\x08\x3d\x72\x38\x03\xbc\xdb\xc3\xd8\xf7\x02\xcd\x18\xca\xc3\x54\xe1\xa3\x09\xb4\xb0\xee\xda\x12\x0e\xca\xe2\x38\x46\xe2\x84\xc4\xd0\x8f\xab\xa0\x50\x7a\x85\x64\x44\x7b\xb2\xeb\x06\xa4\x4f\x6c\xbf\xe5\x1c\xa9\xea\x39\x4d\xa7\x34\x99\x24\xc6\x57\xee\x8e\xef\x23\xbf\xc7\x33\x4f\xe8\x30\x16\x97\x23\xed\x01\xc7\x46\x02\x37\x5e\x46\x91\x08\x1c\xe9\x0f\x37\x19\xdf\xf4\x0e\x70\x5f\xbe\xb9\xfc\xf7\xc5\x4f\xd3\xa3\x1d\x2f\xff\x01\x1e\xec\x37\x4e\xc6\xe7\x70\x75\x94\x0e\xaa\x9b\xed\x3d\xc8\xbe\xab\x14\xb6\xa2\x25\x52\x9a\x43\x53\x94\x12\x85\x50\x5b\x40\xa5\x26\x52\x4b\x2a\x4e\x0b\xf9\x78\xfa\x01\xef\x31\x9b\x68\x07\x53\xa6\x8d\x68\x65\xc0\x97\xb7\xf9\x65\xd9\xa8\x9b\xaa\xd4\x0a\x9d\x16\x62\x76\xa8\xdb\xe3\x60\xb9\x52\xba\xea\xa8\xf7\x4e\x06\x39\x39\x6c\x15\x41\xb6\x0a\x25\x7b\x81\x77\xad\xea\x5b\x0d\x2c\x52\xab\x8a\x92\x7e\xe1\x94\x5c\xe6\x6e\x5f\x4b\x5f\x31\x54\x31\x38\x34\x10\x6a\xbf\xb5\xcc\x5b\x57\xea\x36\x5f\xba\x76\xe8\xd0\x46\x95\xf1\x54\x62\x6c\x44\xd8\x6c\x7a\x45\xe8\x3f\x52\xbf\x94\x0e\x91\x36\xca\xba\x85\x18\xaa\x8e\x5e\x9c\xbc\x7c\x41\x6a\x47\x18\x9d\x37\x73\xbc\x07\x7e\xc6\xbf\xe4\x31\x52\x32\x09\x3b\xa8\x04\xf2\x52\x30\xb6\x4c\xad\xd7\x69\x2b\x6f\x21\x0c\x2a\xaf\x62\x23\x26\xb1\xf1\x6e\x98\x37\xb4\x65\x75\x76\xc7\xbe\x0d\xb5\xb7\x5e\x6e\x19\xba\x27\x99\xfb\x8f\x91\x01\xae\x29\x71\x0b\xd7\x07\x66\xf0\x52\xa7\x09\x99\x5e\x99\x22\xa6\xe8\x8e\x87\xc1\x76\x3a\x2c\xa8\xab\x42\xb5\x75\x40\xfa\x03\x66\xe3\xde\x57\x08\x53\xf5\x40\x02\xe3\x12\xf2\x7f\x1f\x1f\xf5\xe5\x71\xa7\x51\x9e\x75\x91\x4f\xb1\x5d\x38\x2c\x49\xea\xd7\x2d\x81\xbb\x95\x17\xf4\xd6\xb9\x3e\xa0\x38\x48\x08\x30\x97\x57\x42\x51\x03\xb4\xf0\xbd\xd4\x1f\xf4\xf2\xd9\x54\x0f\x5a\x43\xdd\x7e\xe3\xdf\x04\xa4\x43\xf1\x5e\xc3\xb7\x22\x08\xa6\xf2\xcc\x39\x69\x89\xf8\x2b\xc1\xfc\xf8\x91\xd6\x87\x17\x9c\xf1\xa0\x38\xd9\xd9\x14\x44\xf2\xb0\x37\xf6\xe9\xa5\xf9\xa1\x6d\x47\x36\x9b\xd0\x0c\xb1\x12\x7d\xdc\x46\x87\xf3\x6b\x4c\x8c\xdb\xb5\xe0\x7f\x01\x00\x00\xff\xff\x68\xf8\x43\x71\xf3\x10\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

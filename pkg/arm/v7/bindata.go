// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xdf\x4f\x1b\xbb\x12\x7e\xae\xff\x8a\xe9\x86\x73\x38\x70\x71\x16\x68\x1f\xaa\xb4\xa9\x44\x29\x95\x90\xb8\xa5\x82\x5e\xf5\xa1\xad\x90\xb3\x9e\xdd\xb8\xd9\xb5\x7d\xed\x71\x02\xa5\xfb\xbf\x1f\x79\x77\x03\xf9\x05\x45\x2a\x0f\x21\x78\x3e\xcf\xd8\xdf\xf7\xd9\x1e\x7a\xcf\xd3\x91\xd2\xe9\x48\xf8\x31\x70\xbc\x66\x4c\xe5\xf0\x1c\x0a\x87\x16\xd2\xa9\x70\x69\xa9\x46\xa9\x34\xd9\x04\x1d\xa4\x48\x59\x9a\x7b\x12\xa3\xd7\x40\x63\xd4\x0c\xc0\xdf\x78\xc2\x2a\xa3\x12\x3c\x19\x0b\x2d\x90\x67\x25\x0a\x1d\x6c\x9f\x54\x85\xee\xb7\x28\x8f\x6e\xaa\x32\x7c\x08\xb7\x10\xaf\x26\xb9\xef\x5f\xe7\x1e\x78\x0e\xa9\xc4\x69\x2a\x95\x9f\xa4\xe2\x67\x70\x98\x3a\xf4\x26\xb8\x0c\xb9\x15\x8e\x0e\x18\x00\x66\x63\x03\xdb\x8f\xc3\x60\x6d\x8f\x10\xd3\x43\xe1\xec\xff\x83\x21\x01\xb0\x0f\xfb\xdb\xf0\xf6\xed\xfd\xd6\xe3\x32\x4c\xd0\xb4\x3a\x93\x01\x38\xf4\x64\x1c\x66\x46\x03\xbf\xd8\x10\xcf\x04\x41\x9b\xa9\x1d\x4a\xa5\xc0\xca\xe8\xfe\x0f\x6f\x34\xbc\x79\xb3\x7d\x72\xfe\x61\x9b\xdd\x32\x80\xa4\x34\x05\x97\x4e\x4d\xd1\x25\x03\x48\x7e\x98\xe0\xb4\x28\x65\xc2\x6a\x76\x72\xfe\x61\x85\x28\xe1\x68\x9d\xa9\xcd\x80\x15\x61\x72\xc5\x58\xb7\x6d\x1b\xca\x12\x6e\x6f\xa1\x7f\x6c\x74\xae\x8a\xfe\x69\x25\x0a\xf4\xfd\x8f\x46\x22\xd4\x35\xfc\xfd\xb6\xe1\x51\x47\xd4\xdf\x1b\x2d\x82\x94\xc9\x4d\x06\xb9\x93\x6c\x55\x08\x9f\x79\x75\x90\x96\x41\xef\xc3\xaf\x5f\x40\x2e\xe0\x83\x9a\x2d\x40\x57\x0a\xb6\x6a\x49\xcc\x45\x28\xc9\x3f\x49\xad\x38\xef\x61\xad\x9a\x68\xe4\x25\x37\x0e\xa4\x27\x50\x1a\x28\xb3\x7b\xaf\x5e\xbe\x7c\xf9\x1a\xa4\x61\xcf\xac\x33\x64\x86\x5b\xb7\xd2\xd3\x5f\x7f\xed\xed\xd6\xec\x99\x35\x8e\xda\x81\x5e\x6f\x77\xaf\x66\xcf\x94\x25\x31\x2a\xd1\x03\x3f\x82\xf3\xcb\xab\x0f\xa7\x17\x27\x5f\x8e\xce\xce\xae\x8e\xce\xce\xce\xbf\x00\xb7\xb0\xd5\x24\x01\x5e\x45\x75\x08\x81\xf3\xf6\xf7\xc7\x93\x2f\x71\x70\x1e\xe6\x32\xa6\x86\xad\xe6\x93\xff\x80\xa3\xe3\xe3\x93\x4f\x9f\x81\xcf\x98\x34\x1a\x19\x9b\xd7\xe1\x5e\x4c\xb1\x73\x96\xbf\xf1\x59\x23\x61\x3a\x8f\x32\xd6\x83\xd9\x18\x75\xeb\x04\xa5\x0b\xd0\x51\xd5\x99\x10\x05\x6a\x02\xa1\x25\x68\xa4\x99\x71\x13\x08\xa4\x4a\x45\x0a\x3d\x14\x06\x3d\x28\x4d\x06\x9c\xc8\x10\x32\xa3\xa5\x22\x65\x74\x9f\xf5\x40\xe5\x77\x93\x5d\xd0\x1e\x46\x98\x1b\x87\x20\xb5\x07\xe5\x61\xa2\xcd\x4c\x03\x99\x68\x80\xae\x12\x02\x6a\x09\xc1\xc2\x4c\xd1\x18\xb0\xb2\x74\x03\x9e\x9c\xd2\x05\x9b\x8d\x55\x89\xf0\xf5\x2b\x6c\xfd\x33\x36\x9e\xb4\xa8\x10\xb8\xdc\x81\xe1\x10\x92\x04\xbe\x7f\x8f\x9c\x83\x2f\x11\x2d\x1c\xc4\xef\x71\xdb\xed\x9c\xe7\xf0\xb8\x75\x2f\xe3\x6e\x83\x85\xba\x6e\x74\x83\x79\x96\x96\x3b\x8f\x04\xff\xb9\x66\x78\xdd\x70\x7b\x79\x74\xf9\xbf\x8b\xd3\xe1\xf6\x42\x96\xff\x0a\x4f\xe8\xba\x24\x6d\x1c\xea\x7a\xbb\x99\xc8\xaf\xe7\xc7\xc6\x05\x0d\x9c\x5b\xa7\xa6\xaa\xc4\x02\x25\x70\xee\x2a\xe0\x7c\x4e\x68\xdc\x13\xf0\x29\xa4\x83\x34\x7e\x1d\xfc\x04\x8e\x5d\xb5\x47\x97\xdc\x6a\x15\x2c\x0b\x3a\x16\x6c\x67\x30\x16\xac\x14\x84\x3c\x13\x9c\x5c\xf0\xc4\x98\x8f\x25\x15\x70\x87\x90\xf8\xde\x3f\xb0\x1b\x6f\x00\x74\x03\xd8\xe9\xef\xf6\xbe\x1d\x8c\x89\xac\x1f\xa4\xe9\x3d\xb9\x3b\xbd\xa4\x3d\xa5\xc6\xa9\x42\xe9\xb4\x6a\xb6\x99\x1a\x8b\xda\x8f\x55\x4e\xbc\x1d\xe8\x4f\xc2\x08\x5b\x1f\xfd\x79\x8d\x68\x82\xe6\x63\x31\x2b\xbb\xbd\xe5\xd1\x49\x1a\x61\xab\xff\x4e\x64\x93\x60\xdf\x95\x66\xf4\x31\x1a\x20\x49\xa0\xae\x59\x69\x8a\x02\x1d\x70\x82\x76\x4d\xbc\xe3\xa4\xef\xc7\x90\xdc\x79\x39\x1e\xe1\x29\xba\x1b\x30\x7a\xc1\x43\x3b\x49\x74\xbd\xa7\x28\x38\x14\x48\x8d\x19\x47\x4d\x15\x16\x05\xba\xc8\x97\x8f\x7c\xba\xcb\x08\x2b\x1b\xd7\xf1\x5e\xb9\xe1\x72\xac\x9b\x57\x4d\xa4\x72\xb0\xb5\x80\x63\x8f\xaf\x51\x9a\x99\x2e\x8d\x90\x71\x99\x6d\x8e\xe4\x89\xde\x3d\xa1\x4c\xb6\x9c\x3c\x60\xdf\x25\xfb\xad\x3b\xee\x1b\x83\xc6\x75\x6b\x42\x0f\xd6\x87\x36\x81\xb3\xd2\x04\x69\x9d\x99\x2a\x89\x2e\x1d\xa4\x57\x52\x90\x48\xaf\x4c\xb8\x4b\xbd\x48\xc3\x20\x35\x21\x5a\x3b\x86\x7e\xb3\x17\x88\x84\xb6\x5c\xb4\x99\xf8\xa8\x13\x7d\x18\x67\xae\xf8\xa0\xae\x3b\x90\x44\x4f\x4a\x8b\x78\x01\x0d\x63\xb1\x4e\x92\xbe\x1c\x75\x00\x91\x35\xb1\x39\xe3\x8f\xeb\xd2\xd5\x9f\x83\x51\xde\x9b\xe5\x70\xfe\x2e\x3c\x9e\xa1\x05\x45\x5d\xbd\x16\xd6\x8f\x0d\x3d\x55\xd9\xf6\x5a\x89\x9c\xfc\xb9\xb2\x91\xcb\xc1\xdd\xb7\xbb\xd0\xa2\x77\x07\xcb\x7f\xb5\x1a\x71\x84\x93\xcf\xc7\xef\x8f\x3f\x9f\x5d\x1d\x7d\x3a\x1d\x26\x2f\x92\x07\xa4\x5b\x5a\x6c\x83\x89\x59\x9a\xa6\xa2\xdb\xf6\x9c\xae\x25\x3f\xac\xa9\x13\xdd\xc3\xe3\xe1\x59\x3e\x57\x1a\x67\x1d\xa0\xb9\xf6\x17\x4e\x6f\x37\xac\xb4\x22\x25\x4a\x9e\x95\xa1\x71\x6a\xd2\x49\xb1\xdf\xfc\x0c\xe7\x37\xcf\xd2\xe8\xe0\xf0\xc5\xab\xfd\xbd\xc5\xa1\x83\x8d\xc0\x83\x75\xe0\xe1\x46\xe0\x61\x03\x4c\x36\x2f\x89\x93\x99\xa0\x6e\x68\xe1\xb9\x71\xbc\xe9\x57\x56\xa0\x42\x4e\xd1\x91\xf2\xc8\x2d\xa2\xe3\xc1\x95\x1e\x36\x5c\x9a\x4d\x19\xc6\xaa\xe9\x3a\x4b\xe9\xee\xca\x58\x73\x87\xb9\xd5\x3b\x2c\xf2\xb9\x74\x3d\x2d\xf5\x38\x2b\x79\x9f\x62\x70\x6c\x1e\xdc\xa4\xb9\xaa\xe3\x0b\x5e\xd7\x8c\x51\xd0\x28\xb9\x90\x15\x58\x67\xf2\x68\xf9\xfb\xb7\x23\x33\x9a\x9c\x29\xb9\x2d\x45\x7c\xa7\x7b\xa0\x0d\xe1\x00\x04\x99\x4a\x65\xfc\x1e\xd7\x74\x05\x99\x8b\xff\x71\x94\xc6\x58\x0f\x41\x93\x2a\xbb\x75\xc4\x1e\x22\x58\x76\xdf\xc0\xa2\x8e\x6d\xcc\xe6\x2c\x77\x1d\xef\x6a\xbf\xfb\x28\x3a\xb6\xb0\x3d\x90\xca\x8b\x51\xd9\xbc\x21\xfe\xc6\x97\xa6\x00\xaf\x74\xd6\xb4\x2b\x95\xd0\xa2\x40\xc0\xf8\xb0\xd0\x38\x42\x68\xec\x4c\x28\xc6\x30\x6f\xc5\x17\x0a\xb6\x79\x70\x9e\x65\xe3\x92\x8c\x5d\x0b\xff\x1b\x00\x00\xff\xff\x8f\xb1\x68\xdd\x78\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x41\x6f\xdb\x46\x13\xbd\xef\xaf\x78\x96\x3f\x44\x5f\x51\xac\x98\x5c\x9d\xd8\x40\x51\x24\x40\x2e\x0d\x60\xa3\xe8\x21\xc8\x61\x45\x0e\xc9\x8d\x96\x33\x9b\xdd\x59\x49\x8e\xa0\xff\x5e\x50\x94\x1a\xd5\x76\x95\x1b\x81\x79\xef\xcd\xce\x9b\x37\xbc\xbe\xaa\x96\x9e\xab\xa5\xcb\x3d\x2c\x6d\x8d\xf1\x2d\xae\xd0\x25\x8a\xa8\xd6\x2e\x55\xc1\x2f\xab\x46\xea\x15\x25\x54\xa4\x75\xd5\x66\x75\xcb\xb7\xd0\x9e\xd8\x00\xf9\x31\x2b\x0d\xb5\x06\x64\x95\x88\x09\x68\xeb\x40\x8e\x4b\x5c\xa8\x1f\x28\xfd\x14\x95\x29\xad\x7d\x4d\xff\x85\x3b\xab\x0f\xab\x36\x2f\xb6\x6d\x86\x6d\x51\x35\xb4\xae\x1a\x9f\x57\x95\xfb\x5e\x12\x55\x89\xb2\x94\x54\x93\x8d\x2e\xe9\x1b\x03\x50\xdd\x0b\xe6\x97\x61\x78\x36\x23\x46\x79\x74\x29\x7e\x2b\xa2\x0e\x78\x8d\xd7\x73\xdc\xdd\xfd\x18\x7d\x7c\x86\x14\xd6\xa7\x4c\x03\x24\xca\x2a\x89\x6a\x61\xd8\xfb\x67\xf5\xdd\xce\xc2\xb7\xa0\x6f\x58\xdc\x4b\x20\xcc\x3c\xb7\xc9\xcd\xb0\xdf\x1b\xa0\x76\x8a\xa9\xc9\x84\xae\x1a\x47\x83\xf0\xe2\x6b\x16\xc6\xbb\x77\xf3\xf7\x9f\x3e\xcc\xcd\xce\x00\xb3\x20\x9d\x6d\x92\x5f\x53\x9a\xdd\x60\xf6\x55\x4a\x62\x17\x9a\x99\xd9\x9b\xf7\x9f\x3e\x1c\x9a\x10\x37\x93\xe8\xb9\x9d\x2e\xe9\x73\x3f\x5f\x06\x3c\x59\x5f\xeb\x8d\x39\x9a\x13\x4b\x08\xd8\xed\xb0\xf8\x5d\xb8\xf5\xdd\xe2\xe3\xe0\x3a\xca\x8b\x3f\xa4\x21\xec\xf7\x78\x75\x77\x70\x9b\x47\xd4\x2b\x63\xae\xb1\xe9\x89\x27\x69\xcf\x1d\x78\x84\x6d\x9c\xeb\x88\x15\x8e\x1b\x30\xe9\x46\xd2\x0a\x45\x7d\xf0\xea\x29\xa3\x13\xca\xf0\xac\x82\xe4\x6a\x42\x2d\xdc\x78\xf5\xc2\x0b\x73\x3d\x7a\x77\x22\xa7\xc2\x19\x4b\x6a\x25\x11\x1a\xce\xf0\x19\x2b\x96\x0d\x43\x65\x0c\xe6\xb1\x13\x1d\x9c\x28\x11\x1b\xaf\x3d\x68\x88\xfa\x88\xac\xc9\x73\x67\x36\xbd\x0f\x84\xcf\x9f\xf1\xbf\xff\xf7\x92\x95\xdd\x40\xb0\xcd\x2f\xb8\xbd\xc5\x6c\x86\x2f\x5f\xde\xa2\x11\xe4\x40\x14\xf1\x66\xfc\x66\x32\x47\xce\x15\x2e\x7b\xf1\x30\x4e\x5b\x22\xf6\xfb\x91\x37\x7a\x3c\xa9\x98\x83\x48\x26\xc5\xaf\x5b\x43\xdb\x28\x49\xf1\xf0\xdb\xc3\x9f\xf7\x1f\x6f\xe7\x67\x2a\x7f\x49\x5a\x51\x3a\x8a\x4c\x75\xec\xf7\xf3\x03\xd1\x6e\x4f\x7b\x48\x85\x61\x6d\x4c\x7e\xed\x03\x75\xd4\xc0\xda\x34\xc0\xda\x93\xa1\xe3\x4c\xb0\x6b\x54\x37\xd5\xf8\x79\xf3\x1d\x96\x8e\xdd\x2e\x3e\x79\xda\x55\x89\xa6\xf0\xd8\x70\x62\x18\x53\x62\xe3\x94\x6c\xed\xac\xa6\x92\xd5\x5c\x8a\xb2\x16\xa6\xc6\xba\x66\x40\x4c\xd2\x8e\x8e\x49\x24\xce\xbd\x6f\xd5\xd6\xc2\x9a\x24\xd8\x18\x1c\xd3\x14\xd5\x90\xe9\x67\xac\x71\x99\xe7\xb9\x36\xd7\x60\x51\xba\x81\x53\x19\x7c\x6d\xff\x8d\x44\x9d\xc6\x3f\x59\x10\x89\x19\x85\xd5\x07\x0c\x2e\x2b\xa5\x31\x24\x25\x9a\x1f\x91\x27\x76\xcb\x40\x2f\xab\xfc\x73\x23\x4f\x2f\xe4\x22\x7a\x0a\x7d\xe3\xb3\x5b\x86\x31\xf0\x29\x3f\xe6\x20\x1d\xb2\xe7\xfa\x90\xc7\xc1\xb1\xeb\x08\xb4\xa6\xf4\xa8\xfd\x08\xd1\x3e\x49\xe9\x7a\x9c\xee\xf8\xac\xe1\xa4\x43\x27\x95\x17\x9f\x24\xf1\x59\xf9\xef\x00\x00\x00\xff\xff\x96\x86\xc0\x8e\xd0\x05\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

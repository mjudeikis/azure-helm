// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x7b\x73\x13\x39\x12\xff\xfb\xe6\x53\xf4\x4e\xb2\x04\x42\x34\x93\xf0\x38\xb6\xcc\x9a\xaa\x10\x0c\x97\xe3\x11\x9f\x03\x47\x5d\xb1\x14\x25\xcf\xc8\xb6\xf0\xcc\x68\x56\xd2\x38\x31\x81\xef\x7e\xdd\xd2\xf8\xed\x18\x42\x60\xff\xd8\xad\x25\x89\xa5\x56\xbf\xf5\xeb\x6e\x79\xeb\x97\xb8\x2b\x8b\xb8\xcb\xcd\x00\x98\x38\x0f\x82\x2d\x78\xaa\x34\x58\x61\xac\x2c\xfa\x0d\xc8\x54\x1f\x78\x91\x42\xaa\x55\x09\x3c\xcb\xc0\x6a\xde\xeb\xc9\x04\xec\x80\x5b\x38\x53\x55\x96\x82\x56\x95\x15\x30\x92\x1c\x17\x05\xe4\xdc\x58\xa1\xa1\xf5\xe2\x31\xf2\xea\xb4\x4e\x4f\xde\x74\x8e\x5a\xcf\x3a\x27\x6f\xda\xcd\x70\xac\x2a\xcd\xb4\x30\xf8\x2b\x11\xac\x8f\x07\xcb\x10\xa9\x4e\x4e\x3f\x3c\xfd\xcf\x93\x57\xcd\x50\x95\xa2\x30\x03\xd9\xb3\xd1\xf6\xc2\xc9\x48\x19\x9e\x8a\x51\x94\x64\xaa\x4a\xf1\x04\x9e\x91\xa5\xe5\xdd\x4c\x18\x60\xc7\x70\xfc\xaa\xfd\xe6\x35\x30\x03\xdb\x37\x53\xd9\x87\xdb\x66\xa0\xb4\x85\x70\xbb\xe6\x1b\xc2\x67\xb0\x5c\x66\xc0\x0e\x6e\x01\xfb\x08\x2f\x4e\x9e\x01\x63\x68\x19\x2b\xb5\xe8\xc9\x73\x08\x9f\xbf\x79\xdc\x02\x22\x85\x27\x9d\x93\x76\x23\xbc\x1e\x7f\xe2\x11\x04\x17\x17\x20\x7b\x10\x1d\xa9\xa2\x27\xfb\xd1\xa9\x48\x2a\x2d\xed\xb8\xcd\x6d\x32\x68\xf3\x64\xc8\xfb\xc8\xfb\xcb\x97\x00\xd5\xe8\xa3\xbb\x98\xad\x1d\xc7\x8c\xe5\xda\x56\x65\x84\x01\x09\x65\x81\x9f\xb2\x0c\x23\x01\x5a\xa4\x40\x2e\x4f\xd2\x02\x12\xc7\xb3\xd2\xdc\x4a\x55\x00\xfe\xbf\x7d\x73\xa0\x8c\x2d\x78\x2e\x6e\x85\x41\x82\x54\x8f\xe2\x11\xd7\x71\x26\xbb\xf1\xb8\xca\xe3\x24\x93\xa2\xb0\x2c\x11\xda\x46\xa5\xc8\xe1\xf7\xdf\x77\x5a\x27\x4f\x77\x48\xc5\x23\x5c\x3b\x34\x8f\xc7\x18\xf0\xa9\xae\xb4\x26\x31\xc6\x1c\x17\xa3\x5a\xd7\x8e\x28\x95\x91\x56\xe9\xb1\xdb\x46\x8b\x4f\xad\x26\xbd\xd0\x04\xe4\x75\xb9\xd0\xa1\x18\x2f\xcb\x6c\x6b\x39\x42\xde\xcf\xc5\xf8\x8a\x92\xf1\xc4\x8a\xe0\x2d\x78\x7d\xf2\xe4\xa4\x01\xa9\xc8\x04\x66\x21\x65\x60\x4f\x65\x99\x3a\x23\x1a\x23\x12\xe7\x22\xde\xa3\x94\xa4\xf4\x4d\xb2\x8a\xbc\x6c\x80\x6b\x01\xba\x2a\xe0\x4c\xda\x01\x70\x18\xe5\x20\x73\x94\xe6\x3f\x0f\x65\x32\x74\x71\x88\x34\x4a\x87\x2e\x1f\xa2\xf7\x65\xe1\xad\x84\x58\xd8\x84\x4c\x74\x9b\x26\x4a\xe3\x25\xf2\x89\xa9\xef\xf4\x40\x64\xec\x01\x33\x42\x8f\x30\xb0\xba\xcc\xcd\xfb\x80\x82\xd4\xec\x20\xbb\x7f\x21\xaf\x56\x81\xba\x94\x5a\x1a\x01\x2f\x64\x51\x9d\xc3\x03\x38\x75\xc4\x70\xb3\xd3\x7e\x69\x6e\x05\x78\x2f\x45\xa5\xb3\xe6\xc0\xda\xd2\x34\xe2\x18\xa3\x8f\x32\x52\x4c\x84\x28\x51\xe8\x63\x85\x0c\x0a\x1b\xa7\xd2\xd8\x98\xa4\xc5\x5e\x56\xfc\x20\x7e\xe0\x19\xc5\xdb\xc4\x82\xeb\x64\x10\x2b\x13\xf4\xcb\x3e\xc6\xa3\xd9\x93\x99\x40\x66\xce\x8e\x72\x28\x63\xd4\x8c\xe1\x56\x8c\x32\xd9\xb3\xf6\x33\xf6\xbc\xf5\x3f\xe6\xa5\xe0\xaf\x4c\x20\x83\xc0\x98\x2c\xe1\x94\x40\x4d\x77\x4a\x0f\x0c\x4a\xe7\x71\x4d\x55\x89\x92\x82\xec\xa8\x5c\xd8\x3d\xe5\x86\x1c\x9c\x91\x92\x42\x1b\x12\x27\x10\x05\xdd\xc3\xb4\x39\x16\x26\x58\x76\xa9\x38\x47\x38\x32\x57\xf3\x2c\x83\x96\x3b\xf5\x33\x5c\xec\xf5\xf9\x3b\x7a\x5a\x19\xc1\xee\x46\x07\x07\xeb\x7c\x7d\x82\xa8\x7d\x4a\xa8\x0d\x78\x8d\x11\x08\x0b\xf4\x72\x3b\xe3\xb6\xa7\x74\x0e\x74\xe8\xe7\x64\xb3\x88\x89\xf7\xdf\xc3\xd9\xfc\x53\xa5\x45\xa2\xb4\xa8\x5d\x3b\xfd\xbc\xe2\xb3\xb2\xae\x1d\x51\x2e\x13\xad\x8c\xea\x79\xdf\xa1\x04\x87\x46\xf1\xec\xe4\xbc\x04\x74\x43\x32\x10\xc9\xb0\x59\x28\x87\x9a\xdf\x5c\x76\x0e\x3b\x27\x84\xa2\xae\x76\x41\x55\xa6\x84\xcc\xf0\x0e\x41\xdc\xa3\xb0\xf9\xb7\x92\xc5\x57\x8a\x5c\xb8\x07\x21\xa2\xf5\xfb\x95\x42\x85\xf9\x01\xdc\x5a\x91\x97\x16\xc1\x15\x2e\x0e\xa2\xe8\xfe\x97\x87\x90\xaa\x00\x00\xed\x81\x5a\x0d\x60\x63\x60\x7f\xc2\xd5\x64\x3a\x91\x70\xe3\x06\x74\xb5\xe0\x43\x64\xb8\xd1\xe0\x77\x13\x35\xb6\x2f\xea\xbf\x50\xdd\xb5\xa6\xd7\x3a\xf9\xca\xdb\xc3\xa2\x2f\xb0\x1f\x01\xaa\xf4\xef\xde\xcd\x9d\x06\x96\x59\xb8\x0f\xef\xdf\x3f\xa4\x8a\x54\x80\xc9\x84\x28\xe1\xe0\x21\x88\x0c\x11\x49\x9c\x4b\x4b\x1f\x7a\x32\x48\x55\x21\xbe\x12\x0d\x2d\x72\x35\xba\x5a\x0b\x40\xde\x4b\x30\xc3\x0b\xaa\x79\x01\xde\x42\xa6\x7b\xb0\xb1\x25\xd8\x94\xaa\x17\x17\xa2\x48\xb1\xdc\x6e\xae\xb5\xae\x9b\x83\x04\xdd\x3d\x57\x72\xd1\x4e\x69\xa6\xf5\xd3\x2a\xc0\xce\x0f\xfe\xfb\xd2\xd7\x5a\x4c\x4b\x3a\xc3\xd3\x14\x58\x0f\xc3\x9e\x0c\x85\x0e\x02\x74\xe5\x2f\xc8\x0c\xdd\x35\xd5\xc9\x6f\xf9\xba\xdb\x43\xd7\x74\xbd\x57\xd1\xef\x66\x8c\xee\xca\x13\x9b\x81\xb1\xd8\xa0\x7a\x42\xe6\x4c\x47\xef\x59\x99\x23\xc7\xaf\x51\x11\xc8\xc8\x44\x5c\x46\x37\xb7\x9f\x0f\x7b\x26\x3a\xef\x19\x52\x37\xc6\x7e\x94\x90\x6a\xe8\x6f\x5c\x3c\xed\x6a\x4b\x8c\xdc\x01\x12\x8b\x64\xa0\x60\x67\x33\x19\xac\xd8\x08\xc4\x1e\xcd\x2f\xff\xac\x94\xe5\x00\xfb\xb0\xbf\x03\x8f\x1e\xcd\x4c\x27\x35\x54\x55\xd8\xe5\x93\xb8\x8e\xbc\xb1\x4d\xc2\xcb\x5f\x00\xeb\xac\xd9\xf7\x3d\x1a\x71\xf2\x4b\x71\xca\x31\xb5\x8a\xe8\xa3\xc1\x13\xd3\xfe\x0c\x09\x43\xea\x8d\x53\xec\xd2\x84\x0e\x1b\x10\x7e\x44\x8d\x0b\x9e\xa5\xe1\x1e\xed\xa1\x31\x84\x2b\x2c\x13\x7d\x9e\x8c\x11\x49\xfb\x08\xd7\x7a\x8c\x84\x56\x57\x22\xf0\x5d\xd9\xa2\x2f\xd1\xd4\x55\x67\xae\x27\x58\x8a\x1d\xde\x90\xa0\xf6\x4c\x59\x21\x14\x20\x08\x4c\x2e\xfe\xb1\x4b\xa1\xe8\x95\x4a\x85\xbb\xea\x8f\x9c\xab\x0b\xa2\xba\xb1\x36\x8b\xd0\xf0\x74\x5d\x0e\x4d\xa3\xba\x1c\x2b\x93\x18\x79\x10\x67\x55\xb1\x0f\x9f\x3f\x7b\xeb\x2e\x0b\xeb\x1c\xe9\x92\x40\x1f\xd0\x54\xf4\x78\x95\x59\xf3\x4d\x01\xa5\x73\x97\x87\xd3\xed\x92\x5f\x08\x3e\x53\xe3\xa0\xd3\x26\xe5\xde\x6f\xf7\xee\xdd\x73\xe0\xf9\x8f\x52\x2b\xab\x9a\xdb\x17\xb8\xf9\xeb\xaf\x7b\xbb\x5f\x70\x05\xe7\x15\xbf\xb0\xb5\xb5\xbb\x87\x0b\xb3\xe9\xe6\xd0\x4d\x5f\xc7\x9d\xd6\xdb\xc3\x17\x2f\x3e\xe0\xbf\x93\xb7\xc0\x4a\xd8\x76\x4c\x80\xe5\x14\x1d\xbc\xeb\x8c\xf9\xdf\xaf\x5a\x6f\x69\x71\xb2\xcd\x52\x62\x8d\x1f\xe9\x27\x8e\x3e\x87\x47\x47\xad\x36\x8e\x4a\x67\x35\xb0\x4d\xe4\x30\xc3\x47\xa2\x4e\x3e\x0c\xbc\x47\xaf\x78\xb2\x4b\xc8\x72\xe6\x60\x92\x32\x81\xc0\xa4\xa0\xa8\x9e\x71\x8c\x30\x3a\x86\xe6\xcf\x42\xd8\x33\xa5\x87\x50\x59\x99\x49\x2b\x51\xf3\xbe\x72\x70\x8c\x5a\x68\xac\xe0\x04\x88\xa9\x24\xe4\x89\x68\x78\xeb\x4d\x0f\x63\x8f\x8f\x00\x24\xd0\x59\x02\x52\xfc\x13\xe1\x68\x58\xa8\x33\xf4\x99\x72\x00\xe6\x25\x21\x26\xa3\x10\xc4\x2f\xd7\xfe\x13\x84\x8f\x51\x19\xaa\x36\xc1\xd9\x00\x41\xde\xa1\xfb\x14\x61\x81\xa5\xb7\xa0\xd9\x84\x30\x74\x08\x9f\xaa\x19\xbe\x7f\x03\x9e\x53\x22\x93\x8d\xab\xb9\x7c\xea\xa9\x30\x9d\x37\x17\xc7\xcd\x37\x62\xc6\xe5\x7a\xf5\xef\x9b\xa5\x5c\xb5\x0c\xfe\x73\xff\xb2\x3a\x68\x84\x85\xdb\xe7\x81\x38\x77\xf9\x74\x7a\x78\xfa\xa6\x73\xdc\xdc\x99\x13\xfe\xd2\xe9\x5e\xcb\xf6\xfb\xa8\xc1\x8e\x3b\xc8\xce\x27\x50\x41\x73\x1d\xc3\xe1\x5e\x8e\x50\xb1\x3e\x96\x1e\xc6\xa8\x06\xb2\x49\x12\x51\x1c\x81\x8d\x20\x6e\xc4\xf4\x67\xe3\x13\x30\x51\x4b\xdb\x6c\x69\xed\xb3\x00\x73\x4a\x4c\xf4\x0b\x02\xdf\x1b\xb0\x84\x33\xc4\x08\x63\x29\x9b\xdb\x18\xb2\x61\xd5\x15\x3e\xd1\x0d\x25\x5b\x85\x06\x67\x2a\xe1\x19\xf0\x52\xd6\x6d\x35\xea\x8d\xca\x49\x2c\xcf\x02\x42\xb3\x75\x13\x76\xfd\x7a\x03\x6e\x45\xbb\x5b\x7f\x1c\x4c\x9a\xbe\xb9\xe2\xbe\x15\x7a\x0c\x53\x5a\xf6\x65\x11\xfb\x60\xc6\xd3\x87\x13\xe6\x17\xa2\x99\xf0\xeb\xcb\xa0\x2b\xe2\x7e\xfc\x78\xae\x06\x27\x80\x6b\x33\xd5\x4a\xd9\xd8\xb1\x89\x6b\x3e\xd8\xb2\x30\x4a\xc6\x42\xc0\x76\xf4\x18\x9b\xc2\xaa\x7c\x9c\xa9\xee\x2b\xba\xbb\x61\xf8\xd5\x67\x97\x29\x0c\x11\xfa\xa2\xfc\xf1\x4a\x83\x85\x21\xc6\x53\x78\xe3\xa1\x8f\x89\x40\x38\xd2\x75\x52\x5c\xaf\xd5\xe9\x2d\xa2\x75\xbc\x1b\xd0\x75\x20\x3d\x9e\x48\xdd\x5c\xdc\xab\xcf\xe5\xc3\x54\x6a\xd8\x9e\xa3\xfb\x6e\x14\x69\x21\x5b\x6f\xf3\x35\x81\x64\x81\xd1\xcf\xc4\x92\x45\x41\x3f\x0e\x4e\x36\xea\x99\x62\x11\xc8\x14\x4f\xc9\x89\x3e\x08\xe1\x22\x7e\xac\x42\xc6\x1f\xa8\x13\xc1\xc6\xca\xfd\x6b\xac\x2e\xad\x23\x76\xcf\x97\x58\x39\x47\x32\xc5\x3b\xdb\x88\x3f\x20\x6e\xf0\xf8\x83\xaa\xa6\xac\xe7\x13\xa0\x11\xe3\x06\x62\x13\x6d\x7d\xcd\x67\x94\x4a\xde\x08\xcf\x89\x75\xeb\x74\x6f\xd2\xc9\xa5\x1b\x80\xf4\x9e\x28\x75\xaf\xbc\xae\x5f\x6f\x92\xb0\x3a\x19\xa3\xb4\x5b\x13\x70\xf7\x7c\xd6\x9c\xb8\x6a\xb3\x43\x6b\xf9\x13\x62\x0a\xe1\xe4\x9a\xdc\x99\x34\x33\xdf\x9b\xd3\x1e\xf7\xc9\xe6\x6b\xe6\xf4\x02\xa3\x9f\x99\xd3\x8b\x82\xfe\xa2\x9c\xf6\x5e\x76\x2f\x9f\x05\x2f\xcd\x40\xd9\x2b\xe5\x34\x65\x51\x63\xfa\xd7\x74\x6b\x1e\xaf\x1a\x8b\x9f\x7c\x76\x62\xf5\x6c\xbd\x3e\x7a\x72\xf4\x1a\x1b\xc8\xf6\x71\x33\xbc\x1b\x5e\x92\xb4\x8b\x4e\x21\x1a\xe2\xe2\x66\x80\x5a\xdf\x49\xa2\x2c\xdc\x84\x95\xbc\xa4\x7b\xc3\x08\x30\x17\xb1\xb4\x10\x67\x35\x81\xeb\xd2\xe6\x10\xbb\x5e\x96\x05\xb6\x88\x3c\x63\xf5\x2b\x30\x84\xb5\x0f\xf7\xdd\x7f\xd3\x37\x96\x85\xd5\xc6\x9d\xbb\xbf\xed\xef\xcd\x2f\x1d\xac\x25\x3c\x58\x25\xbc\xb3\x96\xf0\x8e\x23\x0c\xd7\xab\xc4\xac\x1a\x62\x16\x90\x39\x0c\xb3\x9c\xb9\xf1\x62\x89\x94\xa7\x23\x7a\x27\x37\x38\x44\x0a\x3c\x51\xe9\xcc\xc0\x9a\xd2\xe8\xc4\x04\x41\x3e\x5a\xf5\x52\xbc\xbb\xb4\xb6\xf2\x46\x30\xf5\xe7\x42\x49\x5a\x18\x49\x96\xf8\x7e\x4b\x66\x0a\xd7\x1f\x87\xae\x3c\x53\xc3\x4d\x8f\x0a\xb6\x2a\x44\x8a\x36\xe5\x80\xc8\x48\x4f\x78\x30\x6b\x66\xe8\x45\x50\xab\x8c\x95\x19\xa7\xdc\xdf\xa2\x46\x9d\x67\x46\x61\x61\xc7\x4e\x61\xf6\x6d\x91\xeb\xab\xa2\x91\xca\xaa\x1c\x87\x02\x4a\x0c\xf7\x0e\x81\x34\x75\xe7\x4f\x43\x98\x9f\xa8\x13\xea\xf7\x69\x28\xa8\x4b\x2e\x0e\x33\xfb\x0f\xee\xef\xd3\xcc\x33\x35\xa7\x86\xeb\x4b\xf8\x93\x1e\x7e\x08\x76\x2d\x02\x8e\x33\xf4\x25\x99\x91\x45\xe2\x06\x89\x9c\x17\xf4\x3d\x82\xa0\xbe\xc1\x0e\x88\xc4\x0e\xb4\xaa\xfa\x03\x98\xcc\xd1\xc1\x6c\xf4\xad\x87\xe9\x09\x97\xe9\x78\xbc\xf4\x12\xb1\xbc\x4d\xb8\x2a\xac\x6b\x51\x10\x71\x71\xce\x11\x23\xee\x10\xcc\x5d\x7d\x8b\xd1\x9a\xe3\x50\x15\x18\x8f\x21\xe4\xa9\x49\x27\x0c\x80\x7f\x32\x22\x59\xfa\x98\xe3\x04\xb5\x46\x01\xff\x8c\xf8\xdd\xc7\xfd\x70\x7f\xb5\xd3\x68\x5e\xa1\xac\x68\x20\xc6\xab\x5c\x26\x6c\x96\x10\x6e\x5a\x4b\x34\x7d\x5b\x99\x29\x55\x1a\x34\x0e\x07\xc2\xc9\x77\x8e\x38\xdb\x61\x2b\xb5\xa2\xfa\x5a\x2e\x53\x61\x3f\xe2\x7b\x3a\x93\x0c\x44\x5a\xb9\x7c\x98\x07\x1d\x2d\xba\xd8\x9a\x52\xf3\x9f\xa8\xbc\x74\x6f\x66\xeb\x1e\x15\xc3\xc0\x0c\x2a\x4b\x75\x93\x10\xda\x9f\xb9\x7d\x87\x9e\xdd\xb0\x02\xa0\xe8\x65\x67\x6e\xb4\x67\xfa\x54\x31\x7d\xb5\xfb\x7f\x00\x00\x00\xff\xff\x56\x00\x30\x67\xe3\x1d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x58\x6d\x6f\xdc\xc6\x11\xfe\xce\x5f\x31\xb9\x18\x56\x8c\x64\x49\xa9\x85\x2b\x40\xce\x19\x70\x53\x37\x4d\xd3\x54\x82\xd4\x17\x14\x82\x3f\xac\xc8\xe1\x71\x73\xe4\x2e\xbd\xbb\x3c\xe9\x2c\xfb\xbf\xf7\x99\xe5\xdd\xe9\x7a\x92\xcf\x51\x83\x7c\x31\x60\xc0\xe4\xed\xec\xbc\x3c\x33\xf3\xcc\x50\x5f\x7e\x51\x5c\x19\x5b\x5c\xe9\xd0\x90\xe2\x9b\x2c\xbb\xbd\x25\x53\x53\xfe\x9d\xb3\xb5\x99\xe5\x17\x5c\x0e\xde\xc4\xe5\x99\x8e\x65\x73\xa6\xcb\xb9\x9e\x71\xa0\x0f\x1f\xb2\xd6\xcd\x66\xec\x49\x45\xb2\xae\x62\x15\xa2\xf6\x71\xe8\x73\x68\x99\x18\x8b\xb7\xb6\x35\x76\x46\x9e\x2b\x6a\x74\xa4\xb2\xb2\x54\x26\x8d\x83\xd7\xd1\x38\x4b\xf8\xf7\xe4\xab\xc6\x85\x68\x75\xc7\xcf\x26\x59\x09\xa9\x97\xc5\x42\xfb\xa2\x35\x57\xc5\x72\xe8\x8a\xb2\x35\x6c\xa3\x2a\xd9\xc7\xbc\xe7\x8e\xbe\xfd\xf6\xe0\xf5\xe9\x9f\x0f\xc4\xc1\xef\xf0\xdb\xab\xf0\xc7\x65\x84\x2f\x6b\x4f\xe5\x37\x53\x1b\xe8\xe1\x90\xaf\x3c\x3d\xe7\xde\x05\x13\x9d\x5f\xa6\x63\x7a\x4f\x17\xd1\x8b\x5f\x08\x00\xba\x3e\x6e\x74\xce\xcb\x5d\x9b\x67\xde\x2c\xa0\xfb\x47\x5e\x3e\xd2\x32\x6e\xdc\x33\xfc\x25\xfd\xe3\xf4\x4f\xa7\x27\x54\x71\xcb\x91\x29\x36\x4c\xb5\x6b\x5b\x77\x2d\x32\x81\xcb\x04\x91\xae\x23\x10\x06\x92\x54\xb6\x43\xc0\x73\x20\xed\x99\xfc\x60\xe9\xda\xc4\x86\x34\x2d\x3a\x32\x1d\xac\x8d\xef\x73\x53\xce\x53\x1e\x72\x0f\xeb\x74\xa5\xe7\x40\xdf\xd8\x31\x4a\x2a\x38\x96\x12\x62\x3a\x0c\x79\x55\xec\x88\xaf\x43\xbd\xf4\x0d\xb7\xea\x58\x05\xf6\x0b\xf6\xca\xf7\x5d\x78\x93\x49\x92\xa6\xe7\x50\xf7\x17\xe8\x7a\x6d\xe1\x4b\xef\x4d\x60\xfa\x9b\xb1\xc3\x0d\x1d\xd3\x45\x12\xa6\xaf\xce\xcf\x7e\x0a\xcf\x32\x14\x13\x0f\xbe\x9d\x36\x31\xf6\xe1\xa4\x28\x90\x7d\xd8\xa8\x50\x08\x79\xe9\x80\xb1\x83\x02\x1b\x8b\xca\x84\x58\x88\xb5\x62\xb4\x55\x1c\x17\xc7\xa3\xa2\xe2\x89\xa8\xd0\xbe\x6c\x0a\x17\xb2\x59\x3f\x43\x3e\xa6\xb5\x69\x19\xca\x52\x1c\xfd\xdc\x14\xf0\x4c\xe1\xa8\x80\x4d\xf5\xfd\xd9\xf7\xea\xc7\xd7\xff\x51\xa3\x15\xfc\xd7\x32\x14\x64\x21\xb4\xa5\x96\x02\x9a\xa6\x5b\xbe\x09\xb0\xae\x8b\x95\xd4\xc0\xbd\x24\x39\x49\xa5\xb4\x8f\x92\x7b\x6a\xf0\x4e\x54\x1c\xda\x53\x38\x19\x5b\x7d\xd5\x72\x35\x5d\x72\xc8\x76\x21\xe5\x9b\xe8\x75\x78\x1c\xb2\x8a\x5e\xa7\x5b\xbf\x05\xc4\xa3\x3f\x9f\x23\xd2\x2e\xb0\xfa\x7d\x7e\x74\xf4\x10\xd6\xa7\x3d\xdb\x8b\xc6\xd4\x91\xd0\xc6\x51\x1b\x0b\x94\xcf\x5a\x1d\x6b\xe7\x3b\x92\x4b\xbf\x4d\x35\x73\x21\xba\x3f\x0f\xb0\xf5\xbb\xc1\x73\xe9\x3c\xaf\xa0\xdd\xbc\xdf\xc3\xac\x5f\x4d\x8e\xbc\x33\xa5\x77\xc1\xd5\x23\x76\xb0\x90\xd8\xa8\xb8\xbb\xb9\x6d\x01\x30\x94\x0d\x97\xf3\xa9\x75\x89\x35\x7f\xe1\xd0\x79\x75\x7e\x2a\x1c\x9a\xe6\x16\x0d\x7d\x25\xbc\x4c\x97\xa0\xf0\x91\x83\xc3\x5f\x9d\xb1\x9f\x18\x70\x93\x6f\x68\x02\xae\x7e\x73\x6f\x4c\xa1\x3a\x48\xc7\xc8\x5d\x1f\x41\xad\x74\x7b\x94\xe7\xcf\x3f\xbc\xa0\xca\x65\x44\x88\x86\x56\x6e\x90\x5a\x92\x7a\x4b\x8f\xb3\x99\x4c\xd2\xd3\xa7\x74\xe5\x59\xcf\xa1\x70\x4f\xb8\x97\x6b\x27\x9e\xdc\xae\x9e\xe0\xec\x83\x81\xaf\x3c\x1a\xa7\x6e\xad\x51\x6d\xd5\x04\xba\x31\xe3\x2f\x2f\xb7\x6e\x93\x6a\x23\x3d\xa7\x37\x6f\x5e\xc8\x34\xb2\x14\x5a\xe6\x9e\x8e\x5e\x10\xb7\x60\x23\xbe\x31\x51\x5e\x6a\x93\x55\xce\xf2\xde\x4c\x78\xee\xdc\xe2\x71\xc3\x5f\x90\x2b\x51\xdb\x56\xa6\x5d\x86\xfe\x53\xbe\xa6\xbd\xcb\xc0\xbe\x22\xbd\xbd\x65\x5b\x61\xd0\xee\x9f\xb2\x33\xef\x86\x9e\x4a\x40\xbd\x35\x6c\x11\xa5\x09\x9b\xc9\x19\x1d\xb9\xc1\xd3\xbf\x7e\x1a\xa7\x2c\x0a\x52\xee\xe8\xaa\x22\x55\x23\xe5\xe5\x9c\x7d\x96\x01\xc8\x2f\xa0\x0c\x60\x6d\x7c\x1a\x8f\xc6\x89\x5b\x03\x9a\xab\x11\x53\xa0\x1e\x96\x98\xe3\x5d\x19\x5b\x0a\xd1\xf5\x2b\x1d\x2a\x85\x0e\xf4\xa2\xe9\xa0\xf1\x53\x52\x42\x2f\xa6\xe4\x8f\xc9\x6d\x9d\x77\xf3\x3a\xe4\x37\x75\x10\x77\x8b\x8a\x17\xc2\x51\xf3\xb1\xd7\x40\x16\x01\xb1\x95\xac\x7a\x64\xee\x08\xc2\x5c\x36\x8e\x0e\xf6\x8b\xd1\xbd\x18\x49\xd4\x23\xfc\xfe\xed\xe0\xa2\x26\x3a\xa4\xc3\x03\x7a\xf9\xf2\x2e\x74\x71\xc3\x0d\x36\xee\xde\xc4\xef\xd0\x8d\x05\x09\x6d\x6f\x49\x9d\xdf\x3b\xbf\xbd\x55\x52\xa4\xfc\x96\xf2\x73\xd7\xb2\x74\x78\xed\xb5\xb4\x08\xae\x8e\x8b\x9b\x18\x19\xa5\x8b\x4a\xa3\xea\x6c\xfe\x73\x80\xb2\xcd\xd2\x06\xc1\x09\x0a\x55\x55\x58\xdd\xd8\x4f\x4e\x68\xf2\x33\x82\xb1\xba\xad\x26\xdf\xc8\x19\xe2\x14\xb2\x51\x2d\xcf\x74\xb9\x04\xbd\xce\xc0\xe1\x7e\x09\xc1\xe8\x07\xce\xc6\x55\x4d\xfc\x40\x3d\x8d\x76\xb7\x11\x07\x20\xf7\x21\x7f\x58\x60\x27\xc3\xe8\xa2\x6c\x85\x5f\x3f\x80\x2c\x40\x13\x6b\x6a\xf8\x21\x15\x5a\xfe\x77\x34\x55\x22\x83\x97\x29\x21\x56\xa4\x9e\x4a\x41\x5f\xa7\xde\x14\xd5\x52\xc3\xd2\x7b\x74\xad\x71\x05\x00\x6b\x38\x69\x39\x5e\x3b\x3f\xa7\x21\x9a\xd6\x44\x83\xf6\x9f\xb9\xc4\x01\x28\x65\x8f\x91\x21\x7d\x58\x19\x29\xf8\x1c\xca\x00\xef\xfa\x32\x96\x4a\xd4\x3d\x83\xde\x98\x2a\x3c\xa2\x0b\xe6\xd6\x5d\x5b\xc2\x45\xe9\x9b\xd1\x12\x27\x24\xd0\x36\x69\xdf\x14\xde\x58\xc2\x19\x21\xb8\xec\xba\x01\xb3\x24\x4a\xd9\x34\x36\xa9\xea\x19\x4d\xa7\x34\x99\x24\x5a\xa9\xdc\x1d\xa9\x7c\x92\x44\x04\x17\x89\xf0\x3e\x34\x17\xa3\x14\xd0\xd9\xcf\xc6\xfb\x01\xbe\xd3\xf2\x6b\x08\xf7\x17\xdb\x78\x2c\xef\xfe\xe1\xf0\x63\xc4\x1b\x38\xd2\xd7\x37\x19\xdf\xf4\x0e\xe5\x75\xf1\xea\xe2\x9f\xe7\x3f\x4c\x0f\xb6\x8c\xff\x1b\xf9\x67\xbf\xb2\x3d\x9e\xc3\x83\x83\x74\x51\xdd\xac\xeb\x4e\x3e\x22\x94\xc2\xaa\xb9\x80\x63\x33\xb0\x9d\x52\x42\xbb\x6a\x5d\x40\x92\x43\x52\x0b\x2a\x4e\x0a\x79\x3c\x79\x87\x8f\xc3\x95\xb5\xfd\x91\xae\x30\xcb\x50\x4f\xbc\xf6\x2f\xcb\xc6\x61\xa4\x4a\xad\xd0\x59\x21\x66\xfb\xba\x3b\x0e\x96\x2b\xa5\xab\x8e\x7a\xef\x64\x3b\x22\x87\x55\x2d\xc8\xaa\xa6\x64\xd9\xf2\xae\x55\x7d\xab\x01\x46\x6a\x4d\x41\xe9\x13\xb7\x24\x99\xdb\x7d\x2c\x7d\xc4\x18\x35\xc1\xa1\x61\x10\xfb\x46\x32\x6f\x5d\xa9\xdb\x7c\xe1\xda\xa1\x43\xdb\x54\xc6\x8f\x03\x02\x32\xab\xde\x10\xba\x1b\xa9\xae\x94\x8e\x90\xb6\xc9\xba\xb9\x08\xaa\x8e\x0e\x8f\x9f\x1f\x92\xda\x1a\x04\xce\x9b\x19\x3e\xae\x3f\xa2\x5f\xfc\x18\x29\x28\x4d\x4b\x50\x07\xea\x8f\x82\xb1\x65\x6a\xb5\x4e\x5b\xf9\xb4\x63\x50\xd7\x32\x36\x22\x12\x1b\xcc\x9f\x59\x43\x6b\x16\xcb\xee\xd8\x66\x45\x65\x6b\x2d\x1b\x46\xda\x19\x11\xbb\xc7\xf0\x00\x69\x4a\x5c\x82\xf4\x81\x09\x78\xa1\x53\x17\xa4\xef\xd0\x88\xd5\x64\x4b\xc3\x60\x3b\x1d\xe6\xd4\x55\xa1\x5a\x2b\x20\xfd\x0e\x0b\xc7\xce\x2b\x88\xb8\x7a\xc0\x81\x71\xb3\xfb\xbf\xaf\x8f\x7c\xfa\xb8\xdb\x08\xcf\xba\xc8\x27\x20\x09\x87\xcd\x53\xfd\x6f\x49\x20\xb7\xf2\x57\x8f\xd6\xb9\x3e\x20\x38\x50\x26\x30\x0f\x69\x0d\xc0\x7b\x7f\xdf\xf5\x07\xb5\x6c\x8c\xfd\xfa\x3f\x9c\x04\x6c\xbb\xd5\x90\xaa\x61\x6b\x3d\xc2\x9c\xbc\x72\x2e\x0a\x13\x63\x67\xee\xd3\x2a\xf3\xd0\xa6\x37\xc9\x42\x33\xc4\x4a\x48\x1b\xcd\x3c\xde\xf9\xfa\x77\xb2\x0d\xa1\x45\x60\x78\x17\xca\xbd\xd1\xd0\xfb\xf7\xe3\x10\xdc\x2c\x53\xff\x0d\x00\x00\xff\xff\xe7\x16\x12\xf9\x29\x12\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

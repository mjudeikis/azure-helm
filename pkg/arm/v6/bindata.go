// Code generated by go-bindata.
// sources:
// data/master-startup.sh
// data/node-startup.sh
// DO NOT EDIT!

package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\x6b\x73\xdb\xb6\xd2\xfe\xfc\xf2\x57\x6c\x69\xb7\x4e\x5c\x43\xb4\xd3\x76\xd2\x51\xab\xcc\x38\x8e\x9a\xd7\xa7\x69\xac\x23\x27\xd3\x39\x93\x66\x32\x10\x09\x49\xa8\x28\x82\x05\x40\xd9\xaa\x9b\xff\x7e\x9e\x05\x29\xd9\xba\xf8\x92\xc9\xe9\x97\x76\x1a\x5b\x02\x16\x8b\xbd\xef\xb3\xf0\xce\x17\xc9\x40\x17\xc9\x40\xba\x31\x09\x75\x19\x45\x3b\xf4\x93\xb1\xe4\x95\xf3\xba\x18\xb5\x29\x37\x23\x92\x45\x46\x99\x35\x25\xc9\x3c\x27\x6f\xe5\x70\xa8\x53\xf2\x63\xe9\xe9\xc2\x54\x79\x46\xd6\x54\x5e\xd1\x4c\x4b\x2c\x2a\x9a\x4a\xe7\x95\xa5\xee\xab\xe7\xe0\xd5\xef\x9e\x9f\xbd\xed\x9f\x74\x5f\xf6\xcf\xde\xf6\x3a\xf1\xdc\x54\x56\x58\xe5\xf0\x2b\x55\x62\x84\x83\x65\x0c\xaa\xb3\xf3\x0f\x3f\xfd\xfb\xc5\xeb\x4e\x6c\x4a\x55\xb8\xb1\x1e\xfa\xd6\xee\xca\xc9\x96\x71\x32\x53\xb3\x56\x9a\x9b\x2a\xc3\x09\x9c\xd1\xa5\x97\x83\x5c\x39\x12\xa7\x74\xfa\xba\xf7\xf6\x0d\x09\x47\xbb\x8f\x32\x3d\xa2\xaf\xdd\xd8\x58\x4f\xf1\x6e\xc3\x37\xa6\xbf\xc8\x4b\x9d\x93\x38\x7a\x4c\xe2\x77\x7a\x75\xf6\x92\x84\x80\x66\xa2\xb4\x6a\xa8\x2f\x29\xfe\xf9\xed\xf3\x2e\x31\x29\xbd\xe8\x9f\xf5\xda\xf1\xe7\xf1\x67\x1e\x51\x74\x75\x45\x7a\x48\xad\x13\x53\x0c\xf5\xa8\x75\xae\xd2\xca\x6a\x3f\xef\x49\x9f\x8e\x7b\x32\x9d\xc8\x11\x78\x7f\xfc\x18\x41\x8c\x11\xcc\x25\x7c\x63\x38\xe1\xbc\xb4\xbe\x2a\x5b\x70\x48\xac\x0b\x7c\xcb\x73\x78\x82\xac\xca\x88\x4d\x9e\x66\x05\xa5\x81\x67\x65\xa5\xd7\xa6\x20\xfc\xbf\xfb\x68\x6c\x9c\x2f\xe4\x54\x3d\x8e\xa3\x14\x54\xcf\x92\x99\xb4\x49\xae\x07\xc9\xbc\x9a\x26\x69\xae\x55\xe1\x45\xaa\xac\x6f\x95\x6a\x4a\x3f\xfe\xb8\xd7\x3d\xfb\x69\x8f\x45\x3c\xc1\xda\xb1\x7b\x3e\x87\xc3\x97\xb2\xf2\x9a\x86\x8f\x25\x16\x5b\x8d\xac\x7d\x55\x1a\xa7\xbd\xb1\xf3\xb0\x0d\x8d\xcf\xbd\x65\xb9\xa0\x02\x78\xdd\x7e\xe9\x44\xcd\xd7\xef\xec\x59\x3d\x03\xef\x9f\xd5\xfc\x13\x6f\xc6\x89\x8d\x8b\x77\xe8\xcd\xd9\x8b\xb3\x36\x65\x2a\x57\x88\x42\x8e\xc0\xa1\xc9\x73\x73\xc1\x34\x4e\xa5\xc1\x44\x72\xc8\x21\xc9\xe1\x9b\xe6\x15\x5b\xd9\x91\xb4\x8a\x6c\x55\xd0\x85\xf6\x63\x92\x34\x9b\x92\x9e\xe2\xb6\xfa\xfb\x44\xa7\x93\xe0\x87\x96\xc5\xed\x34\x90\x13\x58\x5f\x17\xb5\x96\x94\x28\x9f\xb2\x8a\x61\xd3\xb5\xb2\x64\x8d\x7c\xa1\xea\x3b\x3b\x56\xb9\x78\x2a\x9c\xb2\x33\x38\xd6\x96\x53\xf7\x3e\x62\x27\x75\xfa\x60\xf7\xff\xe0\xd5\x2d\x20\x4b\x69\xb5\x53\xf4\x4a\x17\xd5\x25\x3d\xa5\xf3\x40\x4c\x8f\xfa\xbd\x5f\xdc\xe3\x08\x79\xa9\x2a\x9b\x77\xc6\xde\x97\xae\x9d\x24\xf0\x3e\xee\xc8\x10\x08\xad\xd4\xc0\xc6\x06\x0c\x0a\x9f\x64\xda\xf9\x84\x6f\x4b\xea\xbb\x92\xa7\xc9\xd3\x9a\x51\xb2\xcb\x2c\xa4\x4d\xc7\x89\x71\xd1\xa8\x1c\xc1\x1f\x9d\xa1\xce\x15\x98\x05\x3d\xca\x89\x4e\x20\x99\xc0\x56\x82\x3b\xc5\xcb\xde\x4b\xf1\x73\xf7\x3f\xa2\xbe\x05\xbf\x72\x05\x06\x91\x73\x79\x2a\x39\x80\x3a\xe1\x94\x1d\x3b\xdc\x2e\x93\x86\xaa\x52\x25\x3b\x39\x50\x05\xb7\xd7\x94\x77\xc4\xe0\x35\x29\x0b\x74\x47\xe0\x44\xaa\xe0\x3c\xcc\x3a\x73\xe5\xa2\x75\x93\xaa\x4b\x94\x23\xf7\x69\x96\x15\xd4\x0d\xa7\xfe\x0e\x13\xd7\xf2\xfc\x13\x2d\x6d\x9c\x12\xdf\xb4\x8e\x8e\xb6\xd9\xfa\x0c\x55\xfb\x9c\xab\x36\x21\x8d\x51\x08\x0b\x58\xb9\x97\x4b\x3f\x34\x76\x4a\x7c\xe8\xef\x89\x66\x95\x30\xef\x7f\x82\xb1\xb9\x8e\x3d\xb8\x11\x1c\xf7\xcf\xb8\xae\x85\x6e\x42\x55\x99\x71\xad\xa4\x77\x28\xab\x75\x5d\x74\xff\x32\xba\xb8\xa7\xed\xc4\x07\x14\xa3\x7e\xbe\xdf\x68\x1d\xf0\x18\x49\xef\xd5\xb4\xf4\x28\x77\x74\x75\xd4\x6a\x7d\xf7\xf1\x07\xca\x4c\x44\x04\x1d\xa8\x11\x83\xc4\x9c\xc4\x1f\xf4\x69\x77\x86\x2b\xe9\xab\xaf\x68\x60\x95\x9c\x80\xe1\x9d\x0a\xbf\x5b\x88\xb1\x7b\xd5\x7c\x82\xb8\x5b\x55\x6f\x64\xaa\x7b\xe1\x10\x6d\x58\x01\x21\x10\xf7\xde\x77\xef\x6e\x9c\x26\x91\x7b\xfa\x8e\xde\xbf\xff\x81\x7b\x44\x41\x2e\x57\xaa\xa4\xa3\x1f\x48\xe5\xa8\x11\xea\x52\x7b\xfe\x32\xd4\x51\x66\x0a\x75\x8f\x37\xac\x9a\x9a\xd9\xa7\x35\x65\xb6\x5e\x8a\x98\x2b\xb8\x0b\x45\xc8\x0b\x61\x87\x74\x67\x93\xbe\x2b\x78\xae\xae\x54\x91\xa1\x01\x46\xd0\xf2\x0b\x1a\xa1\xeb\x5c\x93\x67\x26\x9d\x40\xf2\x10\xcf\x43\x48\x3d\xa8\x15\x86\x49\xdc\x1c\x9a\x4c\x53\x9f\x93\xf3\x40\x73\x35\xa1\x08\x52\x41\x31\xaf\xa7\xca\xde\x4b\xc5\x19\xa9\x53\x75\x1b\xdd\x8d\xfd\xe9\x64\xe8\x5a\x97\x43\x00\x28\x28\x0a\xf0\xc6\x69\x3d\x49\xe4\x9f\x95\x55\xc9\x12\x02\x96\x30\xea\x11\x88\x55\x3a\x36\xb4\x77\x37\x19\x6d\xe8\x48\xcc\x1e\xea\x97\x7f\x54\xc6\x4b\xa2\x43\x3a\xdc\xa3\x67\xcf\xae\x55\x67\x31\x4c\x55\xf8\xf5\x93\x58\x07\x6f\x60\x0a\x05\xaf\x91\xe8\x6f\xd9\xaf\x01\x0d\x73\xaa\x97\x92\x4c\xc2\xeb\x45\xeb\x77\x87\x13\x4b\x30\x03\xc2\x98\x81\x64\x06\x48\xa3\x6c\xdc\xa6\xf8\x77\x48\x5c\xc8\x3c\x8b\x0f\x78\x0f\xca\x70\x9a\x8b\x5c\x8d\x64\x3a\x47\xd9\x19\xa1\xb6\xd9\x39\x08\xbd\xad\x54\x54\x43\x98\x55\x5b\x42\xd5\x4d\x63\x6e\x27\x58\xf3\x1d\x82\x37\x6a\x2c\x53\x56\xc8\x52\xe4\xe7\x22\x27\x4f\x19\xdb\xb8\xd6\x6b\x93\xa9\x90\x85\xcf\x82\xa9\x0b\xa6\xfa\x6a\x6b\x14\x41\xf1\x6c\x5b\x0c\x2d\xbd\xba\xee\x2b\x97\x3a\x7d\x94\xe4\x55\x71\x48\x7f\xfd\x55\x6b\x77\x9b\x5b\x6f\x90\xae\x5d\x58\x3b\x34\x53\x43\x59\xe5\xde\x3d\xc8\xa1\x7c\xee\x76\x77\x86\x5d\xb6\x0b\x57\xb6\xcc\x85\xaa\xe6\xd3\xf2\xe0\xfb\x6f\xbf\xfd\x36\xd4\xb5\xff\x2b\xad\xf1\xa6\xb3\x7b\x85\xcd\x2f\xbf\x3c\xd8\xff\x88\x15\x80\xfb\x7a\x61\x67\x67\xff\x00\x0b\xd7\xa3\xc0\x71\x18\x55\x4e\xfb\xdd\x5f\x8f\x5f\xbd\xfa\x80\x7f\x67\xbf\x92\x28\x69\x37\x30\x21\x31\x65\xef\x00\x84\x0a\x51\xff\x7e\xdd\xfd\x95\x17\x17\xdb\x22\x63\xd6\xf8\xca\x3f\x31\x27\x1c\x9f\x9c\x74\x7b\x98\x2b\x2e\x9a\x9a\xb3\xb8\x47\x38\x39\x53\x4d\xf0\xc1\xf1\x75\x61\x49\x16\xbb\x3c\xa2\x5d\x84\x0a\xc6\x91\xc0\x55\xa8\x60\xaf\x5e\x48\x78\x18\x86\xe1\x61\xad\x50\xfe\xc2\xd8\x09\x55\x5e\xe7\xda\x6b\x48\x3e\x32\xa1\x52\x42\x0a\x8b\x76\xc7\xb5\x2a\xd3\x5c\xa7\x5a\x3c\xe9\x0c\x97\x87\x01\x88\x1d\x0d\x14\x8c\xa5\x28\xc3\x47\xed\x68\x52\x98\x0b\xd8\xcc\x04\x64\x5d\xdf\x84\x72\x89\x4b\xaa\xb2\xc6\xca\x5c\x5d\xe7\x10\x86\x1b\x41\x74\x31\x46\xfd\x0d\x85\x77\x59\xfc\x48\x64\x8f\xa9\xd3\xa1\x38\x0e\xc5\x37\x33\xd7\xa5\xb7\x56\xbb\x3e\xf3\x05\xdd\x1d\xba\xe7\x75\xfd\x45\xf4\x36\xfd\xa8\xe1\x52\xdb\xce\x29\x4f\x5f\x5f\x46\xea\x32\xd8\xf6\xfc\xf8\xfc\x6d\xff\xb4\xb3\x77\x83\xcb\x2f\xa1\x8a\x37\x4c\xea\x7d\xb0\xda\x0b\x07\xc5\xe5\x22\x6d\x78\x20\x10\x98\x0a\xf5\x0c\x22\x8d\x50\xdc\x85\xe0\x52\x2d\x16\x06\x65\x9d\x48\xcc\x28\x69\x27\xfc\xb1\xfd\x27\x66\xe6\xe6\xb6\x3b\x45\xa6\xa6\x7b\x44\xb0\xaf\x5a\xc8\x17\x45\x75\x0b\x13\xa9\x14\xc8\x17\xe7\xd9\xb3\x3d\x04\xe8\xa4\x1a\xa8\xda\xe9\x8e\x0d\x5f\xa1\x3f\xe5\x26\x95\x39\xc9\x52\x37\x78\x0c\x72\x43\x38\x8d\x2e\xa2\x28\x76\x3b\x8f\x68\xbf\x5e\x6f\xd3\xe3\xd6\xfe\xce\x6f\x47\x0b\x84\x75\xa3\x07\xed\xc4\x75\x3e\x1b\xab\x47\x98\xf8\xeb\xb6\x96\x2c\x27\x6e\x51\x2f\xb4\xae\x2f\xff\xfc\x3b\x38\x5c\xc2\x8f\xff\x3d\x57\x07\xe8\xf8\xd9\x4c\xad\x31\x3e\x09\x6c\x92\x86\x0f\x3a\xab\xe0\x84\x28\x14\xed\xb6\x9e\x03\xbb\x54\xe5\xf3\xdc\x0c\x5e\x73\x1c\xc7\xf1\xbd\xf3\xfa\x32\x25\xb9\x12\xe1\xfe\xf9\x06\x0e\x80\x8b\x71\x0a\x71\x4b\x23\x04\x02\xe7\xd4\x20\xdc\x12\x20\x41\x7f\xb8\x5a\xb9\x92\xfd\x88\xc1\x0b\xcb\xf1\x42\xdb\xce\xea\x5e\x73\x6e\x3a\xc9\xb4\xa5\xdd\x1b\x74\xf7\x80\x97\x0c\xf9\x9c\x1b\x99\xb1\x98\x35\x8f\xf8\x81\x29\xd8\xc5\xb5\xb5\x4d\x6e\xc9\xc2\x95\x2c\xda\x4c\x9c\xdf\x40\xcf\xc9\xb3\x11\x85\xed\xcd\xa5\x6d\xc4\xe1\xf5\x07\xb5\x74\xa6\x33\x44\x6e\x3b\xf9\x80\xec\x91\xc9\x07\x53\x2d\x59\xdf\x34\x43\x3b\xc1\x06\x32\x94\xb7\xee\xd1\x85\xd8\xa0\xb5\x2d\x6a\x4e\x62\xd0\x38\xbd\xc3\x27\xd7\xe2\x00\xf4\x35\x51\x16\x1e\xc9\x02\xde\xeb\xf0\x65\x8d\x4b\x5a\xd9\xa0\x21\x90\xe1\xf5\xa1\xb3\xb0\xf8\xdd\x7e\x69\xee\x5f\x10\x33\x8a\x5d\x04\xcb\x93\x45\x7b\xbb\x0f\x96\x32\x51\x78\xf7\x28\x64\xe9\xc6\xc6\x3f\xd4\xb3\x75\x75\x64\x9b\x7c\xbe\x67\xd9\x96\xed\xe5\xa7\xe5\xd6\xcd\xd8\x6d\xaf\x7e\xab\x7d\x84\x4a\xda\x7d\x73\xf2\xe2\xe4\x0d\x1a\x6b\xef\xb4\x13\x7f\x13\xdf\xe2\xba\x15\x61\x03\x0d\x73\x09\xd8\xa8\x51\x7b\x61\xae\x95\x78\xd8\xf0\x0e\x47\x8f\xe0\xe4\x59\xcd\xab\x42\x5d\x34\x04\xa1\x7b\xdd\xc8\xde\x66\x59\x17\x68\x9d\x32\x17\xcd\x53\x12\xc5\x8d\x2b\x0e\xc3\x7f\xcb\xe1\x76\x65\xb5\xfd\xe4\x9b\xef\x0f\x0f\x6e\x2e\x1d\x6d\x25\x3c\xda\x24\x7c\xb2\x95\xf0\x49\x20\x8c\xb7\x8b\x24\xbc\x99\x00\x20\xb0\x3a\x02\xbd\x5c\x04\xd8\xb5\x46\x2a\xb3\x19\x3f\xb6\x61\xac\x2f\x15\x4e\x60\x2c\x77\xb4\xa5\x4c\x86\x6b\xa2\x68\x3a\xdb\xb4\x52\xb2\xbf\xb6\xb6\x31\xd6\x2c\xed\xb9\x52\x9e\x56\xa0\xda\x1a\xdf\x87\x04\xb8\x0a\xb8\x21\x0e\xa5\x9a\x81\x08\xcf\x41\xbe\x2a\x54\x06\x9d\xa6\x84\xfa\xc0\xef\x00\x74\xdd\xd8\xf8\x59\xc1\x9a\x5c\x94\xb9\x64\xb8\xb1\xc3\x00\x46\xe6\xce\xa0\xc8\xa3\x6b\x5c\x3f\x39\x87\x1e\xdb\x9a\x99\xbc\x9a\x02\x2c\x71\x60\xa4\x98\x54\x3d\x68\x1a\x44\xc4\xe0\xb4\x9e\x34\x52\xc6\x41\x0c\x96\x9a\xf2\x0b\x90\x77\xf8\xf4\xbb\x43\xc6\x82\x4b\x75\x9a\xa2\x75\x0b\x7f\x96\xa3\x1e\x0e\x42\xbb\x00\xcc\xe3\x97\x76\xa7\x8b\x34\x00\xac\xa9\x2c\xf8\x31\x52\x71\x0f\xf1\x63\x26\xf1\x63\x6b\xaa\xd1\x98\x16\xf3\x45\x74\x3d\x12\x34\x43\xc6\x82\xcb\x72\x6c\x58\x9b\xd0\xd6\xb7\x21\x41\x61\xbc\x6a\x63\xe2\x37\x53\x9d\x8a\x6b\x8b\x05\x98\x97\x5a\xfe\x9b\x40\x6e\x4c\xe9\x08\x88\x5b\xe7\x8b\x97\x7d\x80\x42\xf4\x9d\x6b\xe6\xf5\x4b\xc6\x76\x2e\x5b\x65\xe1\x01\xe6\x4e\x6a\xcc\x24\x0f\x7c\x3d\x67\x17\x3a\xfe\x8b\xc2\xa2\xf1\xa2\x3a\xa9\x01\xda\x3a\x6c\xe6\x57\xc6\x1c\x0c\x25\x57\xf7\x3d\x3a\xd4\x47\x99\xcd\xcd\xac\x07\x04\x4b\xcd\xb4\x0c\xcf\xcb\xdb\x5e\x20\xf8\xb5\xc1\x8d\x2b\xcf\x95\x7b\x79\x3f\x4c\x7b\x81\xf1\x6e\x39\xa8\xff\x37\x00\x00\xff\xff\x38\xd1\xf9\x7b\x68\x19\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x57\x5d\x6f\x13\xc9\x12\x7d\x9f\x5f\x51\x18\x44\x40\x97\x9e\x49\x74\x85\x22\x05\x1c\x89\xcb\xcd\xe5\xb2\xec\x6e\xa2\x64\x57\xab\x55\x94\x87\xf6\x4c\xd9\xd3\x78\xa6\x7b\xe8\xee\xf1\x07\x86\xff\xbe\xa7\x66\xec\x24\x24\xc1\x90\x07\x5e\x90\x22\xc5\x76\x57\xd7\xf7\x39\x55\xfd\xf0\x41\x36\x32\x36\x1b\xe9\x50\x92\xe2\x45\x92\xac\x56\x64\xc6\x94\xbe\x76\x76\x6c\x26\xe9\x19\xe7\xad\x37\x71\x79\xa2\x63\x5e\x9e\xe8\x7c\xaa\x27\x1c\xe8\xf3\xe7\xa4\x72\x93\x09\x7b\x52\x91\xac\x2b\x58\x85\xa8\x7d\x6c\x9b\x14\x5a\x06\xc6\xe2\x5b\x55\x19\x3b\x21\xcf\x05\x95\x3a\x52\x5e\x58\xca\x3b\x8d\xad\xd7\xd1\x38\x4b\xf8\x7b\xf4\xa4\x74\x21\x5a\x5d\xf3\xd3\x41\x92\x43\xea\x30\x9b\x69\x9f\x55\x66\x94\x2d\xdb\x3a\xcb\x2b\xc3\x36\xaa\x9c\x7d\x4c\x1b\xae\xe9\xe5\xcb\x9d\xa3\xe3\xff\xed\x88\x83\xaf\xf1\xdb\xab\xf0\x9f\x65\x84\x2f\x1b\x4f\xe5\x37\x33\x36\xd0\xc3\x21\x5d\x7b\x7a\xca\x8d\x0b\x26\x3a\xbf\xec\x8e\xe9\x13\x9d\x45\x2f\x7e\x21\x00\xe8\xfa\xba\xd1\x29\x2f\x6f\xda\x3c\xf1\x66\x06\xdd\xef\x78\x79\x4f\xcb\xb8\x71\xcb\xf0\x43\xfa\xe3\xf8\xbf\xc7\x07\x54\x70\xc5\x91\x29\x96\x4c\x63\x57\x55\x6e\x2e\x32\x81\xf3\x2e\x45\x7a\x1c\x91\x61\x64\x92\xf2\xaa\x0d\xf8\x1c\x48\x7b\x26\xdf\x5a\x9a\x9b\x58\x92\xa6\x59\x4d\xa6\x86\xb5\xfe\xfb\xd4\xe4\xd3\xae\x0e\xa9\x87\x75\x1a\xe9\x29\xb2\x6f\x6c\x1f\x25\x65\x1c\x73\x09\xb1\x3b\x0c\x69\x91\xdd\x10\xdf\x84\x7a\xee\x4b\xae\xd4\xbe\x0a\xec\x67\xec\x95\x6f\xea\x70\x91\x48\x91\x86\xa7\x50\xf7\x7f\xe8\x3a\xb2\xf0\xa5\xf1\x26\x30\xfd\x6a\x6c\xbb\xa0\x7d\x3a\xeb\x84\xe9\xc9\xe9\xc9\x6f\xe1\x69\x82\x66\xe2\xd6\x57\xc3\x32\xc6\x26\x1c\x64\x19\xaa\x0f\x1b\x05\x1a\x21\xcd\x1d\x72\xec\xa0\xc0\xc6\xac\x30\x21\x66\x62\x2d\xeb\x6d\x65\xfb\xd9\x7e\xaf\x28\x7b\x24\x2a\xb4\xcf\xcb\xcc\x85\x64\xd2\x4c\x50\x8f\xe1\xd8\x54\x0c\x65\x5d\x1c\xcd\xd4\x64\xf0\x4c\xe1\x28\x83\x4d\xf5\xe6\xe4\x8d\x7a\x77\xf4\xb7\xea\xad\xe0\x5f\xc5\x50\x90\x84\x50\xe5\x5a\x1a\x68\xd8\xdd\xf2\x65\x80\x75\x9d\xad\xa5\x5a\x6e\xa4\xc8\x9d\x54\x57\xf6\x5e\x72\x4b\x0f\x5e\x89\x8a\x43\x5b\x1a\x27\x61\xab\x47\x15\x17\xc3\x25\x87\xe4\x66\x4a\x79\x11\xbd\x0e\xf7\xcb\xac\xa2\xa3\xee\xd6\x8f\x48\x71\xef\xcf\xcf\x98\x69\x17\x58\xfd\x3b\xdd\xdb\xbb\x2b\xd7\xc7\x0d\xdb\xb3\xd2\x8c\x23\x01\xc6\x51\x1b\x8b\x2c\x9f\x54\x3a\x8e\x9d\xaf\x49\x2e\xfd\x98\x6e\xe6\x4c\x74\xff\x0c\xc9\x16\x1e\xfb\xce\x31\xf0\xea\xf4\x58\x58\xad\x9b\x24\xd4\x36\x85\x30\x25\x9d\x83\x54\x7b\x56\x0c\xbf\x38\x63\xbf\x31\x72\x06\xcf\x68\x00\xf6\xbc\xb8\x35\x38\x50\x2f\xd2\x31\x72\xdd\x44\x90\x1d\xad\xf6\xd2\xf4\xf9\xe7\x17\x54\xb8\x84\x08\x11\xd0\xda\x0d\x52\x4b\x52\x1f\xe8\x7e\x36\x3b\x93\xf4\xf8\x31\x8d\x3c\xeb\x29\x14\x6e\x09\xf7\x7c\xe3\xc4\xa3\xd5\xfa\x13\x9c\xbd\x33\xf0\xb5\x47\xfd\x1c\x1c\x6b\xd4\xbf\x18\x40\x37\xa6\xee\xf9\xf9\xb5\xdb\xa4\xaa\x48\xcf\xe9\xe2\xe2\x85\xcc\x07\x4b\xa1\x62\x6e\x68\xef\x05\x71\x05\x7e\xe0\x85\x89\xf2\x65\x6c\x92\xc2\x59\xde\x5a\x09\xcf\xb5\x9b\xdd\x6f\x1c\x4b\xe6\x72\x74\x9b\x95\xf9\x93\x00\x11\xca\x8f\x69\xeb\x78\xde\xd6\x36\xab\x15\xdb\x02\xa3\x2f\x41\x8c\x0f\x68\x82\x79\x73\x25\x5e\xb8\x7c\x0a\xbf\xbb\x4e\x1e\xc3\xeb\x51\x1f\x2e\x12\x12\x96\x18\x7a\x75\x1e\x2b\x0a\xd1\x35\xd4\x0b\xaa\xce\x2b\x04\x16\x4d\xcd\xfe\x9b\x52\x82\x45\x93\xf3\xd7\xe4\xae\x9d\xd7\xd3\x71\x48\x17\xe3\x40\x0a\x81\x16\x3c\x13\x40\x4f\x33\xfd\xb1\xf5\x0c\x64\x05\xd7\xfa\x9c\x55\x83\xa4\xee\x41\x98\xf3\xd2\xd1\xce\x76\x31\xba\x15\x23\x89\x7a\x84\xdf\x7c\x68\x5d\xd4\x44\xbb\xb4\xbb\x43\x87\x87\x57\xa1\x8b\x1b\xae\xb5\xf1\xe6\x4d\xfc\x0e\xdd\xd8\x26\x18\x55\x23\x75\x7a\xeb\x7c\xb5\x52\xd2\x3f\xfc\x81\xd2\x53\x57\xb1\x80\x6f\xec\xb5\x74\x2f\xae\xf6\x5b\x8e\x18\xe9\xa5\xb3\x42\xa3\x21\x6c\xfa\x3e\x40\xd9\xe5\x86\x03\xc1\x01\x7a\x48\x15\xd8\x73\xd8\x0f\x0e\x68\xf0\x1e\xc1\x58\x5d\x15\x83\x67\x72\x86\x38\x05\xfb\xaa\xe2\x89\xce\x97\xe0\xa2\x09\x08\xcf\x2f\x21\x18\x7d\xcb\x49\xbf\xd7\x88\x1f\x28\x75\x6f\xf7\x7a\xc6\x91\x90\xdb\x29\xbf\x5b\xe0\x46\x85\xd1\xe0\xc9\x3a\x7f\x4d\x0b\x1c\x03\xc1\x1b\xd4\xbe\x95\xdd\x27\xa4\xbf\xa3\xdf\x3b\x9c\x1e\x76\x05\xb1\x22\xf5\x38\xc1\x8e\x35\xef\x60\x23\xaa\xa5\xf9\x05\x16\x34\xd7\xb8\x82\x04\x6b\x38\x69\x39\xce\x9d\x9f\x52\x1b\x4d\x65\xa2\x01\x32\x27\xae\x83\x67\x74\xe4\xc1\xaf\x02\x91\xc2\x08\x3c\x52\x28\x43\x7a\x37\x97\xb1\x81\x05\x1a\x31\x98\x87\xa9\xc0\x47\x13\x68\x6a\xdd\xdc\x12\x2e\xca\x2a\xd7\x5b\xe2\x2e\x13\x6d\xd3\x2f\x67\x02\xe9\x25\x9c\x11\xee\x49\xe6\x25\x40\xdf\xa1\xfd\x12\x73\xa4\x8a\xa7\x34\x1c\xd2\x60\xd0\x21\xbe\x70\x57\x78\xef\xf1\xdd\xdf\x79\x40\xdb\x73\x71\xd6\xc3\x1e\xe9\x58\x53\xe0\x5a\x4b\x4f\x12\x81\x23\xfd\x6b\x91\xf0\xa2\x71\x48\xf7\xd9\xab\xb3\x3f\x4f\xdf\x0e\x77\xae\x69\xf9\x0b\xf9\x60\xbf\x56\xd2\x9f\x43\xd5\x4e\x77\x51\x2d\x36\x75\x90\x0d\x54\x29\xec\x29\x33\xb8\x34\x01\xa7\x28\x25\x0c\xa1\x36\x09\x95\x98\x48\xcd\x28\x3b\xc8\xe4\xe3\xc1\x47\xbc\x2c\xd6\xd6\xb6\xba\x4c\x6b\xd2\x4a\x90\x5f\xde\xf8\x97\x24\x3d\x6f\xaa\x5c\x2b\x74\x5a\x88\xc9\xb6\x6e\x8f\xad\xe5\x42\xe9\xa2\xa6\xc6\x3b\x19\xad\xe4\x30\xe7\x83\xcc\x79\x25\x93\xda\xbb\x4a\x35\x95\x46\x2e\xba\x56\x15\x26\xfd\xc6\x2d\x29\xe6\xf5\xbe\x96\xbe\x62\xb0\x62\x70\x68\x20\xc4\x7e\x29\x99\x56\x2e\xd7\x55\x3a\x73\x55\x5b\xa3\x8d\x0a\xe3\x29\xc7\xd8\x88\x90\x59\xf7\x8a\xc0\xbf\x87\x7e\x2e\x1d\x22\x6d\x94\xd4\x53\x11\x54\x35\xed\xee\x3f\xdf\x25\x75\x8d\x18\x9d\x37\x13\xbc\xcc\xbe\xa2\x5f\xfc\xe8\x21\xd9\x11\x3b\xa0\x04\xf0\x52\x30\x36\xef\x5a\xaf\xd6\x56\xde\x05\x0c\x28\x2f\x63\x29\x22\xb1\xf4\xae\x9d\x94\xb4\x41\x75\x72\x85\xbe\x35\xb4\x37\x5a\x2e\x11\x7a\x83\x32\x6f\x1e\xc3\x03\xeb\x22\x1f\x60\xfc\xba\xda\xe4\xea\xcb\x9c\x21\x78\x79\x53\x56\xce\x35\x81\xc0\x69\xa6\x82\x53\xf2\x8a\x11\xb8\xa0\xc6\x57\xca\xfb\xa5\xe2\x6e\x2d\x77\xfa\x22\x5c\xb1\x55\x1a\xf0\xff\xce\x67\xac\x94\x10\xab\x38\x5f\xb2\x04\x5a\x99\x47\xce\x49\xce\xe2\x17\x8c\xf2\xe9\x13\xad\xb6\x6f\x00\xfd\x45\x51\x72\x6d\x94\x0a\x27\x60\x4d\x6c\xba\x77\xde\x5d\xeb\x80\x8c\xfe\x50\xb6\xb1\x10\x02\xd9\x58\x87\xf2\x39\x28\xf5\x72\x6e\xfe\x13\x00\x00\xff\xff\x93\xe0\xdc\x12\xa6\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

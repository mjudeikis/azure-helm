// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5f\x57\x1b\x37\x16\x7f\xae\x3e\xc5\xed\x98\x36\x4d\x8a\x66\x20\x6d\x77\x5b\xb7\xe4\x1c\x02\xa4\x87\x2d\x05\x16\x92\xed\x43\x9a\x93\x23\x8f\xee\xd8\x8a\x35\xd2\x54\xd2\xd8\xb8\x8e\xbf\xfb\x9e\xab\x19\x1b\x1b\x1b\x48\x1a\xda\x3c\x10\x5b\xba\xba\x7f\x7f\xba\x7f\xe4\xce\xe7\x59\x4f\x99\xac\x27\xfc\x00\x38\x5e\x31\xd6\x81\x17\xd6\x41\x40\x1f\x94\xe9\x77\x41\xdb\x3e\x08\x23\x41\x3a\x5b\x81\xd0\x1a\x82\x13\x45\xa1\x72\x08\x03\x11\x60\x6c\x6b\x2d\xc1\xd9\x3a\x20\x8c\x94\x80\x30\x40\x28\x85\x0f\xe8\xe0\xe8\xe4\x39\xeb\xc0\xc5\xd1\xe5\xd9\xab\x8b\x83\xa3\x9f\x2f\xce\x5e\x9d\xef\x25\x13\x5b\x3b\xee\xd0\xdb\xda\xe5\xc8\xfb\xce\xd6\x55\xc2\x3a\x70\x76\xf9\xf6\xc5\x7f\x0f\x4f\xf7\x12\x5b\xa1\xf1\x03\x55\x84\x74\x6b\xe5\x64\x6a\xbd\x90\x38\x4a\x73\x6d\x6b\x99\xb0\x0e\xeb\x80\xaa\x82\xe8\x69\xf4\xc0\x8f\xe1\xf8\xf4\xfc\xd5\x4b\xe0\x1e\xb6\xbe\x92\xaa\x0f\x5f\xfb\x81\x75\x01\x92\xad\x96\x6f\x02\xef\x21\x08\xa5\x81\xef\x3e\x06\xfe\x0e\x4e\xce\x7e\x06\xce\xb5\xed\xf3\xca\x61\xa1\xae\x20\xf9\xe5\xd5\xf3\x23\x20\x52\x38\xbc\x38\x3b\xef\x26\x9f\xc6\x9f\x78\x30\x36\x9d\x82\x2a\x20\x3d\xb0\xa6\x50\xfd\xf4\x12\xf3\xda\xa9\x30\x39\x17\x21\x1f\x9c\x8b\x7c\x28\xfa\xe8\x61\x36\x63\xda\xf6\xfb\xe8\x80\x87\xd6\x71\xdc\x07\xe1\x42\x5d\xa5\x7e\x00\x89\x32\x3e\x08\xad\x95\xe9\x83\x43\x09\xe4\xf2\x5c\x1a\xc8\x23\xcf\xda\x89\xa0\xac\x01\x6b\x60\xeb\xab\x81\xf5\xc1\x88\x12\x1f\x27\x2c\x17\x01\x9e\x65\x23\xe1\x32\xad\x7a\xd9\xa4\x2e\xb3\x5c\x2b\x34\x81\xe7\xe8\x42\x5a\x61\x09\x3f\xfd\xf4\xe8\xe8\xec\xc5\x23\x52\xf1\x00\x5d\xd8\xf7\xcf\x27\x01\xfd\x42\x57\x5a\x53\x85\xca\x45\x40\x9f\xb6\xba\x5e\x60\x65\xbd\x0a\xd6\x4d\xe2\x36\xbc\x87\xcb\xe0\x48\xaf\xd9\x8c\x1d\x9d\xbd\xb8\x5d\xe8\x10\x27\x37\x65\x9e\x3b\x35\x12\x01\x7f\xc1\xc9\x47\x4a\xfe\x05\x27\x6b\x82\x3f\xd8\x81\xfb\x17\x67\xe0\xdb\x28\x40\x5d\x49\x92\x01\xaf\xa7\xd3\x96\x9f\xff\x8f\x55\xe6\x9e\x70\x25\xdb\x90\xc0\x6c\xf6\x66\xcd\xe5\x85\x75\x20\x42\xc0\xb2\x0a\xa0\x0c\x4c\x77\xd3\xf4\xbb\xd9\x8f\x20\x2d\x03\x98\xd4\x25\xb4\x6a\x00\x9f\x00\xff\x03\x3e\x4e\x66\x14\x09\x5f\x7e\x09\x3d\x87\x62\xc8\x00\xee\x34\xf8\xf5\x5c\x8d\xad\x69\xfb\x69\xf6\x66\xb3\xe9\xad\x4e\x0d\x86\x0a\xa1\x34\xca\x84\x01\x61\xf6\xf5\xeb\xa5\xd3\xc0\x75\x80\xef\xe0\xcd\x9b\x1f\xe9\x76\x1b\xf0\x1a\xb1\x82\xdd\x1f\x01\xb5\x47\xc0\x2b\x15\xe8\x4b\xa1\x98\xb4\x06\xef\x89\x86\xc3\xd2\x8e\x3e\x0e\xcc\xe4\xbd\x5c\xa3\x30\x94\x7c\x98\x2b\x81\xbb\x02\xee\x04\xf7\x1d\x20\x64\xd3\x29\x1a\x39\x9b\x51\x96\xcb\x1d\x8a\x80\x24\x3d\x08\x65\xd0\x41\x55\x6b\x4d\x5e\x72\x18\x58\x39\x94\xca\x01\xaf\xae\x99\x59\xa7\xfa\xca\x64\xa9\xb4\xf9\x10\xdd\x0d\xb8\xaf\x6e\x66\x8d\x45\xe9\x3b\x6f\xcd\x32\xec\xd3\x43\x74\x6a\x84\x32\x3d\xb0\x65\x4f\x19\x94\xc7\xa5\xe8\xe3\x79\xad\xf5\x65\x94\x3a\x07\xc2\x1a\xc4\xb5\xa1\xdc\x73\x8b\x34\xc8\x9c\xb5\x21\x23\x93\x5e\x9e\x1d\x9e\x75\x41\xa2\xc6\x80\x31\x15\x17\x56\x6b\x3b\x26\x4e\x31\xd5\x36\x36\x93\x97\x45\x41\x29\x5a\x05\x50\x1e\x7a\x62\x88\x12\x94\x09\x16\x6c\xed\xe0\x7f\xbf\x82\x22\xbd\x3c\x8b\x67\x84\x94\xc0\x0b\x68\xcd\x66\xaa\x80\xcf\xa1\xef\x70\xc9\x33\x73\x35\x30\xe4\x59\xe1\x83\xe8\x35\x40\x61\x00\x7e\xe2\x03\x96\x79\xd0\xe0\x83\xad\x5a\x1e\x3c\x46\xb3\xae\xd2\xa0\x4a\x74\xf7\x52\x79\x74\x23\x95\xe3\x6d\x74\x4b\xfb\xe5\xb0\xf0\xe9\x55\xe1\x49\xdd\x4c\xe2\x28\x93\xca\x0f\x33\xf1\x67\xed\x30\x5b\x94\x9c\x4a\xb8\xb0\xcb\x00\x30\x1f\x58\x78\x74\x37\x19\xac\xd9\x08\xc4\x1e\xfa\xae\xfa\xa3\xb6\x41\x00\xec\xc0\xce\x23\x78\xf6\xec\xda\x74\x52\xc3\xd6\x26\xdc\x3c\xc9\x00\x1c\xfa\x60\x1d\xe6\xd6\x00\xbf\xd8\xb0\xdf\x20\x8a\x38\xb5\x28\x92\x02\x4b\x6b\x6e\xa0\x88\x01\x24\x54\xb8\x24\x21\xc9\x25\x5d\x48\xde\xd9\xda\x19\xa1\x65\xb2\x4d\x7b\x52\x79\xaa\x5a\x5c\x63\x5f\xe4\x13\xee\xb0\xaf\x7c\x70\x93\xa4\x0b\xc1\xd5\xc8\x1a\x3c\xad\xfa\x52\xb8\xb0\xee\xcc\xcd\x04\x37\x62\x57\x28\xc6\x5a\xcf\xc4\xcb\x43\x18\x6f\x73\x59\x84\xb6\x4f\x4f\xad\xc4\x98\xbd\x9e\x45\x57\x1b\xa2\xfa\x72\x23\x8a\x30\xe4\x72\x13\x86\x16\x51\xbd\x19\x2b\x9f\x7b\xb5\x9b\xe9\xda\xec\xc0\xfb\xf7\x8d\x75\xb7\x85\x75\x89\xf4\x86\xc0\x26\xa0\x12\x0b\x51\xeb\xe0\x3f\x28\xa0\x74\xee\xf6\x70\xc6\x5d\xf2\x4b\x07\x44\x9e\x63\x45\x4d\x14\x7c\xff\xed\xb7\xdf\x00\x95\x08\xba\x93\x42\x96\xca\x7b\xba\x84\x94\x7a\x9c\xd5\x9a\x3c\x69\x1d\x48\x1f\x6b\x47\xc8\xab\xed\x78\xa0\xfd\xf0\x6d\x2c\x23\x9f\x55\xce\x06\xbb\xb7\x35\x95\x3e\x7c\xf1\xc5\xf6\x93\x19\xfb\xac\xb2\x2e\x34\x0b\x9d\xce\x93\xed\x19\xfb\xec\xba\x63\xd9\x8f\x1d\xd5\xf1\xc5\xd1\x6f\xfb\x27\x27\x6f\xf7\x4f\x4e\xce\x7e\xa3\x64\xb6\x15\x99\x00\x2f\x29\xa8\x01\x81\xf3\xe6\xff\xd3\xa3\xdf\x68\x71\xbe\xcd\x25\xb1\x86\xad\xf8\x97\xbf\x83\xfd\x83\x83\xa3\xf3\x97\xc0\xc7\x6d\x8a\x9f\xcb\xe1\x5e\x8c\xb0\xc5\xac\x9f\xf8\x26\xeb\x65\xf3\xdd\x7b\x4a\x01\x01\x86\x7c\xb3\x8e\x99\xcb\x86\x0a\x66\xb3\xbb\xeb\xea\xdd\xc8\xbb\xe6\xf2\x69\xa5\xf3\x83\xa5\x7c\x6c\x05\xfd\xd7\xce\x6d\x25\x94\xba\xdb\xd3\xb3\x97\x47\x5d\x38\x36\x50\xd4\xa1\x76\xb8\x0d\xa5\x1d\x61\xd3\x73\x2b\x53\x58\x57\xb6\xd5\xb2\x0e\x5e\x49\x04\x5b\x00\x9a\x91\x72\xd6\x94\x68\x02\x8c\x84\x53\x4d\x10\x3a\xcc\x63\x80\xaf\xaf\x18\x5e\xc5\x70\x5e\xee\x5f\xbe\xba\x38\xde\x7b\xb4\x64\xca\xaf\xd1\x13\xad\x25\xcd\x3e\xcc\x66\x8f\xe2\x41\x1e\x07\x02\x57\x9b\x08\xdd\xd6\x59\xc0\xb9\x32\x2a\x40\xb0\xd0\xb3\x36\xf8\xe0\x44\x05\x87\xa7\x97\xe0\x31\xd4\xd5\x3c\x23\xd0\x21\xce\x2b\xa7\x46\x4a\x63\x1f\x25\x70\x4e\xd5\x9b\x1b\x0c\x63\xeb\x86\x40\x35\x1e\xf8\x08\xb2\x6e\x46\x1f\xbb\x7f\x02\xc7\x56\xbd\xbb\x1d\xbd\xaa\x45\xd4\x0f\x9b\x24\x35\x67\x5d\x0a\x23\x28\xcc\xc1\x42\xa5\xf2\x21\xd4\x15\x18\x1c\x37\x12\x3d\x06\xba\x93\x3e\x5e\xb5\x01\x82\x1c\x34\x2d\x02\x8b\x63\xd0\x75\xda\x9b\xf3\x3c\x6d\x78\xfe\xda\xb0\x64\x1d\x62\x10\x0f\x46\xd8\x53\xc1\xd0\xa3\x94\xa0\xcf\xe2\xc2\x2a\x39\x25\xa1\x8a\xba\x39\x74\xa9\xcc\x7e\xf8\x81\x37\xa5\x9b\x4b\xe3\x53\x3f\x20\xd5\xc7\x11\x10\x24\x89\x2e\x83\xa1\x74\x39\x16\xa2\x4f\x41\xa4\xa9\x6b\x6e\x51\x1d\x94\x56\x41\xa1\x87\xbe\x8d\xad\x5b\xb0\xe0\x44\x1e\xdb\x17\xa9\x08\x0a\x29\x8d\x2c\xc5\xe2\xb0\xab\x8d\x87\x1e\x16\xd6\x21\x48\xe3\xa9\xce\x0f\x8d\x1d\x1b\xf2\x09\x69\xdf\x48\x42\x40\x23\xc9\x3d\x63\x15\x06\x40\x60\x9d\x80\x8f\xad\x07\x1b\x0f\x94\xc6\x88\xe3\x45\x37\x06\x5c\x3e\x86\xbd\x3d\x48\x92\x88\x65\x69\xaf\x7b\xc1\x06\xb8\xff\x50\xe4\x59\x6d\x28\x08\xcd\x09\xc6\x9a\x7e\x96\xe7\x82\x07\x57\xfb\x08\x88\x36\xc8\x64\x59\x1f\x0d\x8e\x44\xbc\xf8\xb4\xe2\x83\xc8\x87\x20\x3c\x78\x4b\x6d\x90\x8f\xce\x58\xed\x40\x95\x07\x2d\x94\xa4\xbb\x05\xbd\x09\xeb\xac\x40\x7f\xd1\x2e\x6e\x37\x27\xb5\xf5\x04\xb4\x81\x8a\x2e\x6e\x9d\x7b\x0b\x71\x69\x1d\xb2\x0e\xa9\xe2\xa1\x70\xb6\x5c\xa1\xad\x9c\xcd\xd1\x7b\x8a\xc9\x58\x51\x23\x3a\x50\x15\xf1\x6b\xf4\x67\x8d\x1a\x1e\xc1\x0f\x9a\x91\xbb\xa6\x56\x39\x47\x10\x20\xc5\x04\xac\xd1\x13\xb2\xa6\xc2\xa6\xc8\x48\x9b\x7b\x96\xd5\xde\x65\xda\xe6\x42\x47\x6c\x8b\x3f\x3d\xe6\xb2\x35\x96\x1a\xca\x9e\xf0\xa8\x95\xa1\xb8\xc2\xf9\xee\xe1\xbd\xf4\xde\x16\x61\x2c\xdc\x07\xd3\xe7\x5a\x94\x62\x34\xa7\x66\x1d\x40\x43\x49\x29\x02\xbb\xb9\x5c\xab\x51\x69\xbb\x0f\xcf\xae\x6f\x61\x6d\x4a\xe1\x87\x50\x4a\x2f\xe7\xcd\x09\x34\x72\x56\xbf\x96\xd6\x5c\xaf\x14\xba\x46\x13\x16\xdf\x97\xd8\xb5\x0a\x3c\x14\xbb\xc6\x88\x4f\xe3\xc6\x3a\x70\xae\x0c\x0c\xeb\x1e\x36\x9e\x8b\x28\xaa\x3d\x42\xf4\x2c\x88\x4a\x71\xa2\x45\xc7\x3c\x5d\x25\x05\xdc\x21\x24\xbe\xf3\x15\x3c\x69\xd6\xbb\xf0\x38\x7d\xd2\xf9\x7d\x77\x10\x42\xe5\xbb\x59\xb6\x34\x3e\x75\x92\x26\x4d\xb5\x13\x43\x53\xf3\x32\xea\x40\x4c\x7a\x2d\xf1\xc1\x18\x2f\x5e\x6f\x78\xb3\xf0\xa0\x32\x28\x63\xc5\x3f\x0f\xcf\xd5\xcb\x07\x70\x47\x9c\xc2\x22\x9b\x76\xfe\x63\x6c\x3a\xe5\x94\x93\x0d\xc2\x56\xfa\x5c\xe4\xc3\xba\x7a\xae\x6d\xef\x94\x52\x69\x92\xdc\xfb\xf6\xb3\xa8\x0a\xd4\x65\x8e\xd0\x4d\xd6\x66\x63\xca\x74\x81\x12\x30\xf4\xdb\xa2\xd4\x8b\x52\xe2\x98\x7c\x51\xac\x76\xa5\xd9\x13\x46\xed\x08\xe9\x71\xa8\xdc\xde\xea\x5e\x7b\xae\x19\x7b\xb7\x96\xe8\xfe\x72\x17\x77\x14\x72\xd9\xd8\xfc\x89\x8d\xdc\x0a\xa3\xbf\xb3\x97\x5b\x15\xf4\x70\xed\xdc\x9d\x7a\x4a\x3b\x36\xda\x0a\x49\x4e\x6c\x82\x90\xac\x96\xd1\xf5\xca\xf9\x3b\x83\x58\x3d\xd7\xee\x5f\x77\x7d\x69\x13\x71\x7c\x43\xad\x9c\x1d\x29\x89\x2e\xeb\x66\x6f\xa5\x08\x22\x7b\x4b\xe5\xae\xa5\x5e\x06\x40\x37\xb3\x35\x95\x68\xda\xba\xcf\x67\x04\xa5\xc6\x88\x86\x13\xef\xb5\x70\xdf\xa3\x93\x37\x6e\xc0\x6c\xd6\x12\xc9\xf8\xd4\x1c\x6b\xef\x1e\x09\x6b\xc1\x98\xca\x5e\x4b\x20\xf2\xb8\x37\x77\xd5\xdd\x0e\x6d\xe5\xcf\x89\x29\x84\xf3\x6b\xf2\x74\x3e\xb4\xfd\x55\x4c\x37\x9d\x32\xd9\xfc\x89\x98\x5e\x61\xf4\x77\x62\x7a\x55\xd0\x3f\x84\xe9\xc6\xcb\xb1\xae\x1b\x51\xf9\x81\x0d\x1f\x85\x69\x42\x51\x77\xf1\x69\xb1\xb5\x9c\xaf\xba\xab\xdf\x1a\x74\x72\x84\xa3\x97\x07\x87\x07\x2f\x4f\xde\xee\x9f\x1f\xef\x25\xdf\x24\xb7\x80\x76\xd5\x29\x44\x43\x5c\x62\x41\x6f\xf5\x9d\x03\x65\xe5\x26\xac\xe1\x92\xee\x0d\xa7\x84\xb9\x9a\x4b\x69\xd4\x68\x08\x62\xd3\xbc\x94\xb1\xdb\x65\x1a\x5b\x94\xd0\x3c\xd7\x75\xbc\xa3\x49\xeb\xc3\x9d\xf8\x6f\x6f\x5e\x5f\x56\x56\xbb\x4f\xbf\xf9\x7e\x67\x7b\x79\x69\x77\x23\xe1\xee\x3a\xe1\xd3\x8d\x84\x4f\x23\x61\xb2\x59\x25\x1e\xec\x10\x4d\x74\x0b\x2f\xac\xe3\xf1\x19\xe5\x06\xa9\x90\x23\x74\x41\x79\xe4\x15\xa2\xe3\xb5\xd3\x1e\x36\x94\xc6\x28\x86\xb1\x72\xb4\xee\xa5\xec\xc9\x8d\xb5\xb5\xe7\xdd\x85\x3f\x57\x4a\xd2\xca\xd3\xcb\x0d\xbe\x1f\x82\x4c\x8c\xe3\x4a\x12\xcb\x33\xcd\x3f\xb3\x19\x63\xa1\x36\x28\xb9\x90\x25\x35\xe2\x05\x8d\x3e\xd7\xcd\x4c\xfb\x4e\xc3\x2b\x2d\xe2\x78\x4e\x3d\xba\xd0\xde\x82\x41\x94\xd7\x74\x69\x6c\xd8\xd2\x91\xd5\x75\x89\x1e\x08\x18\xcd\x1b\xb3\x9c\x0f\x62\x57\x85\x87\xe6\xe5\x30\xa7\xf1\x8b\x66\xb4\xf9\x4b\x73\x09\x3b\xff\xfe\x6e\x67\xd3\x8b\xf3\x2d\xfc\x49\x8f\xe6\xb1\x2f\xb6\x08\x7e\xe2\xb5\xed\x83\x57\x34\x13\x8c\xb1\x1d\x81\x01\xa9\x6f\x08\x03\x22\x09\x03\x67\xeb\xfe\x00\xe6\xef\x85\x4b\x7d\x6c\xfb\x68\x38\xe7\xb2\xb1\xd3\xb5\xd5\xda\x36\xeb\x80\xb1\x01\xbb\x20\x82\x2d\x55\xce\xaf\x3d\x16\xa7\xcb\xdc\x09\x3f\x00\x6d\x6d\xe5\xa1\x36\x41\xe9\xf9\x2f\x83\xca\x43\x5d\xad\x77\xe5\x1b\xb9\x2c\x84\x3d\xc4\xaf\x69\x3e\x1f\xa0\xac\xa3\xc3\x96\x6f\xa5\xc3\x9e\xb5\xf1\x39\x23\xb7\x65\x15\x1f\xcf\x37\xfd\x60\x92\x30\x3f\xa8\x03\x15\x16\x4a\x61\xcd\x99\xaf\x9f\xb2\xe9\x94\x52\xe4\x6c\xb6\x36\x17\xdc\x69\xcf\xe2\xcd\x72\xfe\x8b\xc4\xff\x03\x00\x00\xff\xff\xa6\x51\xfe\xca\x88\x1d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x6f\xdb\xc8\x15\x7d\x9f\x5f\x71\x56\x5a\xc4\x5d\x6c\x28\x25\x05\xd2\x02\xce\x26\x40\x9a\x64\x81\x74\xd1\xb5\x61\x6f\xdb\x87\x20\x0f\x23\xce\x25\x35\xab\xe1\x5c\x66\x3e\x24\x2b\x8a\xfe\x7b\x71\x49\x2a\x96\x2d\x5b\x4e\x90\xbe\x49\xe4\x9d\xfb\x79\xee\x39\xc3\xf1\x0f\xd3\x99\xf5\xd3\x99\x8e\x73\x14\x74\xa5\xd4\x66\x03\x5b\x61\xf2\x9a\x7d\x65\xeb\xc9\x25\x95\x39\xd8\xb4\x3e\xd7\xa9\x9c\x9f\xeb\x72\xa1\x6b\x8a\xd8\x6e\x95\xe3\xba\xa6\x80\x22\xc1\xb3\xa1\x22\x26\x1d\x52\x6e\x27\x71\x8e\x91\xf5\x31\x69\xe7\xac\xaf\x11\xc8\x60\xae\x13\x4a\xe3\x51\x76\x1e\x73\xd0\xc9\xb2\x07\x7b\xfc\xf8\x97\x39\xc7\xe4\x75\x43\x3f\x8d\x54\xa9\x13\x5e\x4e\x97\x3a\x4c\x9d\x9d\x4d\xd7\xb9\x99\x96\xce\x92\x4f\x45\x49\x21\x4d\x5a\x6a\xf0\xcb\x2f\x27\x6f\xcf\x7e\x3d\x91\x04\x5f\x53\x48\xaf\xe2\x3f\xd6\x89\xe2\x97\x4c\xe5\x99\xad\x6c\xa9\x13\xc5\xc9\x90\xe9\x05\xb5\x1c\x6d\xe2\xb0\xee\x5e\xe3\x33\x2e\x53\x90\xbc\xb6\x5b\xf5\xf6\xec\xd7\xfb\x83\x2e\x68\x7d\x3b\xe6\x79\xb0\x4b\x9d\xe8\x37\x5a\x7f\x63\xe4\xdf\x68\x7d\x10\xf8\x2b\xdb\xf7\xea\xe2\x0c\x71\x98\x00\x72\x6b\x24\x02\xde\x6f\x36\x83\xb7\xf8\x4f\xb6\xfe\x81\x51\x8d\x1e\x63\x84\xed\xf6\xc3\x41\xc3\x2b\x0e\xd0\x29\x51\xd3\x26\x58\x8f\xcd\xd3\xc9\xe4\xd9\xf6\x39\x0c\x2b\x60\x9d\x1b\x0c\x69\xa0\x58\xa3\xf8\x88\x6f\x8b\xd9\x85\xc4\xa3\x47\x98\x05\xd2\x0b\x05\x1c\x29\xf7\xfd\x2e\x89\x1f\x37\xc3\xaf\xed\x87\xbb\x0b\x1f\x32\xea\xf1\x53\x69\xeb\xc8\x8c\x14\x04\xad\xef\xdf\xef\x9d\x46\xe1\x12\x9e\xe1\xc3\x87\xe7\x48\x73\xf2\x88\x8e\xa8\xc5\xd3\xe7\x20\x17\x09\x74\x65\x93\xfc\xa9\xac\x32\xec\xe9\xe8\x24\x02\x35\xbc\xfc\x36\x18\x4b\xe7\x4a\x47\xda\x43\x3b\xa7\x42\x83\x22\x54\x38\x0a\xeb\x23\xf0\x53\x9b\x0d\x79\xb3\xdd\x2a\x35\x46\x19\x48\x27\x92\xe8\x49\x5b\x4f\x01\x6d\x76\x4e\x7a\x14\x28\xa9\x66\x61\x6c\x40\xd1\x5e\x3b\xe3\x60\x6b\xeb\xa7\x13\xc3\xe5\x82\xc2\x2d\xa0\xdf\x7c\x39\xed\x2b\x9a\xfc\x19\xd9\xef\x03\x7e\xf2\x86\x82\x5d\x92\x99\xbc\xe6\x66\x66\x3d\x99\x77\x8d\xae\xe9\x3c\x3b\x77\xd9\x45\xdd\x81\xe0\x00\xdc\xce\xa3\x88\xf7\xa5\x82\x69\x60\x4e\x53\x29\xe9\x8f\xb3\x37\x67\xa7\x30\xe4\x28\x91\x8c\x0a\x15\x3b\xc7\x2b\xf1\x54\x07\xce\x6d\x5f\xb3\x74\x59\x57\x89\x02\x6c\x82\x8d\x98\xe9\x05\x19\x58\x9f\x18\x9c\x03\xfe\xf3\x2f\x58\xc9\x2b\xaa\xee\x8c\x36\x06\x45\x85\xa1\x6c\x65\x2b\xfc\x80\x3a\xd0\x5e\x67\x76\x69\x50\x2a\xa7\x55\x4c\x7a\xd6\xc3\x44\x01\x71\x1d\x13\x35\x65\x72\x88\x89\xdb\xc1\x47\xd1\x4d\x33\xb7\x93\x64\x1b\x0a\x0f\x5a\x45\x0a\x4b\x5b\xd2\x7d\x76\x7b\xef\x9b\x45\x15\x27\x57\x55\x94\x74\xa7\x86\x96\x53\x63\xe3\x62\xaa\x3f\xe5\x40\xd3\x40\x91\x73\x28\xa9\x68\x75\x48\x4f\x15\x40\xe5\x9c\x71\x72\xdc\x0c\x07\x35\x42\xdc\xa3\x0e\xed\xc7\xcc\x49\x03\x4f\xf0\xe4\x04\x2f\x5f\x5e\x97\x2e\x69\x70\xf6\xe9\xf6\x49\x05\x04\x8a\x89\x03\x95\xec\x51\x5c\x1c\xbc\xdf\x6c\x0a\xd9\x3b\xfa\x88\xc9\x05\x3b\x12\xd2\xaa\x82\x96\xad\x57\x40\x0f\x36\x09\x32\x00\xcc\x68\x6a\xd8\xdf\x02\x98\x02\x46\x8e\xeb\xc2\x08\xc8\xc2\xe8\x14\xa3\x3f\x39\x07\xaf\x9d\x19\x3d\x96\x77\xc6\x46\x3d\x73\x54\x38\xaa\x75\xb9\x2e\x02\xd5\x36\xa6\xb0\x1e\x9d\x22\x85\x4c\xaa\x87\x9a\xe4\x41\xde\xf4\x71\xf7\x3b\xae\x43\x3a\x6c\xf9\xdd\x06\xb7\x26\x5c\x59\xa5\x86\xfe\x75\x2b\x26\x9b\x30\xb0\x5d\xb7\x00\x71\xf2\x3b\x1b\xea\xf8\xed\x65\x37\x10\x2f\x56\x8f\x04\xd0\xab\x8e\x6e\xc4\xb5\x60\x58\xe8\x04\x2b\xad\x6b\xf2\x09\xda\x1b\x78\x4a\x2b\x0e\x0b\xe4\x64\x9d\x4d\x96\x22\x6a\xee\x68\x2d\x31\x82\x2e\xbb\xe5\x36\x56\x00\x3f\x51\x63\x69\xef\xee\x70\xc8\x3e\x62\x46\x15\x07\x82\xf1\x51\xb6\x60\xe1\x79\xe5\x91\xb8\xdb\x9b\x3e\x12\x75\x9d\xc8\x2d\x56\x36\xcd\x21\x54\xb8\x46\xec\x16\x53\xad\xe6\xd6\x51\xc7\x92\x5f\xb8\x0a\x85\xf9\x09\x2f\x5e\x60\x34\xea\x98\xd2\xf0\x35\x4f\x3e\xc8\x8b\xd2\x17\xa9\xf0\xb0\x35\x97\xbd\x15\xb6\xdb\xe3\x02\x73\xbc\xc1\xd7\x5e\xbe\x47\x43\xbe\x3a\xc6\xb7\x4a\xc9\xdf\x9e\xdc\xa7\x25\x63\x35\xc6\xef\x67\x7f\xbc\x3d\xc5\x3b\x8f\x2a\xa7\x1c\xe8\x31\x1a\x5e\x0a\xbd\x69\xe9\x42\xc5\xa1\x19\x84\x23\xa7\x68\x0d\x81\x2b\x90\x5f\xda\xc0\xbe\x91\x51\x2f\x75\xb0\x02\xfb\xa8\xc6\x2a\x52\xc2\xcf\x57\x8a\xae\x5a\x0e\x09\x97\xaf\x2e\xff\x7d\xf1\xee\xc5\xc9\x5e\x29\xff\xe5\xb0\xa0\x30\x54\xd2\xbf\xc7\x76\x7b\xd2\x1d\x2c\xae\x76\x28\x0e\xd9\xa3\x28\xda\x60\x97\xd6\x51\x4d\x06\x45\x21\xba\x54\xec\xe0\x28\x88\x40\xb1\xc4\xf4\x74\x2a\x3f\x4f\x3f\xa1\xa0\x21\xda\xf1\xbe\x0d\x13\x50\xd9\x4b\xc0\xfe\x84\x52\xbd\x5a\x17\xa5\x2e\x52\xc8\x31\xc9\x5e\x44\x4a\xdd\x46\xe4\x16\x35\x79\x5a\xea\x6e\x96\xf2\x24\x26\x5d\x2e\xa0\x23\x22\x0b\xcd\xc7\x0e\xce\x37\x15\xd6\x46\x38\x6d\x8d\x34\x0c\xb3\xb5\x1a\x77\x26\x43\xe8\x6b\x39\x7c\xdc\x9f\x74\x1c\x29\x20\xcd\x6d\xb7\x24\xc3\x7a\xdc\x63\xdc\x70\x20\x35\x96\x54\x22\xaa\xc0\xcd\x0d\xdb\x36\x70\x49\x31\xca\x56\xad\xac\x08\xed\xdc\xb6\xe2\xaf\xcf\x5f\xf5\x69\x44\x42\x9c\x73\x76\xa6\xeb\x31\xfb\x92\xa0\x61\xf4\x1a\xec\xdd\x5a\xaa\x69\xbb\x64\x48\xa0\x18\xd5\x34\xc7\x30\x75\x5c\x6a\xd7\xdd\xb8\xf5\xa7\x48\xa5\x19\x8a\x15\xc1\x9c\xe9\x48\xce\x7a\xd9\x4c\x9c\x3f\x7d\xf3\xa0\x7d\xe4\x2a\xad\x74\xf8\x6a\xfb\xd2\xe9\x46\x2f\x77\xd6\x6a\x0c\xf2\x82\xb4\x8e\x9a\x7a\x3e\xbc\x39\x95\x81\x37\xa3\xba\xa6\xcd\xec\x1b\x1d\x17\x68\x4c\x34\x3b\x5a\x45\x1f\xe7\xe6\xdf\x86\xfd\xf5\x93\xca\x65\xf2\xe9\xcb\xff\x3d\x77\x43\x02\xff\x2f\x77\x7d\x11\xdf\xe7\x4d\x1d\x93\xb6\x94\x3d\x99\x42\x9b\x46\xe0\x51\x09\xa5\x72\x4b\x3e\xce\x6d\x95\x0a\x01\x57\x60\x57\xb4\x4e\x7b\xea\x75\x49\x28\xe2\x81\x53\xc2\x64\xfb\x22\x26\x22\x42\xd0\x2e\x32\x3c\x91\xb9\xb6\x9c\x74\x83\x9d\x2c\xd9\xe5\x86\x22\xe4\xba\xd7\xdf\x08\xcd\x4e\x18\x44\xeb\x7b\x9d\x2f\x45\x0e\x44\x33\x76\xf7\xc2\x06\x4f\xfe\xfe\xec\xc9\x5d\xf7\xc3\x7b\xfc\x4b\x1e\xbd\xfe\x76\xb7\xdf\xb8\x8e\x8e\x6b\x44\x2b\x08\x5f\x11\x1a\xed\x75\x4d\xa0\x25\x85\x75\x9a\x8b\x49\x9a\x07\xce\xf5\x1c\x3b\x09\xdf\x9b\xca\xa0\xe3\x3b\x2f\x77\xce\x8d\xdb\x83\xd7\x6a\x0c\xcf\x89\x4e\xa1\x13\x37\xb6\x2c\x6e\xf6\x0c\x65\x90\x0f\x56\xc7\xdc\x46\x64\x9f\xac\x43\xa3\x63\x77\x49\x8c\xc8\xed\x21\xc6\xee\xf4\xf2\x25\xd8\xf7\x7f\xf3\xc6\x72\x4e\x26\x77\xed\xda\xfb\x1e\x40\xa0\x19\x73\x12\xe2\x28\xb9\x69\xbb\x8b\xee\x5d\x9f\x36\x23\x15\xe7\x39\x19\x91\xf4\xa2\x18\xce\xfc\xfc\x57\xb9\xfe\xbb\x48\xdb\xed\x01\xc6\x8f\x56\x83\xcf\x9f\xfb\x2b\xd2\xee\xeb\xe1\x7f\x01\x00\x00\xff\xff\x38\xb6\xac\x3c\xe3\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

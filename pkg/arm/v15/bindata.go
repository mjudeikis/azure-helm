// Package arm Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x59\x5f\x57\x1b\xb7\x12\x7f\xae\x3e\xc5\x74\x4d\x9b\x26\x45\xbb\x90\xb6\xf7\xb6\x6e\xc9\x39\x04\x48\x0f\xb7\x14\xb8\x90\xdc\x3e\xa4\x39\x39\xf2\x6a\xd6\x56\xac\x95\xb6\x92\xd6\xc6\x75\xfc\xdd\xef\x19\xed\xda\xd8\xd8\x40\xd2\xd0\xe6\x81\xd8\xd2\x68\x66\x34\xf3\x9b\x7f\x72\xe7\xf3\xac\xa7\x4c\xd6\x13\x7e\x00\x1c\xaf\x18\xeb\xc0\x0b\xeb\x20\xa0\x0f\xca\xf4\xbb\xa0\x6d\x1f\x84\x91\x20\x9d\xad\x40\x68\x0d\xc1\x89\xa2\x50\x39\x84\x81\x08\x30\xb6\xb5\x96\xe0\x6c\x1d\x10\x46\x4a\x40\x18\x20\x94\xc2\x07\x74\x70\x74\xf2\x9c\x75\xe0\xe2\xe8\xf2\xec\xd5\xc5\xc1\xd1\xcf\x17\x67\xaf\xce\xf7\x92\x89\xad\x1d\x77\xe8\x6d\xed\x72\xe4\x7d\x67\xeb\x2a\x61\x1d\x38\xbb\x7c\xfb\xe2\xbf\x87\xa7\x7b\x89\xad\xd0\xf8\x81\x2a\x42\xba\xb5\x72\x32\xb5\x5e\x48\x1c\xa5\xb9\xb6\xb5\x4c\x58\x87\x75\x40\x55\x41\xf4\x34\x7a\xe0\xc7\x70\x7c\x7a\xfe\xea\x25\x70\x0f\x5b\x5f\x49\xd5\x87\xaf\xfd\xc0\xba\x00\xc9\x56\xcb\x37\x81\xf7\x10\x84\xd2\xc0\x77\x1f\x03\x7f\x07\x27\x67\x3f\x03\xe7\xda\xf6\x79\xe5\xb0\x50\x57\x90\xfc\xf2\xea\xf9\x11\x10\x29\x1c\x5e\x9c\x9d\x77\x93\x4f\xe3\x4f\x3c\x18\x9b\x4e\x41\x15\x90\x1e\x58\x53\xa8\x7e\x7a\x89\x79\xed\x54\x98\x9c\x8b\x90\x0f\xce\x45\x3e\x14\x7d\xf4\x30\x9b\x31\x6d\xfb\x7d\x74\xc0\x43\x6b\x38\xee\x83\x70\xa1\xae\x52\x3f\x80\x44\x19\x1f\x84\xd6\xca\xf4\xc1\xa1\x04\x32\x79\x2e\x0d\xe4\x91\x67\xed\x44\x50\xd6\x80\x35\xb0\xf5\xd5\xc0\xfa\x60\x44\x89\x8f\x13\x96\x8b\x00\xcf\xb2\x91\x70\x99\x56\xbd\x6c\x52\x97\x59\xae\x15\x9a\xc0\x73\x74\x21\xad\xb0\x84\x9f\x7e\x7a\x74\x74\xf6\xe2\x11\xa9\x78\x80\x2e\xec\xfb\xe7\x93\x80\x7e\xa1\x2b\xad\xa9\x42\xe5\x22\xa0\x4f\x5b\x5d\x2f\xb0\xb2\x5e\x05\xeb\x26\x71\x1b\xde\xc3\x65\x70\xa4\xd7\x6c\xc6\x8e\xce\x5e\xdc\x2e\x74\x88\x93\x9b\x32\xcf\x9d\x1a\x89\x80\xbf\xe0\xe4\x23\x25\xff\x82\x93\x35\xc1\x1f\x6c\xc0\xfd\x8b\x33\xf0\xad\x17\xa0\xae\x24\xc9\x80\xd7\xd3\x69\xcb\xcf\xff\xc7\x2a\x73\x8f\xbb\x92\x6d\x48\x60\x36\x7b\xb3\x66\xf2\xc2\x3a\x10\x21\x60\x59\x05\x50\x06\xa6\xbb\x69\xfa\xdd\xec\x47\x90\x96\x01\x4c\xea\x12\x5a\x35\x80\x4f\x80\xff\x01\x1f\x27\x33\x8a\x84\x2f\xbf\x84\x9e\x43\x31\x64\x00\x77\x5e\xf8\xf5\x5c\x8d\xad\x69\xfb\x69\xf6\x66\xf3\xd5\x5b\x9d\x1a\x0c\x15\x42\x69\x94\x09\x03\xc2\xec\xeb\xd7\x4b\xa7\x81\xeb\x00\xdf\xc1\x9b\x37\x3f\x52\x74\x1b\xf0\x1a\xb1\x82\xdd\x1f\x01\xb5\x47\xc0\x2b\x15\xe8\x4b\xa1\x98\xb4\x06\xef\xf1\x86\xc3\xd2\x8e\x3e\x0e\xcc\x64\xbd\x5c\xa3\x30\x94\x7c\x98\x2b\x81\xbb\x02\xee\x04\xf7\x1d\x20\x64\xd3\x29\x1a\x39\x9b\x51\x96\xcb\x1d\x8a\x80\x24\x3d\x08\x65\xd0\x41\x55\x6b\x4d\x56\x72\x18\x58\x39\x94\xca\x01\xaf\xae\x99\x59\xa7\xfa\xca\x64\xa9\xb4\xf9\x10\xdd\x0d\xb8\xaf\x6e\x66\xcd\x8d\xd2\x77\xde\x9a\x65\xd8\xa7\x87\xe8\xd4\x08\x65\x7a\x60\xcb\x9e\x32\x28\x8f\x4b\xd1\xc7\xf3\x5a\xeb\xcb\x28\x75\x0e\x84\x35\x88\x6b\x43\xb9\xe7\x16\x69\x90\x39\x6b\x43\x46\x57\x7a\x79\x76\x78\xd6\x05\x89\x1a\x03\xc6\x54\x5c\x58\xad\xed\x98\x38\xc5\x54\xdb\xdc\x99\xac\x2c\x0a\x4a\xd1\x2a\x80\xf2\xd0\x13\x43\x94\xa0\x4c\xb0\x60\x6b\x07\xff\xfb\x15\x14\xe9\xe5\x59\x3c\x23\xa4\x04\x5e\x40\x7b\x6d\xa6\x0a\xf8\x1c\xfa\x0e\x97\x2c\x33\x57\x03\x43\x9e\x15\x3e\x88\x5e\x03\x14\x06\xe0\x27\x3e\x60\x99\x07\x0d\x3e\xd8\xaa\xe5\xc1\xa3\x37\xeb\x2a\x0d\xaa\x44\x77\x2f\x95\x47\x37\x52\x39\xde\x46\xb7\xb4\x5f\x0e\x0b\x9f\x5e\x15\x9e\xd4\xcd\x24\x8e\x32\xa9\xfc\x30\x13\x7f\xd6\x0e\xb3\x45\xc9\xa9\x84\x0b\xbb\x0c\x00\xf3\x81\x85\x47\x77\x93\xc1\xda\x1d\x81\xd8\x43\xdf\x55\x7f\xd4\x36\x08\x80\x1d\xd8\x79\x04\xcf\x9e\x5d\x5f\x9d\xd4\xb0\xb5\x09\x37\x4f\x32\x00\x87\x3e\x58\x87\xb9\x35\xc0\x2f\x36\xec\x37\x88\x22\x4e\x2d\x8a\xa4\xc0\xd2\x9a\x1b\x28\x62\x00\x09\x15\x2e\x49\x48\x72\x49\x17\x92\x77\xb6\x76\x46\x68\x99\x6c\xd3\x9e\x54\x9e\xaa\x16\xd7\xd8\x17\xf9\x84\x3b\xec\x2b\x1f\xdc\x24\xe9\x42\x70\x35\xb2\x06\x4f\xab\xb6\x14\x2e\xac\x1b\x73\x33\xc1\x0d\xdf\x15\x8a\xb1\xd6\x32\x31\x78\x08\xe3\x6d\x2e\x8b\xd0\xf6\xe9\xa9\x95\x18\xb3\xd7\xb3\x68\x6a\x43\x54\x5f\x6e\x44\x11\x86\x5c\x6e\xc2\xd0\xc2\xab\x37\x7d\xe5\x73\xaf\x76\x33\x5d\x9b\x1d\x78\xff\xbe\xb9\xdd\x6d\x6e\x5d\x22\xbd\x21\xb0\x71\xa8\xc4\x42\xd4\x3a\xf8\x0f\x72\x28\x9d\xbb\xdd\x9d\x71\x97\xec\xd2\x01\x91\xe7\x58\x51\x13\x05\xdf\x7f\xfb\xed\x37\x40\x25\x82\x62\x52\xc8\x52\x79\x4f\x41\x48\xa9\xc7\x59\xad\xc9\x92\xd6\x81\xf4\xb1\x76\x84\xbc\xda\x8e\x07\xda\x0f\xdf\xc6\x32\xf2\x59\xe5\x6c\xb0\x7b\x5b\x53\xe9\xc3\x17\x5f\x6c\x3f\x99\xb1\xcf\x2a\xeb\x42\xb3\xd0\xe9\x3c\xd9\x9e\xb1\xcf\xae\x3b\x96\xfd\xd8\x51\x1d\x5f\x1c\xfd\xb6\x7f\x72\xf2\x76\xff\xe4\xe4\xec\x37\x4a\x66\x5b\x91\x09\xf0\x92\x9c\x1a\x10\x38\x6f\xfe\x3f\x3d\xfa\x8d\x16\xe7\xdb\x5c\x12\x6b\xd8\x8a\x7f\xf9\x3b\xd8\x3f\x38\x38\x3a\x7f\x09\x7c\xdc\xa6\xf8\xb9\x1c\xee\xc5\x08\x5b\xcc\xfa\x89\x6f\xb2\x5e\x36\xdf\xbd\xa7\x14\x10\x60\xc8\x36\xeb\x98\xb9\x6c\xa8\x60\x36\xbb\xbb\xae\xde\x8d\xbc\x6b\x2e\x9f\x56\x3a\x3f\x58\xca\xc7\x56\xd0\x7f\xed\xdc\x56\x42\xa9\xbb\x3d\x3d\x7b\x79\xd4\x85\x63\x03\x45\x1d\x6a\x87\xdb\x50\xda\x11\x36\x3d\xb7\x32\x85\x75\x65\x5b\x2d\xeb\xe0\x95\x44\xb0\x05\xa0\x19\x29\x67\x4d\x89\x26\xc0\x48\x38\xd5\x38\xa1\xc3\x3c\x06\xf8\xfa\x8a\xe1\x55\x74\xe7\xe5\xfe\xe5\xab\x8b\xe3\xbd\x47\x4b\x57\xf9\x35\x5a\xa2\xbd\x49\xb3\x0f\xb3\xd9\xa3\x78\x90\xc7\x81\xc0\xd5\x26\x42\xb7\x35\x16\x70\xae\x8c\x0a\x10\x2c\xf4\xac\x0d\x3e\x38\x51\xc1\xe1\xe9\x25\x78\x0c\x75\x35\xcf\x08\x74\x88\xf3\xca\xa9\x91\xd2\xd8\x47\x09\x9c\x53\xf5\xe6\x06\xc3\xd8\xba\x21\x50\x8d\x07\x3e\x82\xac\x9b\xd1\xc7\xee\x9f\xc0\xb1\x55\xef\x6e\x43\xaf\x6a\xb1\xe0\xc7\xb9\xb3\x7a\x3e\x7d\x44\xad\xb1\x49\x5d\x73\x82\x52\x18\x41\xce\x0f\x16\x2a\x95\x0f\xa1\xae\xc0\xe0\xb8\xd1\xc3\x63\xa0\x48\xf5\x31\x00\x07\x08\x72\xd0\x34\x0e\x2c\x0e\x47\xd7\xc9\x70\xce\xf3\xb4\xe1\xf9\x6b\xc3\x92\x75\x88\x41\x3c\x18\x83\x81\xca\x88\x1e\xa5\x14\x10\x2c\x2e\xac\x92\x53\x6a\xaa\xa8\xc7\x43\x97\xca\xec\x87\x1f\x78\x53\xd0\xb9\x34\x3e\xf5\x03\x52\x7d\x1c\x61\x42\x92\x28\x44\x0c\x25\xd1\xb1\x10\x7d\x72\x2d\xcd\x62\xf3\x1b\xd5\x41\x69\x15\x14\x7a\xe8\xdb\xd8\xd0\x05\x0b\x4e\xe4\xb1\xa9\x91\x8a\x00\x92\xd2\x20\x53\x2c\x0e\xbb\xda\x78\xe8\x61\x61\x1d\x82\x34\x9e\xaa\xff\xd0\xd8\xb1\x21\x9b\x90\xf6\x8d\x24\x04\x34\x92\xcc\x33\x56\x61\x00\x04\xe1\x09\xf8\xd8\x90\xb0\xf1\x40\x69\x8c\xe8\x5e\xf4\x68\xc0\xe5\x63\xd8\xdb\x83\x24\x89\x08\x97\xf6\xba\x43\x6c\xe0\xfc\x0f\xe1\x81\xd5\x86\x9c\xd0\x9c\x60\xac\xe9\x72\x79\x2e\x78\x70\xb5\x0f\xac\xf1\x51\xb4\x67\x5d\x41\x1f\x0d\x8e\x44\x4c\x07\xb4\xe2\x83\xc8\x87\x20\x3c\x78\x4b\xcd\x91\x8f\xc6\x58\xed\x4b\x95\x07\x2d\x94\xa4\x88\x83\xde\x84\x75\x56\x02\x62\xd1\x44\x6e\x37\x27\xb5\xf5\x04\xb4\x81\x8a\x26\x6e\x8d\x7b\x0b\x71\x69\x1d\xb2\x0e\xa9\xe2\xa1\x70\xb6\x5c\xa1\xad\x9c\xcd\xd1\x7b\xf2\xc9\x58\x51\x7b\x3a\x50\x15\xf1\x6b\xf4\x67\x8d\x1a\x1e\xc1\x0f\x9a\x41\xbc\xa6\x06\x3a\x47\x10\x20\xc5\x04\xac\xd1\x13\xba\x4d\x85\x4d\xe9\x91\x36\xf7\x2c\xab\xbd\xcb\xb4\xcd\x85\x8e\xd8\x16\x7f\x7a\xcc\x65\x7b\x59\x6a\x33\x7b\xc2\xa3\x56\x86\xfc\x0a\xe7\xbb\x87\xf7\xd2\x7b\x5b\x84\xb1\x70\x1f\x4c\x9f\x6b\x51\x8a\xd1\x9c\x9a\x75\x00\x0d\xa5\xaa\x08\xec\x26\xb8\x56\xbd\xd2\xf6\x24\x9e\x5d\x47\x61\x6d\x4a\xe1\x87\x50\x4a\x2f\xe7\x2d\x0b\x34\x72\x56\xbf\x96\xd6\x5c\xaf\x14\xba\x46\x13\x16\xdf\x97\xd8\xb5\x0a\x3c\x14\xbb\xe6\x12\x9f\xc6\x8d\x75\xe0\x5c\x19\x18\xd6\x3d\x6c\x2c\x17\x51\x54\x7b\x84\x68\x59\x10\x95\xe2\x44\x8b\x8e\x79\x0a\x25\x05\xdc\x21\x24\xbe\xf3\x15\x3c\x69\xd6\xbb\xf0\x38\x7d\xd2\xf9\x7d\x77\x10\x42\xe5\xbb\x59\xb6\x34\x54\x75\x92\x26\x4d\xb5\x73\x44\x93\x31\x33\xea\x4b\x4c\x7a\x2d\xf1\xc1\x18\x2f\xde\x74\x78\xb3\xf0\xa0\x32\x28\x63\xc5\x3f\x0f\xcf\xd5\xcb\x07\x30\x47\x9c\xcd\x22\x9b\x76\x2a\x64\x6c\x3a\xe5\x94\x93\x0d\xc2\x56\xfa\x5c\xe4\xc3\xba\x7a\xae\x6d\xef\x94\x52\x69\x92\xdc\xfb\x22\xb4\xa8\x0a\xd4\x7b\x8e\xd0\x4d\xd6\x26\x66\xca\x74\x81\x12\x30\xf4\xdb\xa2\xd4\x8b\x52\xe2\xf0\x7c\x51\xac\xf6\xaa\xd9\x13\x46\x4d\x0a\xe9\x71\xa8\xdc\xde\xea\x5e\x7b\xae\x19\x86\xb7\x96\xe8\xfe\x72\x6f\x77\x14\x72\xd9\xdc\xf9\x13\xdb\xbb\x15\x46\x7f\x67\x87\xb7\x2a\xe8\xe1\x9a\xbc\x3b\xf5\x94\x76\x6c\xb4\x15\x92\x8c\xd8\x38\x21\x59\x2d\xa3\xeb\x95\xf3\x77\x06\xb1\x7a\xae\xc5\x5f\x77\x7d\x69\x13\x71\x7c\x59\xad\x9c\x1d\x29\x89\x2e\xeb\x66\x6f\xa5\x08\x22\x7b\x4b\xe5\xae\xa5\x5e\x06\x40\x37\xb3\x35\x95\x68\xda\xba\xcf\x66\x04\xa5\xe6\x12\x0d\x27\xde\x6b\xe1\xbe\x47\x27\x6f\x44\xc0\x6c\xd6\x12\xc9\xf8\x00\x1d\x6b\xef\x1e\x09\x6b\xc1\x98\xca\x5e\x4b\x20\xf2\xb8\x37\x37\xd5\xdd\x06\x6d\xe5\xcf\x89\xc9\x85\xf3\x30\x79\x3a\x1f\xe5\xfe\x2a\xa6\x9b\xfe\x99\xee\xfc\x89\x98\x5e\x61\xf4\x77\x62\x7a\x55\xd0\x3f\x84\xe9\xc6\xca\xb1\xae\x1b\x51\xf9\x81\x0d\x1f\x85\x69\x42\x51\x77\xf1\x69\xb1\xb5\x9c\xaf\xba\xab\xdf\x1a\x74\x72\x84\xa3\x97\x07\x87\x07\x2f\x4f\xde\xee\x9f\x1f\xef\x25\xdf\x24\xb7\x80\x76\xd5\x28\x44\x43\x5c\x62\x41\x6f\xf5\x9d\x03\x65\x25\x12\xd6\x70\x49\x71\xc3\x29\x61\xae\xe6\x52\x1a\x35\x1a\x82\xd8\x34\x2f\x65\xec\x76\x99\x86\x19\x25\x34\xcf\x75\x1d\x63\x34\x69\x6d\xb8\x13\xff\xed\xcd\xeb\xcb\xca\x6a\xf7\xe9\x37\xdf\xef\x6c\x2f\x2f\xed\x6e\x24\xdc\x5d\x27\x7c\xba\x91\xf0\x69\x24\x4c\x36\xab\xc4\x83\x1d\xa2\x89\x66\xe1\x85\x75\x3c\x3e\xae\xdc\x20\x15\x72\x84\x2e\x28\x8f\xbc\x42\x74\xbc\x76\xda\xc3\x86\xd2\x18\xc5\x30\x56\x8e\xd6\xad\x94\x3d\xb9\xb1\xb6\xf6\xe8\xbb\xb0\xe7\x4a\x49\x5a\x79\x90\xb9\xc1\xf7\x43\x90\x89\x71\x5c\x49\x62\x79\xa6\xf9\x67\x36\x63\x2c\xd4\x06\x25\x17\xb2\xa4\x46\xbc\xa0\xd1\xe7\xba\x99\x69\x5f\x6f\x78\xa5\x45\x1c\xda\xa9\x47\x17\xda\x5b\x30\x88\xf2\x9a\x2e\x8d\x0d\x5b\x3a\xb2\xba\x2e\xd1\x03\x01\xa3\x79\x79\x96\xf3\x41\xec\xaa\xf0\xd0\xbc\x27\xe6\x34\x7e\xd1\x8c\x36\x7f\x7f\x2e\x61\xe7\xdf\xdf\xed\x6c\x7a\x87\xbe\x85\x3f\xe9\xd1\x3c\x01\xc6\x16\xc1\x4f\xbc\xb6\x7d\xf0\x8a\x66\x82\x31\xb6\x23\x30\x20\xf5\x0d\x61\x40\x24\x61\xe0\x6c\xdd\x1f\xc0\xfc\x15\x71\xa9\x8f\x6d\x9f\x12\xe7\x5c\x36\x76\xba\xb6\x5a\xdb\x66\x1d\x30\x36\x60\x17\x44\xb0\xa5\xca\xf9\xb5\xc5\xe2\x74\x99\x3b\xe1\x07\xa0\xad\xad\x3c\xd4\x26\x28\x3d\xff\xbd\x50\x79\xa8\xab\xf5\xae\x7c\x23\x97\x85\xb0\x87\xf8\x8d\xcd\xe7\x03\x94\x75\x34\xd8\x72\x54\x3a\xec\x59\x1b\x1f\x39\x72\x5b\x56\xf1\x49\x7d\xd3\xcf\x28\x09\xf3\x83\x3a\x50\x61\xa1\x14\xd6\x9c\xf9\xfa\x29\x9b\x4e\x29\x45\xce\x66\x6b\x73\xc1\x9d\xf7\x59\xbc\x64\xce\x7f\xa7\xf8\x7f\x00\x00\x00\xff\xff\xd6\x61\xed\x88\x9e\x1d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\x5d\x6f\xdb\xc8\x15\x7d\x9f\x5f\x71\x56\x5a\xc4\x5d\x6c\x28\x25\x05\xd2\x02\xce\x26\x40\x9a\x64\x81\x74\xd1\xb5\x61\x6f\xdb\x87\x20\x0f\x23\xce\x25\x35\xab\xe1\x5c\x66\x3e\x24\x2b\x8a\xfe\x7b\x71\x49\x2a\x96\x2d\x5b\x4e\x90\xbe\x49\xe4\x9d\xfb\x79\xee\x39\xc3\xf1\x0f\xd3\x99\xf5\xd3\x99\x8e\x73\x14\x74\xa5\xd4\x66\x03\x5b\x61\xf2\x9a\x7d\x65\xeb\xc9\x25\x95\x39\xd8\xb4\x3e\xd7\xa9\x9c\x9f\xeb\x72\xa1\x6b\x8a\xd8\x6e\x95\xe3\xba\xa6\x80\x22\xc1\xb3\xa1\x22\x26\x1d\x52\x6e\x27\x71\x8e\x91\xf5\x31\x69\xe7\xac\xaf\x11\xc8\x60\xae\x13\x4a\xe3\x51\x76\x1e\x73\xd0\xc9\xb2\x07\x7b\xfc\xf8\x97\x39\xc7\xe4\x75\x43\x3f\x8d\x54\xa9\x13\x5e\x4e\x97\x3a\x4c\x9d\x9d\x4d\xd7\xb9\x99\x96\xce\x92\x4f\x45\x49\x21\x4d\x5a\x6a\xf0\xcb\x2f\x27\x6f\xcf\x7e\x3d\x91\x04\x5f\x53\x48\xaf\xe2\x3f\xd6\x89\xe2\x97\x4c\xe5\x99\xad\x6c\xa9\x13\xc5\xc9\x90\xe9\x05\xb5\x1c\x6d\xe2\xb0\xee\x5e\xe3\x33\x2e\x53\x90\xbc\xb6\x5b\xf5\xf6\xec\xd7\xfb\x83\x2e\x68\x7d\x3b\xe6\x79\xb0\x4b\x9d\xe8\x37\x5a\x7f\x63\xe4\xdf\x68\x7d\x10\xf8\x2b\xdb\xf7\xea\xe2\x0c\x71\x98\x00\x72\x6b\x24\x02\xde\x6f\x36\x83\xb7\xf8\x4f\xb6\xfe\x81\x51\x8d\x1e\x63\x84\xed\xf6\xc3\x41\xc3\x2b\x0e\xd0\x29\x51\xd3\x26\x58\x8f\xcd\xd3\xc9\xe4\xd9\xf6\x39\x0c\x2b\x60\x9d\x1b\x0c\x69\xa0\x58\xa3\xf8\x88\x6f\x8b\xd9\x85\xc4\xa3\x47\x98\x05\xd2\x0b\x05\x1c\x29\xf7\xfd\x2e\x89\x1f\x37\xc3\xaf\xed\x87\xbb\x0b\x1f\x32\xea\xf1\x53\x69\xeb\xc8\x8c\x14\x04\xad\xef\xdf\xef\x9d\x46\xe1\x12\x9e\xe1\xc3\x87\xe7\x48\x73\xf2\x88\x8e\xa8\xc5\xd3\xe7\x20\x17\x09\x74\x65\x93\xfc\xa9\xac\x32\xec\xe9\xe8\x24\x02\x35\xbc\xfc\x36\x18\x4b\xe7\x4a\x47\xda\x43\x3b\xa7\x42\x83\x22\x54\x38\x0a\xeb\x23\xf0\x53\x9b\x0d\x79\xb3\xdd\x2a\x35\x46\x19\x48\x27\x92\xe8\x49\x5b\x4f\x01\x6d\x76\x4e\x7a\x14\x28\xa9\x66\x61\x6c\x40\xd1\x5e\x3b\xe3\x60\x6b\xeb\xa7\x13\xc3\xe5\x82\xc2\x2d\xa0\xdf\x7c\x39\xed\x2b\x9a\xfc\x19\xd9\xef\x03\x7e\xf2\x86\x82\x5d\x92\x99\xbc\xe6\x66\x66\x3d\x99\x77\x8d\xae\xe9\x3c\x3b\x77\xd9\x45\xdd\x81\xe0\x00\xdc\xce\xa3\x88\xf7\xa5\x82\x69\x60\x4e\x53\x29\xe9\x8f\xb3\x37\x67\xa7\x30\xe4\x28\x91\x8c\x0a\x15\x3b\xc7\x2b\xf1\x54\x07\xce\x6d\x5f\xb3\x74\x59\x57\x89\x02\x6c\x82\x8d\x98\xe9\x05\x19\x58\x9f\x18\x9c\x03\xfe\xf3\x2f\x58\xc9\x2b\xaa\xee\x8c\x36\x06\x45\x85\xa1\x6c\x65\x2b\xfc\x80\x3a\xd0\x5e\x67\x76\x69\x50\x2a\xa7\x55\x4c\x7a\xd6\xc3\x44\x01\x71\x1d\x13\x35\x65\x72\x88\x89\xdb\xc1\x47\xd1\x4d\x33\xb7\x93\x64\x1b\x0a\x0f\x5a\x45\x0a\x4b\x5b\xd2\x7d\x76\x7b\xef\x9b\x45\x15\x27\x57\x55\x94\x74\xa7\x86\x96\x53\x63\xe3\x62\xaa\x3f\xe5\x40\xd3\x40\x91\x73\x28\xa9\x68\x75\x48\x4f\x15\x40\xe5\x9c\x71\x72\xdc\x0c\x07\x35\x42\xdc\xa3\x0e\xed\xc7\xcc\x49\x03\x4f\xf0\xe4\x04\x2f\x5f\x5e\x97\x2e\x69\x70\xf6\xe9\xf6\x49\x05\x04\x8a\x89\x03\x95\xec\x51\x5c\x1c\xbc\xdf\x6c\x0a\xd9\x3b\xfa\x88\xc9\x05\x3b\x12\xd2\xaa\x82\x96\xad\x57\x40\x0f\x36\x09\x32\x00\xcc\x68\x6a\xd8\xdf\x02\x98\x02\x46\x8e\xeb\xc2\x08\xc8\xc2\xe8\x14\xa3\x3f\x39\x07\xaf\x9d\x19\x3d\x96\x77\xc6\x46\x3d\x73\x54\x38\xaa\x75\xb9\x2e\x02\xd5\x36\xa6\xb0\x1e\x9d\x22\x85\x4c\xaa\x87\x9a\xe4\x41\xde\xf4\x71\xf7\x3b\xae\x43\x3a\x6c\xf9\xdd\x06\xb7\x26\x5c\x59\xa5\x86\xfe\x75\x2b\x26\x9b\x30\xb0\x5d\xb7\x00\x71\xf2\x3b\x1b\xea\xf8\xed\x65\x37\x10\x2f\x56\x8f\x04\xd0\xab\x8e\x6e\xc4\xb5\x60\x58\xe8\x04\x2b\xad\x6b\xf2\x09\xda\x1b\x78\x4a\x2b\x0e\x0b\xe4\x64\x9d\x4d\x96\x22\x6a\xee\x68\x2d\x31\x82\x2e\xbb\xe5\x36\x56\x00\x3f\x51\x63\x69\xef\xee\x70\xc8\x3e\x62\x46\x15\x07\x82\xf1\x51\xb6\x60\xe1\x79\xe5\x91\xb8\xdb\x9b\x3e\x12\x75\x9d\xc8\x2d\x56\x36\xcd\x21\x54\xb8\x46\xec\x16\x53\xad\xe6\xd6\x51\xc7\x92\x5f\xb8\x0a\x85\xf9\x09\x2f\x5e\x60\x34\xea\x98\xd2\xf0\x35\x4f\x3e\xc8\x8b\xd2\x17\xa9\xf0\xb0\x35\x97\xbd\x15\xb6\xdb\xe3\x02\x73\xbc\xc1\xd7\x5e\xbe\x47\x43\xbe\x3a\xc6\xb7\x4a\xc9\xdf\x9e\xdc\xa7\x25\x63\x35\xc6\xef\x67\x7f\xbc\x3d\xc5\x3b\x8f\x2a\xa7\x1c\xe8\x31\x1a\x5e\x0a\xbd\x69\xe9\x42\xc5\xa1\x19\x84\x23\xa7\x68\x0d\x81\x2b\x90\x5f\xda\xc0\xbe\x91\x51\x2f\x75\xb0\x02\xfb\xa8\xc6\x2a\x52\xc2\xcf\x57\x8a\xae\x5a\x0e\x09\x97\xaf\x2e\xff\x7d\xf1\xee\xc5\xc9\x5e\x29\xff\xe5\xb0\xa0\x30\x54\xd2\xbf\xc7\x76\x7b\xd2\x1d\x2c\xae\x76\x28\x0e\xd9\xa3\x28\xda\x60\x97\xd6\x51\x4d\x06\x45\x21\xba\x54\xec\xe0\x28\x88\x40\xb1\xc4\xf4\x74\x2a\x3f\x4f\x3f\xa1\xa0\x21\xda\xf1\xbe\x0d\x13\x50\xd9\x4b\xc0\xfe\x84\x52\xbd\x5a\x17\xa5\x2e\x52\xc8\x31\xc9\x5e\x44\x4a\xdd\x46\xe4\x16\x35\x79\x5a\xea\x6e\x96\xf2\x24\x26\x5d\x2e\xa0\x23\x22\x0b\xcd\xc7\x0e\xce\x37\x15\xd6\x46\x38\x6d\x8d\x34\x0c\xb3\xb5\x1a\x77\x26\x43\xe8\x6b\x39\x7c\xdc\x9f\x74\x1c\x29\x20\xcd\x6d\xb7\x24\xc3\x7a\xdc\x63\xdc\x70\x20\x35\x96\x54\x22\xaa\xc0\xcd\x0d\xdb\x36\x70\x49\x31\xca\x56\xad\xac\x08\xed\xdc\xb6\xe2\xaf\xcf\x5f\xf5\x69\x44\x42\x9c\x73\x76\xa6\xeb\x31\xfb\x92\xa0\x61\xf4\x1a\xec\xdd\x5a\xaa\x69\xbb\x64\x48\xa0\x18\xd5\x34\xc7\x30\x75\x5c\x6a\xd7\xdd\xb8\xf5\xa7\x48\xa5\x19\x8a\x15\xc1\x9c\xe9\x48\xce\x7a\xd9\x4c\x9c\x3f\x7d\xf3\xa0\x7d\xe4\x2a\xad\x74\xf8\x6a\xfb\xd2\xe9\x46\x2f\x77\xd6\x6a\x0c\xf2\x82\xb4\x8e\x9a\x7a\x3e\xbc\x39\x95\x81\x37\xa3\xba\xa6\xcd\xec\x1b\x1d\x17\x68\x4c\x34\x3b\x5a\x45\x1f\xe7\xe6\xdf\x86\xfd\xf5\x93\xca\x65\xf2\xe9\xcb\xff\x3d\x77\x43\x02\xff\x2f\x77\x7d\x11\xdf\xe7\x4d\x1d\x93\xb6\x94\x3d\x99\x42\x9b\x46\xe0\x51\x09\xa5\x72\x4b\x3e\xce\x6d\x95\x0a\x01\x57\x60\x57\xb4\x4e\x7b\xea\x75\x49\x28\xe2\x81\x53\xc2\x64\xfb\x22\x26\x22\x42\xd0\x2e\x32\x3c\x91\xb9\xb6\x9c\x74\x83\x9d\x2c\xd9\xe5\x86\x22\xe4\xba\xd7\xdf\x08\xcd\x4e\x18\x44\xeb\x7b\x9d\x2f\x45\x0e\x44\x33\x76\xf7\xc2\x06\x4f\xfe\xfe\xec\xc9\x5d\xf7\xc3\x7b\xfc\x4b\x1e\xbd\xfe\x76\xb7\xdf\xb8\x8e\x8e\x6b\x44\x2b\x08\x5f\x11\x1a\xed\x75\x4d\xa0\x25\x85\x75\x9a\x8b\x49\x9a\x07\xce\xf5\x1c\x3b\x09\xdf\x9b\xca\xa0\xe3\x3b\x2f\x77\xce\x8d\xdb\x83\xd7\x6a\x0c\xcf\x89\x4e\xa1\x13\x37\xb6\x2c\x6e\xf6\x0c\x65\x90\x0f\x56\xc7\xdc\x46\x64\x9f\xac\x43\xa3\x63\x77\x49\x8c\xc8\xed\x21\xc6\xee\xf4\xf2\x25\xd8\xf7\x7f\xf3\xc6\x72\x4e\x26\x77\xed\xda\xfb\x1e\x40\xa0\x19\x73\x12\xe2\x28\xb9\x69\xbb\x8b\xee\x5d\x9f\x36\x23\x15\xe7\x39\x19\x91\xf4\xa2\x18\xce\xfc\xfc\x57\xb9\xfe\xbb\x48\xdb\xed\x01\xc6\x8f\x56\x83\xcf\x9f\xfb\x2b\xd2\xee\xeb\xe1\x7f\x01\x00\x00\xff\xff\x38\xb6\xac\x3c\xe3\x0f\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

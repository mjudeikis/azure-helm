package api

import (
	"bytes"
	"encoding/json"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"testing"

	"github.com/Azure/go-autorest/autorest/to"

	v20180930preview "github.com/openshift/openshift-azure/pkg/api/2018-09-30-preview/api"
	admin "github.com/openshift/openshift-azure/pkg/api/admin/api"
	pluginapi "github.com/openshift/openshift-azure/pkg/api/plugin/api"
	"github.com/openshift/openshift-azure/pkg/util/structtags"
	"github.com/openshift/openshift-azure/test/util/populate"
)

var marshalled = []byte(`{
	"plan": {
		"name": "Plan.Name",
		"product": "Plan.Product",
		"promotionCode": "Plan.PromotionCode",
		"publisher": "Plan.Publisher"
	},
	"properties": {
		"provisioningState": "Properties.ProvisioningState",
		"openShiftVersion": "Properties.OpenShiftVersion",
		"publicHostname": "Properties.PublicHostname",
		"fqdn": "Properties.FQDN",
		"networkProfile": {
			"vnetCidr": "Properties.NetworkProfile.VnetCIDR",
			"vnetId": "Properties.NetworkProfile.VnetID",
			"peerVnetId": "Properties.NetworkProfile.PeerVnetID"
		},
		"routerProfiles": [
			{
				"name": "Properties.RouterProfiles[0].Name",
				"publicSubdomain": "Properties.RouterProfiles[0].PublicSubdomain",
				"fqdn": "Properties.RouterProfiles[0].FQDN"
			}
		],
		"agentPoolProfiles": [
			{
				"name": "Properties.AgentPoolProfiles[0].Name",
				"count": 1,
				"vmSize": "Properties.AgentPoolProfiles[0].VMSize",
				"subnetCidr": "Properties.AgentPoolProfiles[0].SubnetCIDR",
				"osType": "Properties.AgentPoolProfiles[0].OSType",
				"role": "Properties.AgentPoolProfiles[0].Role"
			}
		],
		"authProfile": {
			"identityProviders": [
				{
					"name": "Properties.AuthProfile.IdentityProviders[0].Name",
					"provider": {
						"kind": "AADIdentityProvider",
						"clientId": "Properties.AuthProfile.IdentityProviders[0].Provider.ClientID",
						"secret": "Properties.AuthProfile.IdentityProviders[0].Provider.Secret",
						"tenantId": "Properties.AuthProfile.IdentityProviders[0].Provider.TenantID",
						"customerAdminGroupId": "Properties.AuthProfile.IdentityProviders[0].Provider.CustomerAdminGroupID",
						"customerReaderGroupId": "Properties.AuthProfile.IdentityProviders[0].Provider.CustomerReaderGroupID"
					}
				}
			]
		},
		"servicePrincipalProfile": {
			"clientId": "Properties.ServicePrincipalProfile.ClientID",
			"secret": "Properties.ServicePrincipalProfile.Secret"
		},
		"azProfile": {
			"tenantId": "Properties.AzProfile.TenantID",
			"subscriptionId": "Properties.AzProfile.SubscriptionID",
			"resourceGroup": "Properties.AzProfile.ResourceGroup"
		}
	},
	"id": "ID",
	"name": "Name",
	"type": "Type",
	"location": "Location",
	"tags": {
		"Tags.key": "Tags.val"
	},
	"config": {
		"clusterVersion": "Config.ClusterVersion",
		"imageOffer": "Config.ImageOffer",
		"imagePublisher": "Config.ImagePublisher",
		"imageSku": "Config.ImageSKU",
		"imageVersion": "Config.ImageVersion",
		"sshKey": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
		"configStorageAccount": "Config.ConfigStorageAccount",
		"registryStorageAccount": "Config.RegistryStorageAccount",
		"certificates": {
			"etcdCa": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"ca": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"frontProxyCa": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"serviceSigningCa": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"serviceCatalogCa": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"etcdServer": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"etcdPeer": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"etcdClient": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"masterServer": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"openShiftConsole": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"admin": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"aggregatorFrontProxy": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"masterKubeletClient": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"masterProxyClient": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"openShiftMaster": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"nodeBootstrap": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"registry": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"router": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"serviceCatalogServer": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"serviceCatalogAPIClient": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"azureClusterReader": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"genevaLogging": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			},
			"genevaMetrics": {
				"key": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
				"cert": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2akNDQVpTZ0F3SUJBZ0lKQVBaMC8ydDJqYXJ5TUEwR0NTcUdTSWIzRFFFQkN3VUFNQlV4RXpBUkJnTlYKQkFNVENtdDFZbVZ5Ym1WMFpYTXdIaGNOTVRneE1URXlNVGN5TWpJeFdoY05NakF4TVRFeU1UY3lNakl4V2pBVgpNUk13RVFZRFZRUURFd3ByZFdKbGNtNWxkR1Z6TUZ3d0RRWUpLb1pJaHZjTkFRRUJCUUFEU3dBd1NBSkJBTko2CnFoY1ppQStLbFFERE5WakE2NE1USW0rd1hhVlJ2ekNmcG5vcmtGNDlSRzFWL1ZuZlZCTmVPNTBvb3E1ZGNpcEkKTjNvOG5lcGNPUEFOWG5Ob1ZFTUNBd0VBQWFPQnhqQ0J3ekFPQmdOVkhROEJBZjhFQkFNQ0JhQXdEQVlEVlIwVApBUUgvQkFJd0FEQ0JvZ1lEVlIwUkJJR2FNSUdYZ2dwcmRXSmxjbTVsZEdWemdnMXRZWE4wWlhJdE1EQXdNREF3CmdnMXRZWE4wWlhJdE1EQXdNREF4Z2cxdFlYTjBaWEl0TURBd01EQXlnZ3ByZFdKbGNtNWxkR1Z6Z2hKcmRXSmwKY201bGRHVnpMbVJsWm1GMWJIU0NGbXQxWW1WeWJtVjBaWE11WkdWbVlYVnNkQzV6ZG1PQ0pHdDFZbVZ5Ym1WMApaWE11WkdWbVlYVnNkQzV6ZG1NdVkyeDFjM1JsY2k1c2IyTmhiREFOQmdrcWhraUc5dzBCQVFzRkFBTkJBTkF2CjUwaXJlRHRqUkRiMVZydjJEcmRGZXhrT2hhZzNJM3dEVWlPb0loYjVuTkNNRjdnMEF1VEpOWkhFUXFOWDNYb1gKYkZpRkExdUxLZEZMc1B1T1dTUT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="
			}
		},
		"images": {
			"format": "Config.Images.Format",
			"clusterMonitoringOperator": "Config.Images.ClusterMonitoringOperator",
			"azureControllers": "Config.Images.AzureControllers",
			"prometheusOperatorBase": "Config.Images.PrometheusOperatorBase",
			"prometheusBase": "Config.Images.PrometheusBase",
			"prometheusConfigReloaderBase": "Config.Images.PrometheusConfigReloaderBase",
			"configReloaderBase": "Config.Images.ConfigReloaderBase",
			"alertManagerBase": "Config.Images.AlertManagerBase",
			"nodeExporterBase": "Config.Images.NodeExporterBase",
			"grafanaBase": "Config.Images.GrafanaBase",
			"kubeStateMetricsBase": "Config.Images.KubeStateMetricsBase",
			"kubeRbacProxyBase": "Config.Images.KubeRbacProxyBase",
			"oAuthProxyBase": "Config.Images.OAuthProxyBase",
			"masterEtcd": "Config.Images.MasterEtcd",
			"controlPlane": "Config.Images.ControlPlane",
			"node": "Config.Images.Node",
			"serviceCatalog": "Config.Images.ServiceCatalog",
			"sync": "Config.Images.Sync",
			"templateServiceBroker": "Config.Images.TemplateServiceBroker",
			"registry": "Config.Images.Registry",
			"router": "Config.Images.Router",
			"registryConsole": "Config.Images.RegistryConsole",
			"ansibleServiceBroker": "Config.Images.AnsibleServiceBroker",
			"webConsole": "Config.Images.WebConsole",
			"console": "Config.Images.Console",
			"etcdBackup": "Config.Images.EtcdBackup",
			"genevaImagePullSecret": "Q29uZmlnLkltYWdlcy5HZW5ldmFJbWFnZVB1bGxTZWNyZXQ=",
			"genevaLogging": "Config.Images.GenevaLogging",
			"genevaTDAgent": "Config.Images.GenevaTDAgent",
			"genevaStatsd": "Config.Images.GenevaStatsd",
			"metricsBridge": "Config.Images.MetricsBridge",
			"imagePullSecret": "Q29uZmlnLkltYWdlcy5JbWFnZVB1bGxTZWNyZXQ="
		},
		"adminKubeconfig": "eyJwcmVmZXJlbmNlcyI6e30sImNsdXN0ZXJzIjpudWxsLCJ1c2VycyI6bnVsbCwiY29udGV4dHMiOm51bGwsImN1cnJlbnQtY29udGV4dCI6IiJ9",
		"masterKubeconfig": "eyJwcmVmZXJlbmNlcyI6e30sImNsdXN0ZXJzIjpudWxsLCJ1c2VycyI6bnVsbCwiY29udGV4dHMiOm51bGwsImN1cnJlbnQtY29udGV4dCI6IiJ9",
		"nodeBootstrapKubeconfig": "eyJwcmVmZXJlbmNlcyI6e30sImNsdXN0ZXJzIjpudWxsLCJ1c2VycyI6bnVsbCwiY29udGV4dHMiOm51bGwsImN1cnJlbnQtY29udGV4dCI6IiJ9",
		"azureClusterReaderKubeconfig": "eyJwcmVmZXJlbmNlcyI6e30sImNsdXN0ZXJzIjpudWxsLCJ1c2VycyI6bnVsbCwiY29udGV4dHMiOm51bGwsImN1cnJlbnQtY29udGV4dCI6IiJ9",
		"serviceAccountKey": "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlCT1FJQkFBSkJBTko2cWhjWmlBK0tsUURETlZqQTY0TVRJbSt3WGFWUnZ6Q2Zwbm9ya0Y0OVJHMVYvVm5mClZCTmVPNTBvb3E1ZGNpcElOM284bmVwY09QQU5Ybk5vVkVNQ0F3RUFBUUpBSFNIclR2MHlydXdBaWJWN09jaWkKRUdkaW1kRHdkVVJtVVNXWDFrc1hWV09uTXFxeFk4c1ZEZTQrOVNqbW1uMHRpZjc3UDRHWE0zUWxKSjFXa0tvQQo4UUloQVBPWjhjRDd0NTNBazIzOWh1bytMR1FnNUZZaVdVM0JGWTJ1VUQ0RG1EL0xBaUVBM1RFbHdFcC8ybXN5CkVlaXNlc3B6ZlBqQXVSME16clRoS3FEcTEwa3BQbWtDSUdFaThORElUd2FicE81R0cwZEt0WDdUMHRrNTV5eG4KSXdZVkRUQTlWTGVUQWlBd2dhcXB0S3k5Rld6eGlIanFwS01XOE9ZeXNqQXcxSEhjaTFWMHlOS0dvUUlnWlZiVQpNZU1kQVdVdkVJbXowY0RnQ3BLTCtqNDAySm1iZFZ1dkhNNyt3QVU9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==",
		"sessionSecretAuth": "Q29uZmlnLlNlc3Npb25TZWNyZXRBdXRo",
		"sessionSecretEnc": "Q29uZmlnLlNlc3Npb25TZWNyZXRFbmM=",
		"runningUnderTest": true,
		"registryHttpSecret": "Q29uZmlnLlJlZ2lzdHJ5SFRUUFNlY3JldA==",
		"prometheusProxySessionSecret": "Q29uZmlnLlByb21ldGhldXNQcm94eVNlc3Npb25TZWNyZXQ=",
		"alertManagerProxySessionSecret": "Q29uZmlnLkFsZXJ0TWFuYWdlclByb3h5U2Vzc2lvblNlY3JldA==",
		"alertsProxySessionSecret": "Q29uZmlnLkFsZXJ0c1Byb3h5U2Vzc2lvblNlY3JldA==",
		"registryConsoleOAuthSecret": "Config.RegistryConsoleOAuthSecret",
		"consoleOAuthSecret": "Config.ConsoleOAuthSecret",
		"routerStatsPassword": "Config.RouterStatsPassword",
		"serviceCatalogClusterId": "01010101-0101-0101-0101-010101010101",
		"genevaLoggingSector": "Config.GenevaLoggingSector",
		"genevaLoggingAccount": "Config.GenevaLoggingAccount",
		"genevaLoggingNamespace": "Config.GenevaLoggingNamespace",
		"genevaLoggingControlPlaneAccount": "Config.GenevaLoggingControlPlaneAccount",
		"genevaMetricsAccount": "Config.GenevaMetricsAccount",
		"genevaMetricsEndpoint": "Config.GenevaMetricsEndpoint"
	}
}`)

func TestMarshal(t *testing.T) {
	prepare := func(v reflect.Value) {
		switch v.Interface().(type) {
		case []IdentityProvider:
			// set the Provider to AADIdentityProvider
			v.Set(reflect.ValueOf([]IdentityProvider{{Provider: &AADIdentityProvider{Kind: "AADIdentityProvider"}}}))
		}
	}

	populatedOc := OpenShiftManagedCluster{}
	populate.Walk(&populatedOc, prepare)

	b, err := json.MarshalIndent(populatedOc, "", "\t")
	if err != nil {
		t.Fatal(err)
	}

	if !bytes.Equal(b, marshalled) {
		t.Errorf("json.MarshalIndent returned unexpected result\n%s\n", string(b))
	}
}

func TestUnmarshal(t *testing.T) {
	prepare := func(v reflect.Value) {
		switch v.Interface().(type) {
		case []IdentityProvider:
			// set the Provider to AADIdentityProvider
			v.Set(reflect.ValueOf([]IdentityProvider{{Provider: &AADIdentityProvider{Kind: "AADIdentityProvider"}}}))
		}
	}

	populatedOc := OpenShiftManagedCluster{}
	populate.Walk(&populatedOc, prepare)

	var unmarshalledOc OpenShiftManagedCluster
	err := json.Unmarshal(marshalled, &unmarshalledOc)
	if err != nil {
		t.Fatal(err)
	}
	if !reflect.DeepEqual(populatedOc, unmarshalledOc) {
		t.Errorf("json.Unmarshal returned unexpected result\n%#v\n", unmarshalledOc)
	}
}

// TestJSONTags ensures that all the `json:"..."` struct field tags under
// OpenShiftManagedCluster correspond with their field names
func TestJSONTags(t *testing.T) {
	o := OpenShiftManagedCluster{}
	for _, err := range structtags.CheckJsonTags(o) {
		t.Errorf("mismatch in struct tags for %T: %s", o, err.Error())
	}
}

// walk recursively returns a list of field names contained in a given type.
// For fields of interface type, it iterates a list of candidate types which
// fulfil the interface, passed in in imap.
// TODO: pkg/test/util/populate should be refactored to use an imap argument
// too.
func walk(t reflect.Type, imap map[string][]reflect.Type) []string {
	var walk func(reflect.Type, string) []string

	walk = func(t reflect.Type, path string) (fields []string) {
		if t.PkgPath() != "" &&
			(!strings.HasPrefix(t.PkgPath(), "github.com/openshift/openshift-azure/") ||
				strings.HasPrefix(t.PkgPath(), "github.com/openshift/openshift-azure/vendor/")) {
			fields = append(fields, path)
			return
		}

		switch t.Kind() {
		case reflect.Struct:
			for i := 0; i < t.NumField(); i++ {
				fields = append(fields, walk(t.Field(i).Type, path+"."+t.Field(i).Name)...)
			}
		case reflect.Ptr, reflect.Slice:
			fields = append(fields, walk(t.Elem(), path)...)
		case reflect.Interface:
			if _, found := imap[path]; !found {
				panic(fmt.Sprintf("imap[%s] not found", path))
			}
			for _, t := range imap[path] {
				fields = append(fields, walk(t, path)...)
			}
		case reflect.Map:
			if (t.Key() != reflect.TypeOf("") && t.Key() != reflect.TypeOf(to.StringPtr(""))) ||
				(t.Elem() != reflect.TypeOf("") && t.Elem() != reflect.TypeOf(to.StringPtr(""))) {
				panic(fmt.Sprintf("unimplemented map type %s", t))
			}
		case reflect.Bool, reflect.Int, reflect.Int64, reflect.String, reflect.Uint8:
			fields = append(fields, path)
		default:
			panic(fmt.Sprintf("unimplemented kind %s", t.Kind()))
		}
		return
	}
	return walk(t, "")
}

func TestAdminAPIParity(t *testing.T) {
	// the algorithm is: list the fields of both types.  If the head of either
	// list is expected not to be matched in the other, pop it.  If the heads of
	// both lists match, pop them.  In any other case, error out.

	afields := walk(reflect.TypeOf(admin.OpenShiftManagedCluster{}),
		map[string][]reflect.Type{
			".Properties.AuthProfile.IdentityProviders.Provider": {
				reflect.TypeOf(admin.AADIdentityProvider{}),
			},
		},
	)
	ifields := walk(reflect.TypeOf(OpenShiftManagedCluster{}),
		map[string][]reflect.Type{
			".Properties.AuthProfile.IdentityProviders.Provider": {
				reflect.TypeOf(AADIdentityProvider{}),
			},
		},
	)

	// TODO: I don't believe this should be in the admin type at all
	notInInternal := []*regexp.Regexp{
		regexp.MustCompile(`^\.Response$`),
		regexp.MustCompile(`^\.Properties\.MasterPoolProfile\.`),
	}

	// TODO: why don't we just include all of these in the admin type?
	notInAdmin := []*regexp.Regexp{
		regexp.MustCompile(`^\.Config\.RunningUnderTest$`),
		regexp.MustCompile(`^\.Config\.Images\.ImagePullSecret$`),
		regexp.MustCompile(`^\.Properties\.AzProfile\.`),
		regexp.MustCompile(`^\.Properties\.ServicePrincipalProfile\.`),
	}

loop:
	for len(afields) > 0 || len(ifields) > 0 {
		if len(afields) > 0 {
			for _, rx := range notInInternal {
				if rx.MatchString(afields[0]) {
					afields = afields[1:]
					continue loop
				}
			}
		}

		if len(ifields) > 0 {
			if strings.Contains(ifields[0], "Key") ||
				strings.Contains(ifields[0], "Kubeconfig") ||
				strings.Contains(ifields[0], "Passwd") ||
				strings.Contains(ifields[0], "Password") ||
				strings.Contains(ifields[0], "Secret") {
				ifields = ifields[1:]
				continue
			}

			for _, rx := range notInAdmin {
				if rx.MatchString(ifields[0]) {
					ifields = ifields[1:]
					continue loop
				}
			}
		}

		if len(afields) > 0 && len(ifields) > 0 && afields[0] == ifields[0] {
			afields, ifields = afields[1:], ifields[1:]
			continue
		}

		var afield, ifield string
		if len(afields) > 0 {
			afield = afields[0]
		}
		if len(ifields) > 0 {
			ifield = ifields[0]
		}
		t.Fatalf("mismatch between internal and admin API fields: afield=%q, ifield=%q", afield, ifield)
	}
}

func Test20180930previewAPIParity(t *testing.T) {
	// the algorithm is: list the fields of both types.  If the head of either
	// list is expected not to be matched in the other, pop it.  If the heads of
	// both lists match, pop them.  In any other case, error out.

	pfields := walk(reflect.TypeOf(v20180930preview.OpenShiftManagedCluster{}),
		map[string][]reflect.Type{
			".Properties.AuthProfile.IdentityProviders.Provider": {
				reflect.TypeOf(v20180930preview.AADIdentityProvider{}),
			},
		},
	)
	ifields := walk(reflect.TypeOf(OpenShiftManagedCluster{}),
		map[string][]reflect.Type{
			".Properties.AuthProfile.IdentityProviders.Provider": {
				reflect.TypeOf(AADIdentityProvider{}),
			},
		},
	)

	notInInternal := []*regexp.Regexp{
		regexp.MustCompile(`^\.Response`),
		regexp.MustCompile(`^\.Properties\.MasterPoolProfile`),
	}

	notInV20180930preview := []*regexp.Regexp{
		regexp.MustCompile(`^\.Properties\.ServicePrincipalProfile`),
		regexp.MustCompile(`^\.Properties\.AzProfile`),
		regexp.MustCompile(`^\.Config`),
	}

loop:
	for len(pfields) > 0 || len(ifields) > 0 {
		if len(pfields) > 0 {
			for _, rx := range notInInternal {
				if rx.MatchString(pfields[0]) {
					pfields = pfields[1:]
					continue loop
				}
			}
		}

		if len(ifields) > 0 {
			for _, rx := range notInV20180930preview {
				if rx.MatchString(ifields[0]) {
					ifields = ifields[1:]
					continue loop
				}
			}
		}

		if len(pfields) > 0 && len(ifields) > 0 && pfields[0] == ifields[0] {
			pfields, ifields = pfields[1:], ifields[1:]
			continue
		}

		var pfield, ifield string
		if len(pfields) > 0 {
			pfield = pfields[0]
		}
		if len(ifields) > 0 {
			ifield = ifields[0]
		}
		t.Fatalf("mismatch between internal and v20180930preview API fields: pfield=%q, ifield=%q", pfield, ifield)
	}
}

func TestPluginTemplateAPIParity(t *testing.T) {
	pfields := walk(reflect.TypeOf(pluginapi.Config{}), map[string][]reflect.Type{})
	ifields := walk(reflect.TypeOf(Config{}), map[string][]reflect.Type{})

	notInInternal := []*regexp.Regexp{}

	notInPlugin := []*regexp.Regexp{
		regexp.MustCompile(`^\.SSHKey$`),
		regexp.MustCompile(`^\.ConfigStorageAccount$`),
		regexp.MustCompile(`^\.RegistryStorageAccount$`),
		regexp.MustCompile(`^\.Service`),
		regexp.MustCompile(`^\.Session`),
		regexp.MustCompile(`^\.Registry`),
		regexp.MustCompile(`^\.Prometheus`),
		regexp.MustCompile(`^\.Alert`),
		regexp.MustCompile(`^\.Console`),
		regexp.MustCompile(`^\.RunningUnderTest`),
		regexp.MustCompile(`^\.Certificates\.Ca\.`),
		regexp.MustCompile(`^\.Certificates\.FrontProxyCa\.`),
		regexp.MustCompile(`^\.Certificates\.Service`),
		regexp.MustCompile(`^\.Certificates\.Etcd`),
		regexp.MustCompile(`^\.Certificates\.Master`),
		regexp.MustCompile(`^\.Certificates\.Admin`),
		regexp.MustCompile(`^\.Certificates\.AggregatorFrontProxy`),
		regexp.MustCompile(`^\.Certificates\.OpenShift`),
		regexp.MustCompile(`^\.Certificates\.Node`),
		regexp.MustCompile(`^\.Certificates\.Registry`),
		regexp.MustCompile(`^\.Certificates\.Router`),
		regexp.MustCompile(`^\.Certificates\.Azure`),
		regexp.MustCompile(`^\.Properties\.AzProfile\.`),
		regexp.MustCompile(`^\.Properties\.ServicePrincipalProfile\.`),
	}

loop:
	for len(pfields) > 0 || len(ifields) > 0 {
		if len(pfields) > 0 {
			for _, rx := range notInInternal {
				if rx.MatchString(pfields[0]) {
					pfields = pfields[1:]
					continue loop
				}
			}
		}

		if len(ifields) > 0 {
			if strings.Contains(ifields[0], "Kubeconfig") ||
				strings.Contains(ifields[0], "Passwd") ||
				strings.Contains(ifields[0], "Password") {
				ifields = ifields[1:]
				continue
			}

			for _, rx := range notInPlugin {
				if rx.MatchString(ifields[0]) {
					ifields = ifields[1:]
					continue loop
				}
			}
		}

		if len(pfields) > 0 && len(ifields) > 0 && pfields[0] == ifields[0] {
			pfields, ifields = pfields[1:], ifields[1:]
			continue
		}

		var afield, ifield string
		if len(pfields) > 0 {
			afield = pfields[0]
		}
		if len(ifields) > 0 {
			ifield = ifields[0]
		}
		t.Fatalf("mismatch between internal Config and plugin template API fields: pfield=%q, ifield=%q", afield, ifield)
	}
}
